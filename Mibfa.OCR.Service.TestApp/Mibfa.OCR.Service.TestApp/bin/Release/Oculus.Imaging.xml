<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Oculus.Imaging</name>
    </assembly>
    <members>
        <member name="T:Oculus.Acquisition.Collections.HistoryEventList">
            <summary>
            A list of history events
            </summary>
        </member>
        <member name="T:Oculus.Acquisition.Collections.ImageList">
            <summary>
            Represents a list of images. This actually links to paths on disk, which while somewhat limiting
            simplifies things a great deal. If the need arises to add alternate image sources we can modify this
            behaviour relatively easily.
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Collections.ImageList.Subset(System.Int32,System.Int32)">
            <summary>
            Returns an image list containing the items starting at the start index
            up to count. If count exceeds the length of the list, only as many items
            as are available will be returned
            </summary>
            <param name="startIndex">The starting index for the new list</param>
            <param name="maxItems">The maximum number of items to include in the new list</param>
            <returns>The list of sub-items</returns>
        </member>
        <member name="M:Oculus.Acquisition.Collections.ImageList.Delete">
            <summary>
            Delete all the images from disk
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Collections.ImageList.Clone">
            <summary>
            make shallo copy of this
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Acquisition.Collections.DocumentList">
            <summary>
            A generic list of documents, contains methods for modification
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Collections.DocumentList.Clear">
            <summary>
            Clears all documents, deletes all images. Clear *will not* be called on
            the all images collection, so the event should only raise for document clear
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Collections.DocumentList.GetImageCount">
            <summary>
            Calculates to total number of images in the collection
            </summary>
            <returns>The count</returns>
        </member>
        <member name="M:Oculus.Acquisition.Collections.DocumentList.Clone">
            <summary>
            Creates a SHALLOW clone of the current list
            </summary>
            <returns>A copy of our list</returns>
        </member>
        <member name="T:Oculus.Acquisition.AcquisitionDocument">
            <summary>
            Represents a document object, consisting of basic profile information,
            indexes, and images.
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.AcquisitionDocument.#ctor">
            <summary>
            Create a default instance of the document
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.AcquisitionDocument.ProfileContext">
            <summary>
            Get/set the profile context for the document
            
            NB these items will be shared by different docs while they are still in memory, but once
            they are xml serialized they'll no longer share the instances
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.AcquisitionDocument.Indexes">
            <summary>
            Get/set the indexes for the document
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.AcquisitionDocument.Images">
            <summary>
            The set of paths to image files on disk
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.AcquisitionDocument.AcquisitionProcess">
            <summary>
            Get/set the acquisition process to use when launching the document.
            This can be used to override the default acquisition process for a profile
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.AcquisitionDocument.History">
            <summary>
            Get the history for the document. Adding items will include the history when the document is launched
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.AcquisitionDocument.ApplyBarcodeRules(System.Int32,System.Int32)">
            <summary>
            Applies barcode rules for a specific range of images
            </summary>
            <param name="startImageIndex">the first image to process</param>
            <param name="imageCount">The maximum number of images to process</param>
        </member>
        <member name="M:Oculus.Acquisition.AcquisitionDocument.ApplyBarcodeRules">
            <summary>
            For the given set of indexes, will adjust the current set of index values to the ones
            found in the current set of barcodes.  This logic assumes no values have been specified
            yet.
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.AcquisitionDocument.VerifyDocumentForLaunch">
            <summary>
            Ensures the document is ready for a launch, we need a profile context and an acquisition process id,
            *OR* process XML
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.AcquisitionDocument.Launch">
            <summary>
            Launch the document to local comms
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.AcquisitionDocument.Launch(System.String)">
            <summary>
            Launches the document to remote comms. This will use the current profile context and
            acquisition process id
            </summary>
            <param name="server">The name/IP of the server</param>
        </member>
        <member name="M:Oculus.Acquisition.AcquisitionDocument.Launch(System.String,System.Xml.XmlDocument)">
            <summary>
            Launches a document to the specified server using the specified document XML
            </summary>
            <param name="server">The name/IP of the server</param>
            <param name="documentXml">The document xml to use</param>
        </member>
        <member name="M:Oculus.Acquisition.AcquisitionDocument.GetLaunchDocumentXml">
            <summary>
            Constructs document xml which can be used when launching this document. Please note this XML
            *does not* contain the acqisition process.
            </summary>
            <returns>The doc xml</returns>
        </member>
        <member name="T:Oculus.Acquisition.Image">
            <summary>
            Exposes extra methods on a configuration section
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Image.#ctor">
            <summary>
            Create a default instance of the image object
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Image.#ctor(System.String)">
            <summary>
            Initialize the image with the file path
            </summary>
            <param name="filePath">The path to the image file on disk</param>
        </member>
        <member name="M:Oculus.Acquisition.Image.#ctor(System.String,System.Byte[])">
            <summary>
            Initialize the image with the file path
            </summary>
            <param name="filePath">The path to the image file on disk</param>
            <param name="fileData">The data for the file, this will be used instead of the path on disk</param>
        </member>
        <member name="P:Oculus.Acquisition.Image.FilePath">
            <summary>
            Get/set the file path
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.Image.FileData">
            <summary>
            Get/set the file data
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.Image.Barcodes">
            <summary>
            Get the collection of barcodes
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Image.GetImage">
            <summary>
            Gets an image for the specified index
            </summary>
            <returns>The image for the index</returns>
        </member>
        <member name="M:Oculus.Acquisition.Image.Delete">
            <summary>
            Deletes the image file from disk
            </summary>
        </member>
        <member name="T:Oculus.Acquisition.DocumentException">
            <summary>
            Exception which represents an error in configuration
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.DocumentException.#ctor">
            <summary>
            Create a default instance of the object
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.DocumentException.#ctor(System.String)">
            <summary>
            Create an instance of the exception with the specified message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Oculus.Acquisition.DocumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="T:Oculus.Acquisition.IndexDocument">
            <summary>
            Provides a wrapper around XML associated with a document in indexing
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.#ctor(System.Xml.XmlDocument)">
            <summary>
            Creates an instance of the object around the specified document xml
            </summary>
            <param name="documentXml">The document xml, cannot be null</param>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.#ctor(System.String)">
            <summary>
            Convenience constructor for creating object against xml
            </summary>
            <param name="documentXmlSrc">The document xml src, cannot be null</param>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.Name">
            <summary>
            Get/Set the name of the document
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.UniqueId">
            <summary>
            The unique id for this index document, generally assigned by the local queue management services
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.QueueName">
            <summary>
            the name of the queue
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.DocumentXml">
            <summary>
            Get/set the document xml
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.DocumentID">
            <summary>
            The document id, please note this is not a system unique id, but the id of the document as specified
            in the document XML. This *does not* have to be a Guid.
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.DocumentNamespaceManager">
            <summary>
            Gets a namespace manager for the document
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.DataNode">
            <summary>
            Gets the data node for the document
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.ProcessNode">
            <summary>
            Gets the process node for the document
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.ProfileID">
            <summary>
            Get/set the profile id, if not specified will be Guid.Empty
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.ProfileVersionID">
            <summary>
            Get/set the profile version id, if not specified will be Guid.Empty
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.ProfileContextID">
            <summary>
            Get/set the profile context id, if not specified will be Guid.Empty
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.FragmentCount">
            <summary>
            Get the total number of fragments
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.Location">
            <summary>
            Gets the current location for the document
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexDocument.CurrentActivityNode">
            <summary>
            Gets the activity node based on the current location
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.GetIndexValues">
            <summary>
            Get the document indexes as a list. Please note, modifying this list WILL NOT commit the 
            values back to our object. Use the SetIndexValues method to change the set of indexes
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.SetIndexValues(Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Sets a list of indexes against the document. Use null values to remove the index, otherwise
            indexes not in the list parameter will be left as-is.
            </summary>
            <param name="indexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.SetIndexValue(System.String,System.String)">
            <summary>
            Sets the specified index name to the specified value
            </summary>
            <param name="indexName">The name, cannot be null</param>
            <param name="indexValue">The value, if null, the index will be removed</param>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.SetIndexValue(System.Xml.XmlElement,Oculus.Configuration.Components.IndexValue)">
            <summary>
            Sets a specific index value against the data node
            </summary>
            <param name="dataNode">ouyr data node</param>
            <param name="idx">The index value to set, will create nodes as necessary</param>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.GetContextVariable(System.String)">
            <summary>
            Retrieves the value of a context variable. Returns null if the variable name does not exist in the XML.
            </summary>
            <param name="name">The name of the context variable to retrieve</param>
            <returns>The value of the variable, or null if it cannot be found</returns>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.SetContextVariable(System.String,System.String)">
            <summary>
            Sets the value of a context variable. If null, will remove the variable if it exists
            </summary>
            <param name="name">The name of the context variable to set, cannot be null</param>
            <param name="value">The value to use for the </param>
            <returns>The value of the variable, or null if it cannot be found</returns>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.ClearIndexes">
            <summary>
            Removes ALL indexes from our document
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.GetProfileContext">
            <summary>
            Retrieves the profile context for the document
            </summary>
            <returns>The profile context</returns>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.GetHistory">
            <summary>
            Retrieves a deserialized collection of the history nodes
            </summary>
            <returns>History events</returns>
        </member>
        <member name="M:Oculus.Acquisition.IndexDocument.GetProcess">
            <summary>
            Retrives the process definition as an object, note that version and ids may not be correct
            </summary>
            <returns>The object</returns>
        </member>
        <member name="T:Oculus.Acquisition.IndexFragment">
            <summary>
            Wraps a set of fragment xml. Remember that fragment XMLs are just document xmls with extra fields
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.IndexFragment.#ctor(System.Guid,System.String)">
            <summary>
            Creates an instance of the object using the default parameters. This is an item linked
            to the acquisition engine.
            </summary>
            <param name="uniqueId">
            The transaction id, which is the unique id for the fragment in the acquisition module
            </param>
            <param name="fragmentXml">The fragment xml</param>
        </member>
        <member name="M:Oculus.Acquisition.IndexFragment.#ctor(System.Xml.XmlDocument)">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
            <param name="fragmentXml">The fragment xml</param>
        </member>
        <member name="P:Oculus.Acquisition.IndexFragment.FragmentNode">
            <summary>
            Gets the fragment node within the document
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexFragment.FragmentNo">
            <summary>
            The fragment number
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexFragment.FragmentName">
            <summary>
            The fragment name
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexFragment.FragmentID">
            <summary>
            The fragment id
            </summary>
        </member>
        <member name="P:Oculus.Acquisition.IndexFragment.InternalID">
            <summary>
            The fragment internal id
            </summary>
        </member>
        <member name="T:Oculus.Acquisition.Oculets.Interfaces.INativeOculet">
            <summary>
            Interface defining the required implementation by AutoOculets in Oculus. 
            Your Oculet will only be used for one cycle (start/process/close).
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.Interfaces.INativeOculet.StartDocument(System.Xml.XmlDocument)">
            <summary>
             Called at the beginning of a document transaction. 
            </summary>
            <param name="documentXml">The XML for the document.</param>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.Interfaces.INativeOculet.ProcessFragment(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>
             Called for each fragment within a document, includes the particular fragment XML and
             a read-only stream which contains the fragment data. 
            </summary>
            <param name="fragmentXml">The XML for the fragment.</param>
            <param name="fragmentData">The physical bytes for the fragment</param>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.Interfaces.INativeOculet.CloseDocument">
            <summary>
             Called at the end of a document transaction. You may return document XML which will be integrated
             into the document XML, subject to certain limitations (can change context vars, but not 
             process data, etc)
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.Interfaces.INativeOculet.CancelDocument">
            <summary>
             Called if there is a problem with the transaction, meant to be treated as an abort
            </summary>
        </member>
        <member name="T:Oculus.Acquisition.Oculets.Audit">
            <summary>
             One in a series of objects that are implemented when submiting documents to optical media
             This object specifically is called after a series of document fragments have been submitted to 
             the jukebox and a Volume has been completed. At this point each fragment needs its destination pointer changed by
             calling this object
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.Audit.StartDocument(System.Xml.XmlDocument)">
            <summary>
            Starts the document processing
            </summary>
            <param name="documentXml">The document xml</param>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.Audit.ProcessFragment(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>
            Do nothing
            </summary>
            <param name="fragmentXml">Ignored</param>
            <param name="fragmentData">Ignored</param>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.Audit.CloseDocument">
            <summary>
            Save the audit information to the audit database
            </summary>
            <returns>The xml as-is</returns>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.Audit.CancelDocument">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="T:Oculus.Acquisition.Oculets.NativeStorage">
            <summary>
            This "Oculet" which isn't really an oculet handles storage of documents into the system.
            This has a specifically optimized call for storage, used by the acquisition process logic.
            
            This is called repeatedly for each document, against the same instance. So some degree of care
            must be taken between calls to ensure no data is retained. The main reason for sharing one object
            is that we don't have to repeated log in.
            
            This object DOES NOT connect to security directly. The principal to be used for the operation
            must already be set by the calling code
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.NativeStorage.ClearMemberVariables">
            <summary>
             Clears out all the member variables, making each set of calls
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.NativeStorage.CloseAllFragmentStreams">
            <summary>
             Closes all fragment streams that may be open
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.NativeStorage.DoStartDocumentWork(System.Xml.XmlDocument)">
            <summary>
             Performs all the start document logic once the Xml is loaded and parsed (added to support native mode)
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.NativeStorage.DoCloseDocumentWorkXml">
            <summary>
             Function is called after StartDocument and one or more ProcessFragment calls.
             It actually adds the Document info (Fragments,Indexes etc) to the engine
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.NativeStorage.DoProcessFragmentWork(System.Xml.XmlDocument,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Performs the work to add a fragment to the current document. Remember that fragments are called
            in sequence.
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.NativeStorage.DoDocumentAdd">
            <summary>
             Adds the document via the engine
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.Oculets.NativeStorage.StoreDocument(System.Xml.XmlDocument,System.Xml.XmlDocument[],System.IO.Stream[])">
            <summary>
             Called by the processing module to store a document, all values are already prepopulated, this
             Method DOES NOT need to close all the streams, as the processing module does that work. This does little to
             no verification of args since it should only be called from the processing module
            </summary>
        </member>
        <member name="T:Oculus.Acquisition.HistoryEvent">
            <summary>
            Represents an event within a document
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.HistoryEvent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Acquisition.HistoryEvent.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialization constructor. Uses the current date/time as well as the current
            machine. These values can be overriden by using the properties
            </summary>
            <param name="application">The application for the event</param>
            <param name="action">The action for the event</param>
            <param name="user">The user for the event</param>
        </member>
        <member name="P:Oculus.Acquisition.HistoryEvent.Application">
            <summary>Get/set the application</summary>
        </member>
        <member name="P:Oculus.Acquisition.HistoryEvent.User">
            <summary>Get/set the user</summary>
        </member>
        <member name="P:Oculus.Acquisition.HistoryEvent.Action">
            <summary>Get/set the actio</summary>
        </member>
        <member name="P:Oculus.Acquisition.HistoryEvent.When">
            <summary>Get/set the when (in TO format)</summary>
        </member>
        <member name="P:Oculus.Acquisition.HistoryEvent.Where">
            <summary>Get/set the where</summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.IndexList">
            <summary>
            The string also represents the name of the index
            We must use a collection rather than a dictionary as the ordering of indexes
            is important.
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Collections.IndexList.Item(System.String)">
            <summary>
            Gets the index for the specified name. If none is available, one will be created.
            </summary>
            <param name="indexName">The name of the index, case sensitive, cannot be null</param>
            <returns>The index for the name</returns>
        </member>
        <member name="P:Oculus.Configuration.Components.Collections.IndexList.HasBarcodes">
            <summary>
            Get whether or not there are any barcode fields in this list
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexList.Contains(System.String)">
            <summary>
            Returns true if the list contains the specified index name (case-sensitive).
            False if not.
            </summary>
            <param name="indexName">The name of the index, cannot be null.</param>
            <returns>True if the index has been specified, false otherwise</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexList.UpdateIndexes(Oculus.Configuration.Components.Collections.IndexList)">
            <summary>
            Updates the values of all indexes with the values specified in the collection. New 
            indexes will be added as necessary.
            </summary>
            <param name="indexData">The values to use, cannot be null</param>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexList.UpdateIndexes(Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Updates the values of all indexes with the values specified in the collection. New 
            indexes will be added as necessary.
            </summary>
            <param name="indexData">The values to use, cannot be null</param>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexList.ClearValues(System.Boolean,System.Boolean)">
            <summary>
            Clears all the values on the indexes.
            </summary>
            <param name="includeHiddenIndexes">Set to true to reset hidden fields (starting with "_")</param>
            <param name="barcodesOnly">Set to true to only reset barcode fields</param>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexList.ClearValues">
            <summary>
            Clears all the values on the indexes. Default mode is to clear ALL values.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexList.ToIndexValueList">
            <summary>
            Converts the set of indexes to an index value list, containing name/value combinations
            </summary>
            <returns>The index value list</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexList.Clone">
            <summary>
            Creates a deep clone of the list.
            </summary>
            <returns>The cloned list</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexList.GetElementType">
            <summary>
            Gets the type contained by this list
            </summary>
            <returns>Index type</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.IndexValueList">
            <summary>
            The string also represents the name of the index
            We must use a collection rather than a dictionary as the ordering of indexes
            is important.
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Collections.IndexValueList.Item(System.String)">
            <summary>
            Gets the index for the specified name. If none is available, one will be created.
            </summary>
            <param name="indexName">The name of the index, case sensitive, cannot be null</param>
            <returns>The index for the name</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexValueList.Contains(System.String)">
            <summary>
            Returns true if the list contains the specified index name (case-sensitive).
            False if not.
            </summary>
            <param name="indexName">The name of the index, cannot be null.</param>
            <returns>True if the index has been specified, false otherwise</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexValueList.UpdateIndexes(Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Updates the values of all indexes with the values specified in the collection. New 
            indexes will be added as necessary.
            </summary>
            <param name="indexData">The values to use, cannot be null</param>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexValueList.Clone">
            <summary>
            Creates a deep clone of the list.
            </summary>
            <returns>The cloned list</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexValueList.GetElementType">
            <summary>
            Gets the type contained by this list
            </summary>
            <returns>Index type</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.IndexListItemList">
            <summary>
            The string also represents the name of the index
            We must use a collection rather than a dictionary as the ordering of indexes
            is important.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexListItemList.Clone">
            <summary>
            Creates a deep clone of the list.
            </summary>
            <returns>The cloned list</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexListItemList.GetElementType">
            <summary>
            Gets the type contained by this list
            </summary>
            <returns>Index type</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexListItemList.GetDescription(System.String)">
            <summary>
            Retrieves the description from the list for the specific value. If a description
            does not exist or is empty, the original value is returned.
            </summary>
            <param name="value">The value to retrieve</param>
            <returns>The description</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.IndexListItemList.GetValue(System.String)">
            <summary>
            Takes a description or a value and returns the value.
            If the value does not exist as a description, the original
            description value is returned.
            </summary>
            <param name="description">The description to retrieve</param>
            <returns>The value</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.DependencyList">
            <summary>
            Collection of dependencies
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.DependencyList.Clone">
            <summary>
            Creates a deep clone of the list
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.DependencyList.Remove(System.Guid)">
            <summary>
            removes the entry with the same id from the current list
            </summary>
            <param name="applicationId">the id to caompare to</param>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.DependencyList.Contains(System.Guid)">
            <summary>
            returns true if a dependancy with the same id exists
            </summary>
            <param name="applicationId">the id to look for</param>
            <returns></returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.FileList">
            <summary>
            Collection of files
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.FileList.Clone">
            <summary>
            Creates a deep clone of the list
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.FileList.Remove(System.Guid)">
            <summary>
            removes the entry with the same id from the current list
            </summary>
            <param name="fileId">the id to caompare to</param>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ApplicationList">
            <summary>
            Collection of applications
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.ApplicationList.GetById(System.Guid)">
            <summary>
            Retrieves the application with the specified id
            </summary>
            <param name="id">The id of the application to find</param>
            <returns>The app, or null if not found</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.BranchList">
            <summary>
            Collection of branches
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.MachineList">
            <summary>
            Collection of machines
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Collections.MachineList.DefaultItem">
            <summary>
            this is the default/first selected item that you select, by default this is the current pc. 
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.PlugInList">
            <summary>
            Collection of plugins
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.QueueList">
            <summary>
            Collection of queues
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ApplicationInstanceList">
            <summary>
            Collection of app instances
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.SystemSettingList">
            <summary>
            Collection of system settings
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.SystemSettingList.GetValue(System.String)">
            <summary>
            Get the value associated with the specified key
            </summary>
            <param name="key">The key to find</param>
            <returns>The value, or empty string if not found</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.SystemSettingList.SetValue(System.String,System.String)">
            <summary>
            Sets the specified key with the specified value. Will use an existing
            SystemSetting object if it exists with the same key, else it will create
            a new one with the key
            </summary>
            <param name="key">The key to use</param>
            <param name="value">The value to use</param>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ProcessList">
            <summary>
            Collection of processes
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ProcessVersionList">
            <summary>
            Collection of process versions
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ProcessNameList">
            <summary>
            Collection of process names
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ActivityList">
            <summary>
            Collection of process activities
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.ActivityList.Clone">
            <summary>
            Creates a deep clone of the list
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ScheduleList">
            <summary>
            Collection of schedules
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.ScheduleList.Clone">
            <summary>
            Creates a deep clone of the list
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ConditionList">
            <summary>
            Collection of transition conditions
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.ConditionList.Clone">
            <summary>
            Creates a deep clone of the list
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ComparisonList">
            <summary>
            Collection of transition conditions
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.ComparisonList.Clone">
            <summary>
            Creates a deep clone of the list
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.DeployedIndexList">
            <summary>
            Collection of deployed indexes
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.DeployedIndexList.SetIndexType(System.String,Oculus.Configuration.IndexType)">
            <summary>
            Adds a deployed index to the list if one doesn't already exist
            for the name. Please note this is a case insensitive operation
            </summary>
            <param name="name">The index name, cannot be null</param>
            <param name="type">The type</param>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.DeployedIndexList.GetIndex(System.String)">
            <summary>
            Gets the index type for the specified name
            </summary>
            <param name="name">The name of the index to retrieve</param>
            <returns>the index, or null if not present in the collection</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.DeployedIndexList.ContainsIndex(System.String)">
            <summary>
            Used to determine if the specified index name exists in the collection
            </summary>
            <param name="name">The name of the index, cannot be null</param>
            <returns>True if the index name is present, false otherwise</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ProfileList">
            <summary>
            Collection of profiles
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ProfileNameList">
            <summary>
            Collection of profile names
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ProfileVersionList">
            <summary>
            Collection of profile versions
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.TransitionList">
            <summary>
            Collection of transitions
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.TransitionList.Clone">
            <summary>
            Creates a deep clone of the list
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ProcessLayoutList">
            <summary>
            Collection of process layouts
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.ProcessLayoutList.GetLayoutByVersionId(System.Guid)">
            <summary>
            Retrieves the process layout which applies the specified version
            </summary>
            <param name="versionId">The version id of the layout to find</param>
            <returns>The layout, or null if not found</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.LayoutShapeList">
            <summary>
            Collection of layout shapes
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.LayoutShapeList.GetShapeByName(System.String)">
            <summary>
            Retrieves the shape layout for the specified name
            </summary>
            <param name="name">The name of the layout item to retrieve</param>
            <returns>The layout, or null if not found</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.LayoutShapeList.Clone">
            <summary>
            Creates a deep clone of the list
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.AppRestrictionList">
            <summary>
            Collection of application restrictions
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.RuntimeRestrictionList">
            <summary>
            Collection of runtime restrictions
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.RuntimeRestrictionList.FindByType(Oculus.Configuration.RuntimeRestrictionType)">
            <summary>
            Retrieves the runtime restriction for the specified type
            </summary>
            <param name="type">The type to retrieve</param>
            <returns>The type, or null if not found</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ContextVariableList">
            <summary>
            A list of context variables
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.SystemNameList">
            <summary>
            Collection of system names
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.SystemNameList.FindById(System.Guid)">
            <summary>
            Retrieves the system name object based on its id
            </summary>
            <param name="id">The id to find</param>
            <returns>The object, or null if it cannot be found</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Collections.ProfileLinkList">
            <summary>
            Collection of profile links
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Collections.ProfileLinkList.FindByID(System.Guid)">
            <summary>
            Finds the profile link for the specified id. If not present, null
            will be returned
            </summary>
            <param name="profileId">The id of the profile on the link</param>
            <returns>The link, if the profile id can be found, else null</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.ContextVariable">
            <summary>
            Represents an event within a document
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ContextVariable.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ContextVariable.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor.
            </summary>
            <param name="name">The name for the variable</param>
            <param name="value">The value for the variable</param>
        </member>
        <member name="P:Oculus.Configuration.Components.ContextVariable.Name">
            <summary>Get/set the name</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ContextVariable.Value">
            <summary>Get/set the value</summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Application">
            <summary>
            Represents a registered application in configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.Name">
            <summary>Get/set the application name</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.Description">
            <summary>Get/set the application desription</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.ID">
            <summary>Get/set the application id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.TouchNo">
            <summary>Get/set the application touch number</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.AutoInstall">
            <summary>Get/set the application autoinstall value</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.InstallCommand">
            <summary>Get/set the application install command</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.ClassID">
            <summary>Get/set the application class id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.Type">
            <summary>Get/set the application type</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.DesignerClassID">
            <summary>Get/set the designer class id (the class used to do settings for the app)</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.IsUser">
            <summary>Get/set whether or not the application is a user application</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.IsHidden">
            <summary>Get/set whether or not the application is hidden (hidden means can't be installed directly on a machine)</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.IsSecured">
            <summary>Get/set whether or not the application is secured - will be available on application security screen</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.Dependencies">
            <summary>Get/set the application dependencies</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Application.Files">
            <summary>Get/set the application files</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Application.ToString">
            <summary>
            Gets the name of the registered application
            </summary>
            <returns>The name</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.ApplicationInstance">
            <summary>
            Represents an application instance in configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ApplicationInstance.TypeID">
            <summary>Get/set the type id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ApplicationInstance.Settings">
            <summary>Get/set settings</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ApplicationInstance.GetInstance(System.Guid,System.String)">
            <summary>
            Retrieves the application instance off the current machine
            </summary>
            <param name="typeId">The type id for the application</param>
            <param name="machine">The machine name</param>
            <returns>The instance, or null if the instance does not exist on the current machine</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.ApplicationInstance.GetInstance(System.Guid)">
            <summary>
            Retrieves the application instance off the current machine
            </summary>
            <param name="typeId">The type id for the application</param>
            <returns>The instance, or null if the instance does not exist on the current machine</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Branch">
            <summary>
            Represents a branch in configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Branch.Name">
            <summary>Get/set the branch name</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Branch.Description">
            <summary>Get/set the branch desription</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Branch.Primary">
            <summary>Get/set whether the branch is the primary branch</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Branch.Configuration">
            <summary>Get/set the config server for the branch</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Branch.SecurityServer">
            <summary>Get/set the security server for the branch</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Branch.Machines">
            <summary>Get/set the machines in the branch</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Branch.ConfigurationMachine">
            <summary>
            Gets the configuration machine for this branch. If none is defined, returns the first machine.
            If there are NO machines, null is returned.
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Branch.SecurityMachine">
            <summary>
            Gets the security machine for this branch. If none is defined, returns the first machine.
            If there are NO machines, null is returned.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Branch.GetMachineByName(System.String)">
            <summary>
            Retrieves a machine based on its name. If the machine cannot be found, null is returned.
            </summary>
            <param name="machineName">The machine to find in the branch, cannot be null</param>
            <returns>The machine, or null if it cannot be found</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Branch.GetCurrentBranch">
            <summary>
            Gets the current branch
            </summary>
            <returns>The branch object</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Branch.GetBranchForMachine(System.String)">
            <summary>
            Gets the branch for the specified machine
            </summary>
            <param name="machineName">The machine name within the branch</param>
            <returns>The branch object</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Configuration">
            <summary>
            Represents the entire set of configuration
            </summary>
        </member>
        <member name="F:Oculus.Configuration.Components.Configuration.ConfigurationPropertyValue">
            <summary>
            The constant value for configuration version
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Configuration.ConfigurationVersion">
            <summary>
            Gets the configuration version, this is a flag that let's us know config has been updated
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Configuration.Applications">
            <summary>Get/set the applications</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Configuration.Branches">
            <summary>Get/set the branches</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Configuration.Profiles">
            <summary>Get/set the profiles</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Configuration.Processes">
            <summary>Get/set the processes</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Configuration.SystemNames">
            <summary>Get/set the system names</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Configuration.SystemSettings">
            <summary>Get/set the system settings</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Configuration.License">
            <summary>Get/set the license</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Configuration.PrimaryBranch">
            <summary>
            Gets the primary branch for configuration. If none is defined, returns the first branch
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Configuration.GetAllQueueNames">
            <summary>
            Retrieves a sorted list of the unique queues throughout the entire configuration
            </summary>
            <returns>The set of unique queue names</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Configuration.GetMachineByName(System.String,System.Boolean)">
            <summary>
            Retrieves a machine based on its name. If the machine cannot be found, null is returned
            unless raiseError is true.
            </summary>
            <param name="machineName">The machine to find in the branch, cannot be null</param>
            <param name="raiseError">Set to true if a ConfigurationException should be raised if the machine cannot be found</param>
            <returns>The machine, or null if it cannot be found</returns>
            <exception cref="T:Oculus.Configuration.ConfigurationException">If the machine could not be found and raiseError is set to true</exception>
        </member>
        <member name="M:Oculus.Configuration.Components.Configuration.GetApplicationByTypeId(System.Guid)">
            <summary>
            Retrieves the application instance based on its type id.
            </summary>
            <param name="typeId">The type id to find</param>
            <returns>The application, or null if it cannot be found</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Configuration.CurrentConfiguration">
            <summary>
            gets the current configuration component  for the system
            </summary>
            <returns>configuration component</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.AppRestriction">
            <summary>
            Represents an application restriction in licensing configuration
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.AppRestriction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.AppRestriction.#ctor(System.Guid,System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="applicationId">the application id</param>
            <param name="total">the total number of items allowed</param>
        </member>
        <member name="P:Oculus.Configuration.Components.AppRestriction.ApplicationID">
            <summary>Get/set the restriction key</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.AppRestriction.Total">
            <summary>Get/set the restriction total</summary>
        </member>
        <member name="T:Oculus.Configuration.Components.RuntimeRestriction">
            <summary>
            Represents a runtime restriction in licensing configuration
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.RuntimeRestriction.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.RuntimeRestriction.#ctor(System.String,System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="restrictionFor">The key for the restriction</param>
            <param name="total">The total number for the restriction</param>
        </member>
        <member name="P:Oculus.Configuration.Components.RuntimeRestriction.For">
            <summary>Get/set the restriction key</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.RuntimeRestriction.Total">
            <summary>Get/set the restriction total</summary>
        </member>
        <member name="T:Oculus.Configuration.Components.License">
            <summary>
            Represents a license in configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.License.Key">
            <summary>Get/set the license key</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.License.ClientName">
            <summary>Get/set the client name</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.License.DateIssued">
            <summary>Get/set the date issued</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.License.ExpiryDate">
            <summary>Get/set Expiry Date of license</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.License.IssuedBy">
            <summary>Get/set who issued the license</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.License.RuntimeRestrictions">
            <summary>Get/set the set of runtime restrictions</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.License.AppRestrictions">
            <summary>Get/set the set of application restrictions</summary>
        </member>
        <member name="T:Oculus.Configuration.Components.DeployedIndex">
            <summary>
            Represents an index which has been deployed. These entries
            are used to restrict data type changes on indexes.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.DeployedIndex.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.DeployedIndex.#ctor(System.String,Oculus.Configuration.IndexType)">
            <summary>
            Initializes a new instance of the object.
            </summary>
            <param name="name">The name of the index</param>
            <param name="type">The type of the index</param>
        </member>
        <member name="P:Oculus.Configuration.Components.DeployedIndex.Name">
            <summary>
            Get/set the name of the index
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.DeployedIndex.Type">
            <summary>
            Get/set the type of the index
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Components.LayoutShape">
            <summary>
            Represents a shape in a process version layout
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.LayoutShape.X">
            <summary>
            Get/Set the X position of the shape
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.LayoutShape.Y">
            <summary>
            Get/Set the Y position of the shape
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.LayoutShape.Width">
            <summary>
            Get/Set the Width of the shape
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.LayoutShape.Height">
            <summary>
            Get/Set the Height of the shape
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.LayoutShape.ItemName">
            <summary>
            Get/set the name of the item associated with this shape.
            Please note, transitions *do not* save their layout, as their
            location depends solely on the from and to activities
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.LayoutShape.Clone">
            <summary>
            Get a clone of the object
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Index">
            <summary>
            Represents an index, can either belong to profiles or a specific document.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Index.#ctor">
            <summary>
            Initializes a new instance of the Index class.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Index.#ctor(System.String,System.String)">
            <summary>
            Initialize with a name and value
            </summary>
            <param name="name">The name of the index</param>
            <param name="value">The value for the index</param>
        </member>
        <member name="M:Oculus.Configuration.Components.Index.#ctor(Oculus.Configuration.IndexBehaviour,Oculus.Configuration.IndexAttribute,Oculus.Configuration.IndexType,System.String,System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the Index class.
            </summary>
            <param name="indexBehaviour"></param>
            <param name="indexAttribute"></param>
            <param name="type"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="length"></param>
            <param name="custom"></param>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.Type">
            <summary>
            the type of the index
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.Description">
            <summary>
            Description 
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.Length">
            <summary>
            Get/set the length of the index. Must be greater than zero.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is less than zero</exception>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.Custom">
            <summary>
            this custom attribute on the index
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.IndexBehaviour">
            <summary>
            Get the behaviour for this index
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.IsHidden">
            <summary>
            Get whether or not this index is a hidden field
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.IsNormal">
            <summary>
            Get whether or not this index is a normal index (no special behaviour)
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.IsReadOnly">
            <summary>
            Get whether or not this index is a read-only field
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.IsWriteOnce">
            <summary>
            Get whether or not this index is write-once
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.IndexAttribute">
            <summary>
            Get the attribute for this index
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.IsSearchable">
            <summary>
            Get whether or not this index is searchable
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.IsMandatory">
            <summary>
            Get whether or not this index is mandatory
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.IsBarcode">
            <summary>
            Get whether or not this index is a barcode.
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.IsDynamic">
            <summary>
            Get whether or not this index is dynamic (raises events).
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Index.ListItems">
            <summary>
            Gets the list items for this index.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Index.GetRuntimeType">
            <summary>
            Returns the runtime type which is associated with the index type.
            </summary>
            <returns>The runtime type</returns>
            <exception cref="T:System.ApplicationException">If the index type is unknown</exception>
        </member>
        <member name="M:Oculus.Configuration.Components.Index.Clone">
            <summary>
            Creates a clone of the index
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Index.ToString">
            <summary>
            Display the index name for the tostring
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Configuration.Components.IndexListItem">
            <summary>
            Represents an index list item.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.IndexListItem.#ctor">
            <summary>
            Initializes a new instance of the Index class.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.IndexListItem.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="value">The value for the list item</param>
            <param name="description">The description for the list item</param>
        </member>
        <member name="P:Oculus.Configuration.Components.IndexListItem.Value">
            <summary>
            Description 
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.IndexListItem.Description">
            <summary>
            Description 
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.IndexListItem.Clone">
            <summary>
            Creates a clone of the index
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.IndexListItem.ToString">
            <summary>
            Gets the string representation of the list item
            </summary>
            <returns>The description, or value if description is empty</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.IndexValue">
            <summary>
            Represents an index name + value
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.IndexValue.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.IndexValue.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the IndexValue class.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:Oculus.Configuration.Components.IndexValue.Name">
            <summary>
            Get/set the name of the index
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.IndexValue.Value">
            <summary>
            Get/set the value of the index
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.IndexValue.Clone">
            <summary>
            Creates a clone of this object
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.IndexValue.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Configuration.Components.ProcessLayout">
            <summary>
            Contains the layout (coordinates, etc) of a process design
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessLayout.VersionID">
            <summary>
            Get/Set the process version id associated with the layout object
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessLayout.Shapes">
            <summary>
            Get/set the collection of shapes for this layout
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessLayout.DeriveWidth">
            <summary>
            Determines the required width to contain the layout (with ZERO padding)
            </summary>
            <returns>The calculated width</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessLayout.DeriveHeight">
            <summary>
            Determines the required height to contain the layout (with ZERO padding)
            </summary>
            <returns>The calculated height</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessLayout.Clip">
            <summary>
            Cuts out any top and left padding on the shapes
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessLayout.Clone">
            <summary>
            Get a clone of the object
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.ProfileVersion">
            <summary>
            Represents a process version in configuration
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProfileVersion.#ctor">
            <summary>
            empty ctor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProfileVersion.#ctor(System.String,System.Guid,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the ProfileVersion class.
            </summary>
            <param name="description"></param>
            <param name="id"></param>
            <param name="processId"></param>
            <param name="version"></param>
        </member>
        <member name="P:Oculus.Configuration.Components.ProfileVersion.Description">
            <summary>Get/set the description</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProfileVersion.ID">
            <summary>Get/set the id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProfileVersion.Process">
            <summary>Get/set the acquisition process associated with the version</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProfileVersion.Version">
            <summary>Get/set the version number</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProfileVersion.Indexes">
            <summary>Get/set the list of indexes</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProfileVersion.ToString">
            <summary>
            the text to display is usually somthing like 'Version 1'
            </summary>
            <returns>somthing like 'Version X'</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.ProfileName">
            <summary>
            Represents a profile name version in configuration
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProfileName.#ctor">
            <summary>
            default empty ctor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProfileName.#ctor(System.Guid,System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the ProfileName class.
            </summary>
            <param name="id"></param>
            <param name="nameId"></param>
            <param name="versionId"></param>
        </member>
        <member name="P:Oculus.Configuration.Components.ProfileName.NameID">
            <summary>Get/set the name id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProfileName.VersionID">
            <summary>Get/set the version id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProfileName.ID">
            <summary>Get/set the id</summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Profile">
            <summary>
            Represents a profile in configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Profile.Name">
            <summary>Get/set the name</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Profile.Description">
            <summary>Get/set the description</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Profile.ID">
            <summary>Get/set the id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Profile.ProfileNames">
            <summary>Get/set the list of names</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Profile.Versions">
            <summary>Get/set the list of versions</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Profile.DeployedIndexes">
            <summary>Get/set the list of deployed indexes</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Profile.FindVersionIndexById(System.Guid)">
            <summary>
            Findex the index of the specfied version by id
            </summary>
            <param name="id">the id if the version to look for.</param>
            <returns>the index of the item if found else -1</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.TransitionComparisonItem">
            <summary>
            Represents a process schedule in configuration
            </summary>
        </member>
        <member name="F:Oculus.Configuration.Components.TransitionComparisonItem.TypeStringXPath">
            <summary>
            Use this value for the Type for xpath evaluation
            </summary>
        </member>
        <member name="F:Oculus.Configuration.Components.TransitionComparisonItem.TypeStringValue">
            <summary>
            Use this value for the Type for evaluation as a literal
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.TransitionComparisonItem.Type">
            <summary>Get/set the comparison type</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.TransitionComparisonItem.Value">
            <summary>Get/set the value</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.TransitionComparisonItem.Clone">
            <summary>
            full clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Configuration.Components.TransitionComparisonItem.ToString">
            <summary>
            Gets the string representation of the object
            </summary>
            <returns>The object string</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.TransitionComparison">
            <summary>
            Represents a transition comparison in configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.TransitionComparison.Comparison">
            <summary>Get/set the comparison type</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.TransitionComparison.LHS">
            <summary>Get/set the LHS</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.TransitionComparison.RHS">
            <summary>Get/set the RHS</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.TransitionComparison.Clone">
            <summary>
            full clone
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Configuration.Components.TransitionCondition">
            <summary>
            Represents a process schedule in configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.TransitionCondition.GroupType">
            <summary>Get/set the type</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.TransitionCondition.Comparisons">
            <summary>Get/set the set of comparisons</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.TransitionCondition.Groups">
            <summary>Get/set the set of groups</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.TransitionCondition.Clone">
            <summary>
            full clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Configuration.Components.TransitionCondition.ToString">
            <summary>
            Gets the string representation of the object
            </summary>
            <returns>The object string</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.TransitionSchedule">
            <summary>
            Represents a process schedule in configuration. A user may restric specific days
            to a time interval. The restricted days will be subject to the time interval, 
            unrestricted days will not. Any days not in either list will not transfer.
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.TransitionSchedule.StartTime">
            <summary>Get/set the start time for restricted transitions</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.TransitionSchedule.EndTime">
            <summary>Get/set the end time for restricted transitions</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.TransitionSchedule.RestrictedDays">
            <summary>Get/set the set of days restricted by the schedule</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.TransitionSchedule.Clone">
            <summary>
            full clone
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Configuration.Components.ProcessTransition">
            <summary>
            Represents a process transition in configuration
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessTransition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessTransition.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Intialization constructor. ALSO creates a default transition schedule of "Always On"
            </summary>
            <param name="name">The name to use</param>
            <param name="description">The description to use</param>
            <param name="from">The from to use</param>
            <param name="to">The to to use</param>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessTransition.Name">
            <summary>Get/set the name</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessTransition.Description">
            <summary>Get/set the description</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessTransition.From">
            <summary>Get/set the from activity</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessTransition.To">
            <summary>Get/set the to activity</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessTransition.Condition">
            <summary>Get/set the condition</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessTransition.Schedules">
            <summary>Get/set the schedules</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessTransition.Clone">
            <summary>
            full clone
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Configuration.Components.ProcessActivity">
            <summary>
            Represents a process activity in configuration
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessActivity.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessActivity.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name">The name to use</param>
            <param name="description">The description to use</param>
            <param name="type">The type to use</param>
            <param name="moniker">The moniker to use</param>
            <param name="locale">The locale to use</param>
            <param name="targetAppName">The target app name to use</param>
        </member>
        <member name="F:Oculus.Configuration.Components.ProcessActivity.ActivityTypeCapture">
            <summary>
            Represents the Type value for a capture activity
            </summary>
        </member>
        <member name="F:Oculus.Configuration.Components.ProcessActivity.ActivityTypeQueue">
            <summary>
            Represents the Type value for a queue activity
            </summary>
        </member>
        <member name="F:Oculus.Configuration.Components.ProcessActivity.ActivityTypeStore">
            <summary>
            Represents the Type value for an store activity
            </summary>
        </member>
        <member name="F:Oculus.Configuration.Components.ProcessActivity.TemplateLaunchMachineName">
            <summary>
            The value to use for a template launch machine name
            </summary>
        </member>
        <member name="F:Oculus.Configuration.Components.ProcessActivity.TemplateBranchName">
            <summary>
            The value to use for a template branch name
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessActivity.Name">
            <summary>Get/set the name</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessActivity.Description">
            <summary>Get/set the description</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessActivity.Type">
            <summary>Get/set the type</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessActivity.Moniker">
            <summary>Get/set the moniker</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessActivity.Locale">
            <summary>Get/set the locale</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessActivity.TargetAppName">
            <summary>Get/set the target app name</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessActivity.GetQueueName">
            <summary>
            Derives the queue name from the moniker field. If it cannot be done, or no moniker exists,
            null will be returned.
            </summary>
            <returns>The queue name from the monikerk, if possible</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessActivity.Clone">
            <summary>
            full clone
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Configuration.Components.ProcessName">
            <summary>
            Represents a process name version in configuration
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessName.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessName.#ctor(System.Guid,System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the ProcessName class.
            </summary>
            <param name="id"></param>
            <param name="nameId"></param>
            <param name="versionId"></param>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessName.NameID">
            <summary>Get/set the name id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessName.VersionID">
            <summary>Get/set the version id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessName.ID">
            <summary>Get/set the id</summary>
        </member>
        <member name="T:Oculus.Configuration.Components.ProcessVersion">
            <summary>
            Represents a process version in configuration
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessVersion.#ctor">
            <summary>
            empty ctor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessVersion.#ctor(System.String,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the ProcessVersion class.
            </summary>
            <param name="description"></param>
            <param name="id"></param>
            <param name="version"></param>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessVersion.Description">
            <summary>Get/set the description</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessVersion.ID">
            <summary>Get/set the id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessVersion.InitiatingActivity">
            <summary>Get/set the initiating activity</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessVersion.Version">
            <summary>Get/set the version number</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessVersion.Transitions">
            <summary>Get/set the list of transitions</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessVersion.Activities">
            <summary>Get/set the list of transitions</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProcessVersion.Context">
            <summary>Get/set the list of context variables</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessVersion.Clone">
            <summary>
            full clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Configuration.Components.ProcessVersion.ToString">
            <summary>
            the text to display is usually somthing like 'Version 1'
            </summary>
            <returns>somthing like 'Version X'</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Process">
            <summary>
            Represents a process in configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Process.Name">
            <summary>Get/set the name</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Process.Description">
            <summary>Get/set the description</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Process.ID">
            <summary>Get/set the id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Process.ProcessNames">
            <summary>Get/set the list of names</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Process.Versions">
            <summary>Get/set the list of versions</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Process.Layouts">
            <summary>Get/set the list of layouts</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Process.FindVersionIndexById(System.Guid)">
            <summary>
            Findex the index of the specfied version by id
            </summary>
            <param name="id">the id if the version to look for.</param>
            <returns>the index of the item if found else -1</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.SystemSetting">
            <summary>
            Represents a system name in configuration
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.SystemSetting.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.SystemSetting.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the SystemSetting class.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:Oculus.Configuration.Components.SystemSetting.Key">
            <summary>Get/set the setting key</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.SystemSetting.Value">
            <summary>Get/set the value</summary>
        </member>
        <member name="T:Oculus.Configuration.Components.SystemName">
            <summary>
            Represents a system name in configuration
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.SystemName.#ctor">
            <summary>
            Empty ctor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.SystemName.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the SystemName class.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
        </member>
        <member name="P:Oculus.Configuration.Components.SystemName.ID">
            <summary>Get/set the name id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.SystemName.Name">
            <summary>Get/set the name</summary>
        </member>
        <member name="T:Oculus.Configuration.Components.ProfileLink">
            <summary>
            Represents a link from a plug-in to a profile in configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProfileLink.ID">
            <summary>Get/set the profile id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.ProfileLink.Active">
            <summary>Get/set whether or not the link is the active link (used in adding new documents)</summary>
        </member>
        <member name="T:Oculus.Configuration.Components.Dependency">
            <summary>
            Represents an application dependency
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Dependency.#ctor">
            <summary>
            Empty Ctor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Dependency.#ctor(System.Guid)">
            <summary>
            initialization ctor 
            </summary>
            <param name="parentId">the parent application id</param>
        </member>
        <member name="P:Oculus.Configuration.Components.Dependency.ParentID">
            <summary>Get/set the dependency parent id</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Dependency.Clone">
            <summary>
            Full Clone 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Configuration.Components.File">
            <summary>
            Represents a registered application file in configuration
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.File.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Components.File.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the File class.
            </summary>
            <param name="id"></param>
            <param name="localPath"></param>
        </member>
        <member name="P:Oculus.Configuration.Components.File.ID">
            <summary>Get/set the file id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.File.LocalPath">
            <summary>Get/set the file's local path on the config server</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.File.Clone">
            <summary>
            Full Clone 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Machine">
            <summary>
            Represents a machine in configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Machine.Name">
            <summary>Get/set the machine name</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Machine.Description">
            <summary>Get/set the machine desription</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Machine.Type">
            <summary>Get/set the machine type</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Machine.Queues">
            <summary>Get/set the queues</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Machine.PlugIns">
            <summary>Get/set the plug-ins</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Machine.Applications">
            <summary>Get/set the app instance list</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Machine.ToString">
            <summary>
            Returns the name of the machine
            </summary>
            <returns>The name</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Machine.GetCurrentMachine">
            <summary>
            Gets the current machine from config
            </summary>
            <returns>The current machine</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.Machine.GetMachine(System.String)">
            <summary>
            Gets the machine with the specified name
            </summary>
            <param name="name">The machine name</param>
            <returns>The machine object</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.PlugIn">
            <summary>
            Represents a plug-in instance in configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.PlugIn.Name">
            <summary>Get/set the name</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.PlugIn.Description">
            <summary>Get/set the description</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.PlugIn.TypeID">
            <summary>Get/set the type id</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.PlugIn.Settings">
            <summary>Get/set settings</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.PlugIn.Profiles">
            <summary>Get/set profile links</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.PlugIn.ToString">
            <summary>
            Gets the string representation of the object
            </summary>
            <returns>The string</returns>
        </member>
        <member name="M:Oculus.Configuration.Components.PlugIn.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="T:Oculus.Configuration.Components.Queue">
            <summary>
            Represents a queue in configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Queue.Name">
            <summary>Get/set the name</summary>
        </member>
        <member name="P:Oculus.Configuration.Components.Queue.BusyTimeout">
            <summary>Get/set the busy timeout</summary>
        </member>
        <member name="M:Oculus.Configuration.Components.Queue.ToString">
            <summary>
            this name to display as the tostring representation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Configuration.Collections.ProfileContextList">
            <summary>
            A generic list of profiles
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Collections.ProfileContextList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Collections.ProfileContextList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="M:Oculus.Configuration.Collections.ProfileContextList.GetProfileByContextId(System.Guid)">
            <summary>
            Returns the profile contexed with the supplied id
            </summary>
            <param name="contextId">the supplied id</param>
            <returns>the profilecontext or null if not found</returns>
        </member>
        <member name="T:Oculus.Configuration.AppConfigDocument">
            <summary>
            Configuration is stored in xml, individual sections are available. This class is used by
            Oculus application (e.g. scanning) to manage their individual configuration.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.AppConfigDocument.#ctor">
            <summary>
            Creates a new instance of the configuration object linked to the config xml
            </summary>
        </member>
        <member name="M:Oculus.Configuration.AppConfigDocument.InitDocument">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Configuration.AppConfigDocument.GetConfigurationSection``1(System.String)">
            <summary>
            Gets a configuration section as a specific type
            </summary>
            <typeparam name="T">The type of object to retrieve from the config</typeparam>
            <param name="sectionName">The section name</param>
            <returns>A deserialized instnce of the object, or null if deserialization is not successful</returns>
        </member>
        <member name="M:Oculus.Configuration.AppConfigDocument.SetConfigurationSection(System.String,System.Object)">
            <summary>
            Sets a configuration section within config
            </summary>
            <param name="sectionName">The section name</param>
            <param name="sectionValue">The section value, will be xml serialized</param>
        </member>
        <member name="M:Oculus.Configuration.AppConfigDocument.Save(System.String)">
            <summary>
            Saves configuration at the specified path
            </summary>
            <param name="path">The path to save to, overwrites a file if it's there</param>
        </member>
        <member name="M:Oculus.Configuration.AppConfigDocument.Load(System.String)">
            <summary>
            Loads configuration at the specified path
            </summary>
            <param name="path">The path to load</param>
        </member>
        <member name="M:Oculus.Configuration.AppConfigDocument.Merge(Oculus.Configuration.AppConfigDocument)">
            <summary>
            Merges all the sections of the parameter with the current set of configuration.
            </summary>
            <param name="document">The configuration to merge</param>
        </member>
        <member name="T:Oculus.Configuration.AppConfigSection">
            <summary>
            Used to xml serialize configuration sections
            </summary>
        </member>
        <member name="P:Oculus.Configuration.AppConfigSection.Item(System.String)">
            <summary>
            Get/set the values in this object
            </summary>
            <param name="key">The key</param>
            <returns>The value for the key</returns>
        </member>
        <member name="P:Oculus.Configuration.AppConfigSection.Properties">
            <summary>
            Get the set of properties for the object
            </summary>
        </member>
        <member name="M:Oculus.Configuration.AppConfigSection.GetValue``1(System.String,``0)">
            <summary>
            Gets a value for the specified key
            </summary>
            <param name="key">The key to retrieve</param>
            <param name="defaultValue">The default value if the key does not exist</param>
            <returns>The value</returns>
        </member>
        <member name="M:Oculus.Configuration.AppConfigSection.GetValue(System.String)">
            <summary>
            Get a value for a key
            </summary>
            <param name="key">The key</param>
            <returns>The value</returns>
        </member>
        <member name="M:Oculus.Configuration.AppConfigSection.SetValue(System.String,System.Object)">
            <summary>
            Sets a value for a key
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="P:Oculus.Configuration.AppConfigSection.Keys">
            <summary>
            Gets the set of keys
            </summary>
        </member>
        <member name="M:Oculus.Configuration.AppConfigSection.Clone">
            <summary>
            Creates a clone of the section object and all its properties
            </summary>
            <returns>A copy of the current object</returns>
        </member>
        <member name="T:Oculus.Configuration.ProfileContext">
            <summary>
            Represents a profile context within oculus. All security-related operations must
            be performed against a context.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.ProfileContext.InternalGetFirstVersionContext(System.String)">
            <summary>
            Returns the version one context for the specified xpath, which should resolve to a version node
            </summary>
            <param name="xpath">The xpath to use</param>
            <returns>The context</returns>
            <exception cref="T:System.ArgumentException">If the version node cannot be found</exception>
        </member>
        <member name="M:Oculus.Configuration.ProfileContext.ToString">
            <summary>
            The name of the profile
            </summary>
            <returns>The name</returns>
        </member>
        <member name="M:Oculus.Configuration.ProfileContext.GetProfileContext(System.Guid,System.Boolean)">
            <summary>
            Retrieves the profile context for the specified context id off the default
            system configuration
            </summary>
            <param name="contextId">The context id</param>
            <param name="raiseError">If set to true, will raise an exception if the context is invalid</param>
            <returns>The profile context, or null if the context is invalid</returns>
            <exception cref="T:System.ArgumentException">If the context is invalid</exception>
        </member>
        <member name="M:Oculus.Configuration.ProfileContext.GetFirstVersionContext(System.String)">
            <summary>
            Retrieves the version 1 profile context with the EXACT name provided (case sensitive). An exception
            will be raised if it cannot be found.
            </summary>
            <param name="profileName">The name of the profile to retrieve, cannot be null</param>
            <returns>The profile context for v.1</returns>
            <exception cref="T:System.ArgumentException">If the profile cannot be found</exception>
        </member>
        <member name="M:Oculus.Configuration.ProfileContext.GetFirstVersionContext(System.Guid)">
            <summary>
            Retrieves the version 1 profile context with the id provided. An exception
            will be raised if it cannot be found.
            </summary>
            <param name="profileId">The id of the profile to retrieve</param>
            <returns>The profile context for v.1</returns>
            <exception cref="T:System.ArgumentException">If the profile cannot be found</exception>
        </member>
        <member name="M:Oculus.Configuration.ProfileContext.GetProfileContext(System.Guid,System.Xml.XmlDocument)">
            <summary>
            Retrieves a profile object for a given context id
            </summary>
            <param name="contextId">The profile context id</param>
            <param name="configXml">The configuration xml. Cannot be null</param>
            <returns>A profile context, if the context is valid, otherwise null</returns>
        </member>
        <member name="M:Oculus.Configuration.ProfileContext.CreateProfileContextForVersion(System.Xml.XmlElement,System.String,System.String,System.Guid,System.Xml.XmlNamespaceManager)">
            <summary>
            Creates a profile based on a version node. This method also stores the profile id and
            acquisition process id against the context id into the relevant member variables.
            </summary>
            <param name="versionNode">The version node</param>
            <param name="contextName">The name of the context</param>
            <param name="profileName">The name of the profile</param>
            <param name="contextId">The context id</param>
            <param name="nsMan">The namespace manager to use</param>
            <returns>The profile</returns>
        </member>
        <member name="M:Oculus.Configuration.ProfileContext.GetProfileContextsForRight(System.String)">
            <summary>
            Get a list of profiles for the currently logged in user according to the specified access right
            </summary>
            <param name="right">the profile access right to use</param>
            <returns>The list of profile contexts for the right</returns>
        </member>
        <member name="M:Oculus.Configuration.ProfileContext.GetProfileContextsForRight(System.String,System.String)">
            <summary>
            Get a list of profiles for the currently logged in user according to the specified access right against
            the specfied server
            </summary>
            <param name="right">the profile access right to use</param>
            <param name="server">The server to use</param>
            <returns>The list of profile contexts for the right</returns>
        </member>
        <member name="M:Oculus.Configuration.ProfileContext.#ctor">
            <summary>
            Initializes a new instance of the Profile class.
            </summary>
        </member>
        <member name="P:Oculus.Configuration.ProfileContext.ProfileId">
            <summary>
            Get/set the id of the PROFILE
            </summary>
        </member>
        <member name="P:Oculus.Configuration.ProfileContext.ContextId">
            <summary>
            Get/set the context id of the profile
            </summary>
        </member>
        <member name="P:Oculus.Configuration.ProfileContext.VersionId">
            <summary>
            Get/set the version id of the context
            </summary>
        </member>
        <member name="P:Oculus.Configuration.ProfileContext.AcquisitionProcessId">
            <summary>
            Get the acquisition process id for the context, will be Guid.Empty if there is none
            </summary>
        </member>
        <member name="P:Oculus.Configuration.ProfileContext.Indexes">
            <summary>
            Get the indexes for the context
            </summary>
        </member>
        <member name="P:Oculus.Configuration.ProfileContext.ContextName">
            <summary>
            Get/set the name of the profile context - this is the fully qualified name.
            </summary>
        </member>
        <member name="P:Oculus.Configuration.ProfileContext.ProfileName">
            <summary>
            Get/set the name of the PROFILE
            </summary>
        </member>
        <member name="P:Oculus.Configuration.ProfileContext.HasAcquisitionProcess">
            <summary>
            Gets whether or not the context currently has an acquisition process defined
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Constants">
            <summary>
            Constants for imaging configuration
            </summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.DefaultNumSearchRecordsKey">
            <summary>
            The system setting key for the default number of records to retrieve from searching
            </summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.SearchResultTimeoutKey">
            <summary>
            The system setting key for the default search result timeout
            </summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.SessionTimeoutKey">
            <summary>
            The system setting key for the default session timeout for security
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Constants.ApplicationId">
            <summary>
            Contains the basic application ids for Oculus
            </summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.ApplicationId.Archiving">
            <summary>The application id for archiving</summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.ApplicationId.Backup">
            <summary>The application id for backup</summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.ApplicationId.Export">
            <summary>The application id for export</summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.ApplicationId.WebServices">
            <summary>The application id for web service</summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.ApplicationId.Indexing">
            <summary>The application id for indexing</summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.ApplicationId.Jukebox">
            <summary>The application id for Jukebox Plug-In</summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.ApplicationId.Plugin8">
            <summary>The application id for Oculus 8 Plug-In</summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.ApplicationId.Plugin7">
            <summary>The application id for Oculus 7 Plug-In</summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.ApplicationId.WebReports">
            <summary>The application id for web reports</summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.ApplicationId.Scanning">
            <summary>The application id for Scanning</summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.ApplicationId.Service">
            <summary>The application id for Services</summary>
        </member>
        <member name="F:Oculus.Configuration.Constants.ApplicationId.WebSearch">
            <summary>The application id for the web search application</summary>
        </member>
        <member name="T:Oculus.Configuration.ConfigurationException">
            <summary>
            Exception which represents an error in configuration
            </summary>
        </member>
        <member name="M:Oculus.Configuration.ConfigurationException.#ctor">
            <summary>
            Create a default instance of the object
            </summary>
        </member>
        <member name="M:Oculus.Configuration.ConfigurationException.#ctor(System.String)">
            <summary>
            Create an instance of the exception with the specified message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Oculus.Configuration.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="T:Oculus.Configuration.LicenseViolationException">
            <summary>
            Exception which represents a violation of licensing
            </summary>
        </member>
        <member name="M:Oculus.Configuration.LicenseViolationException.#ctor">
            <summary>
            Create a default instance of the object
            </summary>
        </member>
        <member name="M:Oculus.Configuration.LicenseViolationException.#ctor(System.String)">
            <summary>
            Create an instance of the exception with the specified message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Oculus.Configuration.LicenseViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="T:Oculus.Configuration.LicenseViolationExceptionList">
            <summary>
            List of license violation exceptions
            </summary>
        </member>
        <member name="T:Oculus.Configuration.Utility">
            <summary>
            Utility class for configuration
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Utility.SearchTimeout">
            <summary>
            Gets the global search timeout
            </summary>
        </member>
        <member name="P:Oculus.Configuration.Utility.DefaultSearchRecordsToRetrieve">
            <summary>
            Gets the default number of items to retrieve when searching
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Utility.NewConfigNamespaceManager(System.Xml.XmlDocument)">
            <summary>
            Creates and returns a default namespace manager for the configuration document
            </summary>
            <param name="configDocument">The confgi document, cannot be null</param>
            <returns>The namespace manager with the prefix "ocu" for the config namespace</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.NewDocNamespaceManager(System.Xml.XmlDocument)">
            <summary>
            Creates and returns a default namespace manager for the document parameter with "ocudoc" set
            up as the prefix for the oculus document namespace
            </summary>
            <param name="docOrFragXml">The fragment xml/document xml document, cannot be null</param>
            <returns>A populated namespace manager</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetMachineNode">
            <summary>
            Gets the current machine node in configuration.
            </summary>
            <returns>The machine node</returns>
            <exception cref="T:System.ApplicationException">If the node cannot be found</exception>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetMachineNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Retrieves and returns the machine node for the specified machine
            </summary>
            <param name="config">The configuration to use, cannot be null</param>
            <param name="machineName">The machine to retrieve, cannot be null</param>
            <returns>The machine node</returns>
            <exception cref="T:Oculus.Configuration.ConfigurationException">If the machine can't be found</exception>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetPrimaryBranchConfigServer(System.Xml.XmlDocument)">
            <summary>
            Finds and returns the name of the primary branch config server
            </summary>
            <param name="config">The config to check against</param>
            <returns>The name of the PBCS</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.IsPrimaryBranchConfigServer(System.Xml.XmlDocument,System.String)">
            <summary>
            Determines if the machine parameter is the primary branch's configuration server.
            </summary>
            <param name="config">The config to check against</param>
            <param name="machine">The machine to verify</param>
            <returns>True if the machine is the PBCS, false if not</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetMyConfigServer">
            <summary>
            Finds the config server for the current machine
            </summary>
            <returns>The name of the config server</returns>
            <exception cref="T:Oculus.Configuration.ConfigurationException">If the config server cannot be found</exception>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetMachinesInMyBranch">
            <summary>
            Returns a list of all the servers from configuration in the current machine's branch.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetApplicationType(System.Xml.XmlElement)">
            <summary>
            Returns the application type for the specified application node
            </summary>
            <param name="appNode">The application node to check</param>
            <returns>The type for the app</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetApplicationType(System.String)">
            <summary>
            Returns the application type for the specified application
            </summary>
            <param name="appName">The application to check</param>
            <returns>The type for the app</returns>
            <exception cref="T:System.ArgumentException">If the application doesn't exist</exception>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetApplicationNode(System.String)">
            <summary>
            Returns the application node for the specified name in the current configuration.
            </summary>
            <param name="appName">The application to find, cannot be null</param>
            <returns>The node for the app</returns>
            <exception cref="T:Oculus.Configuration.ConfigurationException">If the application doesn't exist</exception>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetApplicationNode(System.Guid)">
            <summary>
            Returns the application node for the specified type id in the current configuration.
            </summary>
            <param name="applicationTypeId">The type id for application to find</param>
            <returns>The node for the app</returns>
            <exception cref="T:Oculus.Configuration.ConfigurationException">If the application doesn't exist</exception>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetApplicationInstanceNode(System.Guid)">
            <summary>
            Retrieves the application instance node for the current machine with the specified id
            </summary>
            <param name="applicationTypeId">The application type id</param>
            <returns>The node, or null if it cannot be found</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetApplicationInstanceNode(System.String)">
            <summary>
            Retrieves the application instance node for the current machine with the specified
            application name
            </summary>
            <param name="applicationName">The application name</param>
            <returns>The node, or null if it cannot be found</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetApplicationConfigurationNode(System.Guid)">
            <summary>
            Retrieves the configuration node for an application instance on the current machine
            </summary>
            <param name="applicationTypeId">The id of the application</param>
            <returns>The node, or null if not found</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetApplicationConfigurationNode(System.String)">
            <summary>
            Retrieves the configuration node for an application instance on the current machine
            </summary>
            <param name="applicationName">The name of the application</param>
            <returns>The node, or null if not found</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetActivePluginIdForProfileContext(System.Guid)">
            <summary>
            Retrieves the id of the active plug-in for the specified profile context
            </summary>
            <param name="profileContext">The profile context</param>
            <returns>The plug-in id</returns>
            <exception cref="T:Oculus.Configuration.ConfigurationException">If no active plug-in has been defined</exception>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetPluginNode(System.String)">
            <summary>
            Retrieves the node for the specified plug-in on the current machine
            </summary>
            <param name="plugin">The id of the plug-in, cannot be null</param>
            <returns>The node from configuration</returns>
            <exception cref="T:Oculus.Configuration.ConfigurationException">If the plug-in cannot be found</exception>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetSearchPlugins(System.Guid)">
            <summary>
            Retrieves the list of plug-in ids which are linked for searching against the specified profile context.
            </summary>
            <param name="profileContextId">The context id</param>
            <returns>The list of plug-in ids</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetMachinePlugins">
            <summary>
            Retrieves the list of plug-in ids which are on the current machine
            </summary>
            <returns>The list of plug-in ids</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.IsContextSearchable(System.Guid)">
            <summary>
            Determines whether or not the profile context id is searchable on this machine, 
            basically that its profile id has plug-ins defined on the box.
            </summary>
            <param name="profileContextId">The profile context id</param>
            <returns>True if it can be searched, false otherwise</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetProcessDefinitionNode(System.Guid)">
            <summary>
            Finds a process node based on the id, the id can be a version or named item
            </summary>
            <param name="processContextID">The id to use in the search</param>
            <returns>The XML for the VERSION corresponding to the context id</returns>
            <exception cref="T:Oculus.Configuration.ConfigurationException">If the process cannot be found</exception>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetProcessNodeByVersion(System.Guid,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Returns the process version node with the specified id, or null if it does not exist
            </summary>
            <param name="versionID">The id to find</param>
            <param name="config">configuration</param>
            <param name="manager">default namespace manager</param>
            <returns>The node, or null</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetSystemSetting(System.String,System.Boolean)">
            <value>
             Returns the value of any system configuration setting.  Optionally throws an exception
             if the key does not exist.
            </value>
            <param name="settingKey">The key to find</param>
            <param name="raiseError">Set to true to raise an exception if the key is not found</param>
            <exception cref="T:Oculus.Configuration.ConfigurationException">If the system setting can't be found and raiseError is true</exception>
            <returns>The value of the key, or null if it does not exist and exceptions are turned off</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetSystemSetting(System.String)">
            <value>
             Returns the value of any system configuration setting.  Throws an exception
             if the key does not exist.
            </value>
            <param name="settingKey">The key to find</param>
            <exception cref="T:Oculus.Configuration.ConfigurationException">If the system setting can't be found</exception>
            <returns>The value of the key</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetAllConfiguration">
            <summary>
            Retrieves the entire configuration as a deserialized object
            </summary>
            <returns>The configuration</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetAllApplications">
            <summary>
            Retrieves the list of all applications in configuration
            </summary>
            <returns>The list of applications</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetAllBranches">
            <summary>
            Retrieves the list of all branches in configuration
            </summary>
            <returns>The list of branches</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetAllProfiles">
            <summary>
            Retrieves the list of all profiles in configuration
            </summary>
            <returns>The list of profiles</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetAllProcesses">
            <summary>
            Retrieves the list of all processes in configuration
            </summary>
            <returns>The list of processes</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetAllSystemNames">
            <summary>
            Retrieves the list of all system names in configuration
            </summary>
            <returns>The list of system names</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.GetAllSystemSettings">
            <summary>
            Retrieves the list of all system settings in configuration
            </summary>
            <returns>The list of system settings</returns>
        </member>
        <member name="M:Oculus.Configuration.Utility.InternalGetConfigurationSection``1(System.String)">
            <summary>
            Gets an arbitrary configuration section as a deserialized object
            </summary>
            <typeparam name="T">The type to retrieve and deserialize as</typeparam>
            <param name="xpath">The xpath for the node(s)</param>
            <returns>The object, or null if it could not be found</returns>
        </member>
        <member name="T:Oculus.Configuration.IndexType">
            <summary>
            Enumerates the different types of indexes
            </summary>
        </member>
        <member name="F:Oculus.Configuration.IndexType.AlphaNumeric">
            <summary>Letters and numbers only</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexType.Boolean">
            <summary>True/False Yes/No values</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexType.Currency">
            <summary>Decimal values</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexType.Date">
            <summary>Date only</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexType.DateTime">
            <summary>Date + Time</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexType.List">
            <summary>Static list</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexType.Numeric">
            <summary>Integer value</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexType.RegularExpression">
            <summary>Text value validated by regular expression</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexType.Text">
            <summary>Any characters</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexType.Time">
            <summary>Time only</summary>
        </member>
        <member name="T:Oculus.Configuration.IndexBehaviour">
            <summary>
            The behavior for an index at indexing
            </summary>
        </member>
        <member name="F:Oculus.Configuration.IndexBehaviour.Normal">
            <summary>No special behaviour</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexBehaviour.WriteOnce">
            <summary>If it has a value, is read only</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexBehaviour.ReadOnly">
            <summary>Always read only</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexBehaviour.Hidden">
            <summary>Does not appear at indexing OR searching</summary>
        </member>
        <member name="T:Oculus.Configuration.IndexAttribute">
            <summary>
            Attributes which can be applied to an index
            </summary>
        </member>
        <member name="F:Oculus.Configuration.IndexAttribute.None">
            <summary>No attributes</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexAttribute.Searchable">
            <summary>Searchable</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexAttribute.Mandatory">
            <summary>Required field</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexAttribute.Barcode">
            <summary>Barcode field</summary>
        </member>
        <member name="F:Oculus.Configuration.IndexAttribute.Dynamic">
            <summary>Indicates the index should raise change events to the plug-in</summary>
        </member>
        <member name="T:Oculus.Configuration.RegisteredApplicationType">
            <summary>
            Contains the options for an application's type in configuration
            </summary>
        </member>
        <member name="F:Oculus.Configuration.RegisteredApplicationType.PlugIn">
            <summary>A standard IDMSPlugin plugin</summary>
        </member>
        <member name="F:Oculus.Configuration.RegisteredApplicationType.Viewer">
            <summary>Any arbitrary oculus application</summary>
        </member>
        <member name="F:Oculus.Configuration.RegisteredApplicationType.NativeOculet">
            <summary>Native .NET oculet</summary>
        </member>
        <member name="F:Oculus.Configuration.RegisteredApplicationType.Console">
            <summary>Applications which are automatically loaded into the Oculus Console</summary>
        </member>
        <member name="F:Oculus.Configuration.RegisteredApplicationType.Other">
            <summary>Everything else</summary>
        </member>
        <member name="T:Oculus.Configuration.MachineType">
            <summary>
            Values within config representing different machine types
            </summary>
        </member>
        <member name="F:Oculus.Configuration.MachineType.Server">
            <summary>Represents a server</summary>
        </member>
        <member name="F:Oculus.Configuration.MachineType.Workstation">
            <summary>Represents a workstation. Deprecated.</summary>
        </member>
        <member name="F:Oculus.Configuration.MachineType.PullMachine">
            <summary>Represents a .NET pull machine</summary>
        </member>
        <member name="T:Oculus.Configuration.TransitionConditionType">
            <summary>
            Used in process definitions, the type for a transition condition
            </summary>
        </member>
        <member name="F:Oculus.Configuration.TransitionConditionType.And">
            <summary>Ands all conditions together</summary>
        </member>
        <member name="F:Oculus.Configuration.TransitionConditionType.Or">
            <summary>Ors all conditions together</summary>
        </member>
        <member name="T:Oculus.Configuration.TransitionComparisonType">
            <summary>
            Used in process definitions, the comparison type for a transition comparison,
            names inherited from v8 process definitions.
            </summary>
        </member>
        <member name="F:Oculus.Configuration.TransitionComparisonType.EqualTo">
            <summary>equal</summary>
        </member>
        <member name="F:Oculus.Configuration.TransitionComparisonType.NotEqualTo">
            <summary>not equal</summary>
        </member>
        <member name="F:Oculus.Configuration.TransitionComparisonType.LessThan">
            <summary>less than</summary>
        </member>
        <member name="F:Oculus.Configuration.TransitionComparisonType.GreaterThan">
            <summary>greater than</summary>
        </member>
        <member name="F:Oculus.Configuration.TransitionComparisonType.LessThanOrEqualTo">
            <summary>less than or equal to</summary>
        </member>
        <member name="F:Oculus.Configuration.TransitionComparisonType.GreaterThanOrEqualTo">
            <summary>greater than or equal to</summary>
        </member>
        <member name="T:Oculus.Configuration.RuntimeRestrictionType">
            <summary>
            Used in runtime licensing, these are the "For" attributes for runtime restrictions.
            Please note these should *only* be serialized as the string values.
            </summary>
        </member>
        <member name="F:Oculus.Configuration.RuntimeRestrictionType.BranchServers">
            <summary>
            The number of branch servers allowed by the license
            </summary>
        </member>
        <member name="F:Oculus.Configuration.RuntimeRestrictionType.ConcurrentUsers">
            <summary>
            The number of concurrent users allowed by the license
            </summary>
        </member>
        <member name="F:Oculus.Configuration.RuntimeRestrictionType.TotalMachines">
            <summary>
            The total number of machines allowed by the license
            </summary>
        </member>
        <member name="T:Oculus.Configuration.SystemConfig">
            <summary>
            Contains methods for retrieving Oculus system configuration.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.SystemConfig.GetConfiguration">
            <summary>
            Retrieves the current system configuration as a single XML document
            </summary>
            <returns>The configuration</returns>
        </member>
        <member name="T:Oculus.Configuration.Administration.Unique">
            <summary>
            This is a helper class to test for the Unique ness of item names
            </summary>
        </member>
        <member name="M:Oculus.Configuration.Administration.Unique.ApplicationName(Oculus.Configuration.Components.Configuration,Oculus.Configuration.Components.Application,System.String)">
            <summary>
            this should test the existing configuration to see if an application with the same name already exists
            </summary>
            <param name="config">the existing configuration</param>
            <param name="instance">the app instance we're dealing with</param>
            <param name="newName">the new application name</param>
            <returns>true if the application does not exist</returns>
        </member>
        <member name="M:Oculus.Configuration.Administration.Unique.Branches(Oculus.Configuration.Components.Configuration,Oculus.Configuration.Components.Branch,System.String)">
            <summary>
            this should test the existing configuration to see if an Branches with the same name already exists
            </summary>
            <param name="config">the existing configuration</param>
            <param name="instance">this instance</param>
            <param name="newName">the new Branches name</param>
            <returns>true if the Branches does not exist</returns>
        </member>
        <member name="M:Oculus.Configuration.Administration.Unique.Machine(Oculus.Configuration.Components.Configuration,Oculus.Configuration.Components.Machine,System.String)">
            <summary>
            this should test the existing configuration to see if an Machine with the same name already exists accross all branches
            </summary>
            <param name="config">the existing configuration</param>
            <param name="machine">this instance</param>
            <param name="newName">the new Machine name</param>
            <returns>true if the Machine does not exist</returns>
        </member>
        <member name="M:Oculus.Configuration.Administration.Unique.Plugin(Oculus.Configuration.Components.Machine,Oculus.Configuration.Components.PlugIn,System.String)">
            <summary>
            Checks uniqueness for a plugin
            </summary>
            <param name="machine">The machine we're looking at</param>
            <param name="plugIn">The plugin instance</param>
            <param name="newName">The new name</param>
            <returns>True if the name is unique, false otherwise</returns>
        </member>
        <member name="M:Oculus.Configuration.Administration.Unique.Process(Oculus.Configuration.Components.Configuration,Oculus.Configuration.Components.Process,System.String)">
            <summary>
            Checks uniqueness for a plugin
            </summary>
            <param name="config">The configuration</param>
            <param name="instance">The process instance</param>
            <param name="newName">The new name</param>
            <returns>True if the name is unique, false otherwise</returns>
        </member>
        <member name="M:Oculus.Configuration.Administration.Unique.Index(Oculus.Configuration.Components.ProfileVersion,Oculus.Configuration.Components.Index,System.String)">
            <summary>
            Checks uniqueness for an index
            </summary>
            <param name="profileVersion">The profile version we're working with</param>
            <param name="instance">The index instance</param>
            <param name="newName">The new name</param>
            <returns>True if the name is unique, false otherwise</returns>
        </member>
        <member name="M:Oculus.Configuration.Administration.Unique.Profile(Oculus.Configuration.Components.Configuration,Oculus.Configuration.Components.Profile,System.String)">
            <summary>
            Checks uniqueness for a profile
            </summary>
            <param name="config">The config we're working with</param>
            <param name="instance">The profile instance</param>
            <param name="newName">The new name</param>
            <returns>True if the name is unique, false otherwise</returns>
        </member>
        <member name="M:Oculus.Configuration.Administration.Unique.Queue(Oculus.Configuration.Components.Branch,Oculus.Configuration.Components.Queue,System.String)">
            <summary>
            Checks uniqueness for a queue
            </summary>
            <param name="branch">The branch we're working with</param>
            <param name="queue">The queue instance</param>
            <param name="newName">The new name</param>
            <returns>True if the name is unique, false otherwise</returns>
        </member>
        <member name="M:Oculus.Configuration.Administration.Unique.ApplicationId(Oculus.Configuration.Components.Configuration,Oculus.Configuration.Components.Application,System.Guid)">
            <summary>
            Checks uniqueness for application id
            </summary>
            <param name="config">The configuration</param>
            <param name="instance">The application instance</param>
            <param name="newId">The new id</param>
            <returns>True if uniqe, false otherwise</returns>
        </member>
        <member name="M:Oculus.Configuration.Administration.Unique.SystemName(Oculus.Configuration.Components.Configuration,Oculus.Configuration.Components.SystemName,System.String)">
            <summary>
            make sure the system name is Unique
            </summary>
            <param name="config">the current config</param>
            <param name="instance">the current instance being edited</param>
            <param name="newName">the new system name</param>
            <returns></returns>
        </member>
        <member name="T:Oculus.Configuration.LicenseUtility">
            <summary>
            Utility class for licensing
            </summary>
        </member>
        <member name="M:Oculus.Configuration.LicenseUtility.GetLicense">
            <summary>
            Retrieves the current license from configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Configuration.LicenseUtility.GenerateLicenseKey(Oculus.Configuration.Components.License)">
            <summary>
            Generates a license key for the specified license.
            </summary>
            <param name="license">The license</param>
            <returns>The key to use for verifiying the license</returns>
        </member>
        <member name="M:Oculus.Configuration.LicenseUtility.GetLicenseViolations">
            <summary>
            Retrieves a set of license violations for the current configuration. If there are none,
            an empty list is returned
            </summary>
            <returns>The list of license violations</returns>
        </member>
        <member name="M:Oculus.Configuration.LicenseUtility.GetLicenseViolations(Oculus.Configuration.Components.Configuration)">
            <summary>
            Retrieves a set of license violations for the specified configuration. If there are none,
            an empty list is returned
            </summary>
            <param name="configuration">The configuration to check, cannot be null</param>
            <returns>The list of license violations</returns>
        </member>
        <member name="T:Oculus.Configuration.ImportUtility">
            <summary>
            Contains utility methods for working with import of previous oculus configuration.
            </summary>
        </member>
        <member name="M:Oculus.Configuration.ImportUtility.ImportConfiguration(System.Xml.XmlDocument)">
            <summary>
            Runs import logic on an oculus 8 configuration
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="T:Oculus.Constants">
            <summary>
            Constants for imaging
            </summary>
        </member>
        <member name="F:Oculus.Constants.ConfigurationNamespace">
            <summary>
            The namespace used for configuration
            </summary>
        </member>
        <member name="F:Oculus.Constants.ConfigurationNamespacePrefix">
            <summary>
            The default prefix to use for the configuration namespace
            </summary>
        </member>
        <member name="F:Oculus.Constants.DocumentNamespace">
            <summary>
            The namespace used for document xml's
            </summary>
        </member>
        <member name="F:Oculus.Constants.DocumentNamespacePrefix">
            <summary>
            The default prefix to use for the document namespace
            </summary>
        </member>
        <member name="F:Oculus.Constants.OculusPublicKeyToken">
            <summary>
            the Oculus public key (short form)
            </summary>
        </member>
        <member name="F:Oculus.Constants.MimeTypePdf">
            <summary>
            The mime type for a pdf
            </summary>
        </member>
        <member name="F:Oculus.Constants.MimeTypeTiff">
            <summary>
            The mime type for a tiff
            </summary>
        </member>
        <member name="T:Oculus.Data.Connections.BaseConnection">
            <summary>
            Base implementation for the IOcuConnection object
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.#ctor">
            <summary>
            Create an empty object, only used in cloning
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Create a base connection object.
            </summary>
            <param name="connection">The connection to use</param>
        </member>
        <member name="F:Oculus.Data.Connections.BaseConnection.m_connection">
            <summary>
            The underlying connection object
            </summary>
        </member>
        <member name="F:Oculus.Data.Connections.BaseConnection.m_transaction">
            <summary>
            The underlying transaction object
            </summary>
        </member>
        <member name="F:Oculus.Data.Connections.BaseConnection.m_isOpen">
            <summary>
            Indicator of whether or not the connection has been opened
            </summary>
        </member>
        <member name="F:Oculus.Data.Connections.BaseConnection.m_filesToDeleteOnCommit">
            <summary>
            The set of files to delete when committing
            </summary>
        </member>
        <member name="F:Oculus.Data.Connections.BaseConnection.m_filesToDeleteOnRollback">
            <summary>
            The set of files to delete if we have a rollback
            </summary>
        </member>
        <member name="F:Oculus.Data.Connections.BaseConnection.DefaultVarcharLength">
            <summary>
            The default length for a varchar column
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.GetDataTypeStr(System.Data.DbType,System.Int32)">
            <summary>
            Required method to get the string used in sql statement for the string
            </summary>
            <param name="type">The type</param>
            <param name="length">The length</param>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.GetConnectionClone">
            <summary>
            Required method to retrieve a clone of the internal connection object.
            </summary>
            <returns>The clone of our internal connection</returns>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.GetAddColumnSQL(System.String)">
            <summary>
            Used within ModifyTable to add columns to the table. Return {0} in string for column name {1} for datatype
            </summary>
            <param name="tablename">The table name</param>
            <returns>The sql string</returns>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.GetAlterColumnSQL(System.String)">
            <summary>
            Used within ModifyTable to add columns to the table. Return {0} in string for column name {1} for datatype
            </summary>
            <param name="tablename">The table name</param>
            <returns>The sql string</returns>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.CloneConnection">
            <summary>
            Creates and returns a clone of our internal database connection, wrapped in a NEW instance
            of our ocu connection.
            </summary>
            <returns>The cloned connection object</returns>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.SetParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Sets a parameter value on the command, use null for no parameter name.  Will add the parameter if it's
            not there, or set it if it is. Unnamed parameters are NOT supported.
            </summary>
            <param name="command">The command we're adding to, cannot be null</param>
            <param name="paramName">The name of the parameter, cannot be null</param>
            <param name="paramType">The type of parameter to set</param>
            <param name="paramValue">The value we're setting</param>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.GetFactory">
            <summary>
            Creates a provider factory which can be used in turn to create a variety of objects
            </summary>
            <returns>The factory</returns>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.ReadValue(System.Object,System.Type)">
            <summary>
            Reads the value as the specified type (when the templated method is insufficient)
            </summary>
            <param name="dbValue">The value from the database</param>
            <param name="t">The type of the result</param>
            <returns>The result coerced to the type</returns>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.ReadValue``1(System.Object)">
            <summary>
            Reads the specified value out from a result set or scalar execution. Default
            behavior reads out for non-boolean, non-guid supporting databases
            </summary>
            <typeparam name="T">The type to retrieve the value as</typeparam>
            <param name="dbValue">The value we currently have</param>
            <returns>
            The value that represents the parameter value coerced to the specified type.
            </returns>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.CreateCommand(System.String)">
            <summary>
            Creates a command against the active connection object and transaction,
            if a transaction is currently in process.
            </summary>
            <param name="commandText">The text for the command</param>
            <returns>
            An initialized command object, with text, connection, and transaction
            attached.
            </returns>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.Open">
            <summary>
            Opens the underlying database connection
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.Close">
            <summary>
            Closes the underlying database connection
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.BeginTransaction">
            <summary>
            Begins a conditional transaction - do not open a new one if it already exists
            </summary>
            <returns>True if the caller is the owner of the transaction, false if not</returns>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.Commit(System.Boolean)">
            <summary>
            Indicates a commit should be executed, but only if the caller is the owner (result from BeginTransaction)
            </summary>
            <param name="isOwner">flag indicating whether or not the caller is the transaction owner</param>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.Rollback(System.Boolean)">
            <summary>
            Indicates a rollback should be executed, but only if the caller is the owner (result from BeginTransaction)
            </summary>
            <param name="isOwner">flag indicating whether or not the caller is the transaction owner</param>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.DeleteFileOnCommit(System.String)">
            <summary>
            Indicates the specified file should be deleted upon commit
            </summary>
            <param name="filePath">The path to the file to delete</param>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.DeleteFileOnRollback(System.String)">
            <summary>
            Indicates the specified file should be deleted upon rollback
            </summary>
            <param name="filePath">The path to the file to delete</param>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.CreateTable(Oculus.Data.Schema.Table)">
            <summary>
            Creates the specified table in the database
            </summary>
            <param name="table">The table to create, cannot be null and must have a primary key</param>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.ModifyTable(Oculus.Data.Schema.Table,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Data.Schema.Collections.ColumnDictionary)">
            <summary>
            Modifies the specified table by adding new columns and modifying column length
            </summary>
            <param name="table">The table we're changing, cannot be null</param>
            <param name="columnsToAdd">a name-indexed hash of Schema.Column objects of columns to add to the table, cannot be null</param>
            <param name="columnsToModify">a name-indexed hash of Schema.Column objects of columns to modify in the table, cannot be null</param>
        </member>
        <member name="M:Oculus.Data.Connections.BaseConnection.Dispose">
            <summary>
            Releases resources associated with the object. Will automatically
            perform a rollback if a transaction is currently open.
            </summary>
        </member>
        <member name="T:Oculus.Data.Connections.FbConnection">
            <summary>
            Summary description for FbConnection.
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.FbConnection.#ctor">
            <summary>
            Create an empty object, only used in cloning
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.FbConnection.#ctor(System.String)">
            <summary>
            Create and initialise an fb connection.
            </summary>
            <param name="connectionString">The connection string for our connection</param>
        </member>
        <member name="M:Oculus.Data.Connections.FbConnection.GetConnectionClone">
            <summary>
            Required method to retrieve a clone of the internal connection object.
            </summary>
            <returns>The clone of our internal connection</returns>
        </member>
        <member name="M:Oculus.Data.Connections.FbConnection.GetFactory">
            <summary>
            Creates a provider factory which can be used in turn to create a variety of objects
            </summary>
            <returns>The factory</returns>
        </member>
        <member name="M:Oculus.Data.Connections.FbConnection.GetDataTypeStr(System.Data.DbType,System.Int32)">
            <summary>
            Creates the sql text for the datatype of the specified length
            </summary>
            <param name="type">The db type</param>
            <param name="length">The length</param>
            <returns>a string to use for the text</returns>
        </member>
        <member name="M:Oculus.Data.Connections.FbConnection.SetParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Sets a parameter value on the command, use null for no parameter name.  Will add the parameter if it's
            not there, or set it if it is. Unnamed parameters are NOT supported.
            </summary>
            <param name="command">The command we're adding to, cannot be null</param>
            <param name="paramType">The type of parameter to set</param>
            <param name="paramValue">The value we're setting</param>
            <param name="paramName">The name of the parameter, cannot be null</param>
        </member>
        <member name="M:Oculus.Data.Connections.FbConnection.GetAlterColumnSQL(System.String)">
            <summary>
            Used within ModifyTable to add columns to the table. Return {0} in string for column name {1} for datatype
            </summary>
            <param name="tablename">The table name</param>
            <returns>The sql string</returns>
        </member>
        <member name="T:Oculus.Data.Connections.Interfaces.IOcuConnection">
            <summary>
            Represents a database connection within imaging. An ocu connection instance
            can only be connected to a single "real" connection at a time, and mirrors
            the functionality found within standard IDbConnection objects.
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.SetParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Sets a parameter value on the command, use null for no parameter name.  Will add the parameter if it's
            not there, or set it if it is. Unnamed parameters are NOT supported.
            </summary>
            <param name="command">The command we're adding to, cannot be null</param>
            <param name="paramName">The name of the parameter, cannot be null</param>
            <param name="paramType">The type of parameter to set</param>
            <param name="paramValue">The value we're setting</param>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.CloneConnection">
            <summary>
            Creates and returns a clone of our internal database connection, wrapped in a NEW instance
            of our ocu connection.
            </summary>
            <returns>The cloned connection object</returns>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.ReadValue``1(System.Object)">
            <summary>
            Reads the specified value out from a result set or scalar execution.
            
            BEWARE! This method will return default of T if the value is null or DBNull.
            </summary>
            <typeparam name="T">The type to retrieve the value as</typeparam>
            <param name="dbValue">The value we currently have</param>
            <returns>
            The value that represents the parameter value coerced to the specified type.
            </returns>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.ReadValue(System.Object,System.Type)">
            <summary>
            Reads the value as the specified type (when the templated method is insufficient)
            </summary>
            <param name="dbValue">The value from the database</param>
            <param name="t">The type of the result</param>
            <returns>The result coerced to the type</returns>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.CreateCommand(System.String)">
            <summary>
            Creates a command against the active connection object and transaction,
            if a transaction is currently in process.
            </summary>
            <param name="commandText">The text for the command</param>
            <returns>
            An initialized command object, with text, connection, and transaction
            attached.
            </returns>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.GetFactory">
            <summary>
            Creates a provider factory which can be used in turn to create a variety of objects
            </summary>
            <returns>The factory</returns>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.Open">
            <summary>
            Opens the underlying database connection
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.Close">
            <summary>
            Closes the underlying database connection
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.BeginTransaction">
            <summary>
            Begins a conditional transaction - do not open a new one if it already exists
            </summary>
            <returns>True if the caller is the owner of the transaction, false if not</returns>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.Commit(System.Boolean)">
            <summary>
            Indicates a commit should be executed, but only if the caller is the owner (result from BeginTransaction)
            </summary>
            <param name="isOwner">flag indicating whether or not the caller is the transaction owner</param>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.Rollback(System.Boolean)">
            <summary>
            Indicates a rollback should be executed, but only if the caller is the owner (result from BeginTransaction)
            </summary>
            <param name="isOwner">flag indicating whether or not the caller is the transaction owner</param>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.DeleteFileOnCommit(System.String)">
            <summary>
            Indicates the specified file should be deleted upon commit
            </summary>
            <param name="filePath">The path to the file to delete</param>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.DeleteFileOnRollback(System.String)">
            <summary>
            Indicates the specified file should be deleted upon rollback
            </summary>
            <param name="filePath">The path to the file to delete</param>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.CreateTable(Oculus.Data.Schema.Table)">
            <summary>
            Creates the specified table in the database
            </summary>
            <param name="table">The table to create</param>
        </member>
        <member name="M:Oculus.Data.Connections.Interfaces.IOcuConnection.ModifyTable(Oculus.Data.Schema.Table,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Data.Schema.Collections.ColumnDictionary)">
            <summary>
            Modifies the specified table by adding new columns and modifying column length. Does not
            support removing columns.
            </summary>
            <param name="table">The table we're changing</param>
            <param name="columnsToAdd">a dictionary of Schema.Column objects of columns to add to the table</param>
            <param name="columnsToModify">a dictionary of Schema.Column objects of columns to modify in the table</param>
        </member>
        <member name="T:Oculus.Data.Connections.OracleConnection">
            <summary>
            Oracle connection implementation.
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.OracleConnection.#ctor">
            <summary>
            Create an empty object, only used in cloning
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.OracleConnection.#ctor(System.String)">
            <summary>
            Create and initialise an fb connection.
            </summary>
            <param name="connectionString">The connection string for our connection</param>
        </member>
        <member name="M:Oculus.Data.Connections.OracleConnection.GetConnectionClone">
            <summary>
            Required method to retrieve a clone of the internal connection object.
            </summary>
            <returns>The clone of our internal connection</returns>
        </member>
        <member name="M:Oculus.Data.Connections.OracleConnection.GetDataTypeStr(System.Data.DbType,System.Int32)">
            <summary>
            Creates the sql text for the datatype of the specified length
            </summary>
            <param name="type">The db type</param>
            <param name="length">The length</param>
            <returns>a string to use for the text</returns>
        </member>
        <member name="M:Oculus.Data.Connections.OracleConnection.SetParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Sets a parameter value on the command, use null for no parameter name.  Will add the parameter if it's
            not there, or set it if it is. Unnamed parameters are NOT supported.
            </summary>
            <param name="command">The command we're adding to, cannot be null</param>
            <param name="paramType">The type of parameter to set</param>
            <param name="paramValue">The value we're setting</param>
            <param name="paramName">The name of the parameter, cannot be null</param>
        </member>
        <member name="M:Oculus.Data.Connections.OracleConnection.GetAlterColumnSQL(System.String)">
            <summary>
            Used within ModifyTable to add columns to the table. Return {0} in string for column name {1} for datatype
            </summary>
            <param name="tablename">The table name</param>
            <returns>The sql string</returns>
        </member>
        <member name="M:Oculus.Data.Connections.OracleConnection.GetFactory">
            <summary>
            Creates a provider factory which can be used in turn to create a variety of objects
            </summary>
            <returns>The factory</returns>
        </member>
        <member name="T:Oculus.Data.Connections.SqlConnection">
            <summary>
            Summary description for FbConnection.
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.SqlConnection.#ctor">
            <summary>
            Create an empty object, only used in cloning
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.SqlConnection.#ctor(System.String)">
            <summary>
            Create and initialise an fb connection.
            </summary>
            <param name="connectionString">The connection string for our connection</param>
        </member>
        <member name="M:Oculus.Data.Connections.SqlConnection.GetConnectionClone">
            <summary>
            Required method to retrieve a clone of the internal connection object.
            </summary>
            <returns>The clone of our internal connection</returns>
        </member>
        <member name="M:Oculus.Data.Connections.SqlConnection.GetDataTypeStr(System.Data.DbType,System.Int32)">
            <summary>
            Creates the sql text for the datatype of the specified length
            </summary>
            <param name="type">The db type</param>
            <param name="length">The length</param>
            <returns>a string to use for the text</returns>
        </member>
        <member name="M:Oculus.Data.Connections.SqlConnection.SetParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Sets a parameter value on the command, use null for no parameter name.  Will add the parameter if it's
            not there, or set it if it is. Unnamed parameters are NOT supported.
            </summary>
            <param name="command">The command we're adding to, cannot be null</param>
            <param name="paramType">The type of parameter to set</param>
            <param name="paramValue">The value we're setting</param>
            <param name="paramName">The name of the parameter, cannot be null</param>
        </member>
        <member name="M:Oculus.Data.Connections.SqlConnection.ReadValue``1(System.Object)">
            <summary>
            Reads the specified value out from a result set or scalar execution.
            </summary>
            <typeparam name="T">The type to retrieve the value as</typeparam>
            <param name="dbValue">The value we currently have</param>
            <returns>
            The value that represents the parameter value coerced to the specified type.
            </returns>
        </member>
        <member name="M:Oculus.Data.Connections.SqlConnection.ReadValue(System.Object,System.Type)">
            <summary>
            Reads the value as the specified type (when the templated method is insufficient)
            </summary>
            <param name="dbValue">The value from the database</param>
            <param name="t">The type of the result</param>
            <returns>The result coerced to the type</returns>
        </member>
        <member name="M:Oculus.Data.Connections.SqlConnection.GetFactory">
            <summary>
            Creates a provider factory which can be used in turn to create a variety of objects
            </summary>
            <returns>The factory</returns>
        </member>
        <member name="T:Oculus.Data.Connections.OleDbConnection">
            <summary>
            OleDB implementation of the connection interface.  We *could* modify the interface to allow
            for named parameters in Ole queries where we manually replace the values with ?'s and set
            the indexes accordingly, but that's a lot of work for not *that* much benefit.
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.OleDbConnection.#ctor">
            <summary>
            Create an empty object, only used in cloning
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.OleDbConnection.#ctor(System.String)">
            <summary>
            Create and initialise an fb connection.
            </summary>
            <param name="connectionString">The connection string for our connection</param>
        </member>
        <member name="M:Oculus.Data.Connections.OleDbConnection.GetDataTypeStr(System.Data.DbType,System.Int32)">
            <summary>
            Unsupported, for table creation and update
            </summary>
            <param name="type">Unsupported</param>
            <param name="length">Unsupported</param>
            <returns>Unsupported</returns>
        </member>
        <member name="M:Oculus.Data.Connections.OleDbConnection.GetConnectionClone">
            <summary>
            Required method to retrieve a clone of the internal connection object.
            </summary>
            <returns>The clone of our internal connection</returns>
        </member>
        <member name="M:Oculus.Data.Connections.OleDbConnection.CreateTable(Oculus.Data.Schema.Table)">
            <summary>
            Not supported
            </summary>
            <param name="table">Not supported</param>
        </member>
        <member name="M:Oculus.Data.Connections.OleDbConnection.ModifyTable(Oculus.Data.Schema.Table,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Data.Schema.Collections.ColumnDictionary)">
            <summary>
            Not supported
            </summary>
            <param name="table">Not supported</param>
            <param name="columnsToAdd">Not supported</param>
            <param name="columnsToModify">Not supported</param>
        </member>
        <member name="M:Oculus.Data.Connections.OleDbConnection.GetFactory">
            <summary>
            Creates a provider factory which can be used in turn to create a variety of objects
            </summary>
            <returns>The factory</returns>
        </member>
        <member name="M:Oculus.Data.Connections.OleDbConnection.SetParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Sets a parameter value on the command, use null for no parameter name.  Will add the parameter if it's
            not there, or set it if it is. Unnamed parameters are the ONLY type supported.
            </summary>
            <param name="command">The command we're adding to, cannot be null</param>
            <param name="paramType">The type of parameter to set</param>
            <param name="paramValue">The value we're setting</param>
            <param name="paramName">The name of the parameter, MUST BE NULL</param>
        </member>
        <member name="T:Oculus.Data.Connections.Providers">
            <summary>
            Contains a list of the supported provider types
            </summary>
        </member>
        <member name="F:Oculus.Data.Connections.Providers.Firebird">
            <summary>
            Provider for firebird
            </summary>
        </member>
        <member name="F:Oculus.Data.Connections.Providers.Sql">
            <summary>
            Provider for sql
            </summary>
        </member>
        <member name="F:Oculus.Data.Connections.Providers.Oracle">
            <summary>
            Provider for oracle
            </summary>
        </member>
        <member name="F:Oculus.Data.Connections.Providers.SqlCE">
            <summary>
            Provider for sqlce
            </summary>
        </member>
        <member name="T:Oculus.Data.Connections.SqlCEConnection">
            <summary>
            Summary description for SQLCEConnection.
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.SqlCEConnection.#ctor">
            <summary>
            Create an empty object, only used in cloning
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.SqlCEConnection.#ctor(System.String)">
            <summary>
            Create and initialise an sqlce connection.
            </summary>
            <param name="connectionString">The connection string for our connection</param>
        </member>
        <member name="M:Oculus.Data.Connections.SqlCEConnection.GetConnectionClone">
            <summary>
            Required method to retrieve a clone of the internal connection object.
            </summary>
            <returns>The clone of our internal connection</returns>
        </member>
        <member name="M:Oculus.Data.Connections.SqlCEConnection.GetDataTypeStr(System.Data.DbType,System.Int32)">
            <summary>
            Creates the sql text for the datatype of the specified length
            </summary>
            <param name="type">The db type</param>
            <param name="length">The length</param>
            <returns>a string to use for the text</returns>
        </member>
        <member name="M:Oculus.Data.Connections.SqlCEConnection.SetParameter(System.Data.Common.DbCommand,System.String,System.Data.DbType,System.Object)">
            <summary>
            Sets a parameter value on the command, use null for no parameter name.  Will add the parameter if it's
            not there, or set it if it is. Unnamed parameters are NOT supported.
            </summary>
            <param name="command">The command we're adding to, cannot be null</param>
            <param name="paramType">The type of parameter to set</param>
            <param name="paramValue">The value we're setting</param>
            <param name="paramName">The name of the parameter, cannot be null</param>
        </member>
        <member name="M:Oculus.Data.Connections.SqlCEConnection.ReadValue``1(System.Object)">
            <summary>
            Reads the specified value out from a result set or scalar execution.
            </summary>
            <typeparam name="T">The type to retrieve the value as</typeparam>
            <param name="dbValue">The value we currently have</param>
            <returns>
            The value that represents the parameter value coerced to the specified type.
            </returns>
        </member>
        <member name="M:Oculus.Data.Connections.SqlCEConnection.ReadValue(System.Object,System.Type)">
            <summary>
            Reads the value as the specified type (when the templated method is insufficient)
            </summary>
            <param name="dbValue">The value from the database</param>
            <param name="t">The type of the result</param>
            <returns>The result coerced to the type</returns>
        </member>
        <member name="M:Oculus.Data.Connections.SqlCEConnection.GetFactory">
            <summary>
            Creates a provider factory which can be used in turn to create a variety of objects
            </summary>
            <returns>The factory</returns>
        </member>
        <member name="T:Oculus.Data.Connections.Utility">
            <summary>
            Contains utility methods for working with connections
            </summary>
        </member>
        <member name="M:Oculus.Data.Connections.Utility.CreateConnection(System.String,System.String)">
            <summary>
            Creates and returns the connection corresponding to the provider/connection string
            </summary>
            <param name="provider">The provider, cannot be null</param>
            <param name="connectionString">The connection string, cannot be null</param>
            <returns>Creates a connection for the specified provider and connection string</returns>
        </member>
        <member name="T:Oculus.Data.BaseDataManager">
            <summary>
            Base class for any class wishing to work with IOcuConnections and participate in
            cross-object transactions.
            </summary>
        </member>
        <member name="M:Oculus.Data.BaseDataManager.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,System.Boolean)">
            <summary>
            Create an instance of the object against the specified connection, allowing
            you to pass in an unopened connection
            </summary>
            <param name="connection">The connection to use</param>
            <param name="isConnectionOwner">Flag to indicate whether or not the object should be opening/closing the connection</param>
        </member>
        <member name="P:Oculus.Data.BaseDataManager.Connection">
            <summary>
            Get the connection associated with this object
            </summary>
        </member>
        <member name="M:Oculus.Data.BaseDataManager.Close">
            <summary>
            Closes the connection, will only happen if this is the connection owner. NB connections are
            opened automatically.
            </summary>
        </member>
        <member name="M:Oculus.Data.BaseDataManager.Dispose">
            <summary>
            Releases connection resources
            </summary>
        </member>
        <member name="T:Oculus.Data.Schema.Collections.ColumnList">
            <summary>
            Collection class for columns
            </summary>
        </member>
        <member name="T:Oculus.Data.Schema.Collections.ColumnDictionary">
            <summary>
            Collection class for columns, values by column name
            </summary>
        </member>
        <member name="M:Oculus.Data.Schema.Collections.ColumnDictionary.Clone">
            <summary>
            Generates a shallow clone of the dictionary
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Data.Schema.Column">
            <summary>
            Schema object representing a column.
            </summary>
        </member>
        <member name="M:Oculus.Data.Schema.Column.#ctor">
            <summary>
            Create an empty instance
            </summary>
        </member>
        <member name="M:Oculus.Data.Schema.Column.#ctor(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Create an instance with the specified values
            </summary>
            <param name="name">The column name</param>
            <param name="dbType">The column database type</param>
            <param name="length">The column length, if applcable</param>
        </member>
        <member name="P:Oculus.Data.Schema.Column.Name">
            <summary>
            Get/set the column name
            </summary>
        </member>
        <member name="P:Oculus.Data.Schema.Column.DbType">
            <summary>
            Get/set the database type
            </summary>
        </member>
        <member name="P:Oculus.Data.Schema.Column.Length">
            <summary>
            Get/set the column length
            </summary>
        </member>
        <member name="P:Oculus.Data.Schema.Column.IsIndex">
            <summary>
            Get/set whether or not this is an index. ONLY applicable
            on creation
            </summary>
        </member>
        <member name="T:Oculus.Data.Schema.Table">
            <summary>
            Schema object representing a Table.
            </summary>
        </member>
        <member name="P:Oculus.Data.Schema.Table.PrimaryKey">
            <summary>
            Get/set the primary key
            </summary>
        </member>
        <member name="P:Oculus.Data.Schema.Table.TableName">
            <summary>
            Get/set the table name
            </summary>
        </member>
        <member name="P:Oculus.Data.Schema.Table.Columns">
            <summary>
            Gets the list of columns for the table
            </summary>
        </member>
        <member name="T:Oculus.Data.Collections.CommandParameterList">
            <summary>
            Contains a list of NamedItem objects.
            </summary>
        </member>
        <member name="M:Oculus.Data.Collections.CommandParameterList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Data.Collections.CommandParameterList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Data.Command">
            <summary>
            Generalized database command which can be used to execute queries and use
            parameters
            </summary>
        </member>
        <member name="M:Oculus.Data.Command.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Data.Command.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="sql">The sql for the command, cannot be null</param>
        </member>
        <member name="M:Oculus.Data.Command.#ctor(System.String,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="sql">The sql for the command</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="P:Oculus.Data.Command.Connection">
            <summary>
            Get/set the connection associated with this object, cannot be null
            </summary>
        </member>
        <member name="P:Oculus.Data.Command.Sql">
            <summary>
            Get/set the sql query associated with this object
            </summary>
        </member>
        <member name="P:Oculus.Data.Command.Parameters">
            <summary>
            Get the list of parameters for the command
            </summary>
        </member>
        <member name="M:Oculus.Data.Command.ExecuteReader">
            <summary>
            Executes the query and returns a data reader
            </summary>
            <returns>The data reader</returns>
        </member>
        <member name="M:Oculus.Data.Command.ExecuteQuery">
            <summary>
            Executes the query and reads all the results into a dataset. NB the results
            will be in raw form, i.e. not interpreted by the underlying connection
            </summary>
            <returns>The dataset</returns>
        </member>
        <member name="M:Oculus.Data.Command.ExecuteQuery(System.Int32,System.Int32,System.String)">
            <summary>
            Executes the query and reads all the results into a dataset. NB the results
            will be in raw form, i.e. not interpreted by the underlying connection
            </summary>
            <param name="startRecord">The first record to retrieve</param>
            <param name="sourceTable">The table to create in the dataset with the results</param>
            <param name="maxRecords">The max number of records to retrieve</param>
            <returns>The dataset</returns>
        </member>
        <member name="M:Oculus.Data.Command.ExecuteNonQuery">
            <summary>
            Executes a query and returns the number of rows affected
            </summary>
            <returns>The rows affected</returns>
        </member>
        <member name="M:Oculus.Data.Command.ExecuteScalar">
            <summary>
            Executes a query and returns the scalar result, DBNull is converted to null
            </summary>
            <returns>The scalar result (raw)</returns>
        </member>
        <member name="M:Oculus.Data.Command.ExecuteScalar(System.Type)">
            <summary>
            Executes a query and returns the scalar result interpreted as the specified
            type
            </summary>
            <param name="resultType">The type to retrieve</param>
            <returns>The result</returns>
        </member>
        <member name="M:Oculus.Data.Command.ExecuteScalar``1">
            <summary>
            Executes a query and returns the scalar result interpreted as the specified
            type
            </summary>
            <typeparam name="T">The type of object expected</typeparam>
            <returns>The result</returns>
        </member>
        <member name="M:Oculus.Data.Command.PrepareCommand">
            <summary>
            Ensures we're ready for execution, preps the command member
            to be executed
            </summary>
        </member>
        <member name="M:Oculus.Data.Command.ToDbCommand">
            <summary>
            Creates a DbCommand object from this command. The connection property
            must be set prior to calling this method
            </summary>
            <returns>The equivalent DbCommand</returns>
        </member>
        <member name="T:Oculus.Data.CommandParameter">
            <summary>
            Parameter object for a command
            </summary>
        </member>
        <member name="M:Oculus.Data.CommandParameter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Data.CommandParameter.#ctor(System.String,System.Data.DbType,System.Object)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name">The parameter name</param>
            <param name="type">The parameter type</param>
            <param name="value">The parameter value</param>
        </member>
        <member name="P:Oculus.Data.CommandParameter.Name">
            <summary>Get/set the name</summary>
        </member>
        <member name="P:Oculus.Data.CommandParameter.Type">
            <summary>Get/set the type</summary>
        </member>
        <member name="P:Oculus.Data.CommandParameter.Value">
            <summary>Get/set the value</summary>
        </member>
        <member name="T:Oculus.Security.OculusIdentity">
            <summary>
            Represents an identity in the Oculus security system.
            </summary>
        </member>
        <member name="M:Oculus.Security.OculusIdentity.#ctor">
            <summary>
            Creates an instance of the object using the default parameters. Exists for serialization purposes.
            </summary>
        </member>
        <member name="M:Oculus.Security.OculusIdentity.#ctor(System.String,System.Guid,System.String)">
            <summary>
            Creates an authenticated workflow identity.
            </summary>
            <param name="username">The username for the identity</param>
            <param name="userId">The internal user id</param>
            <param name="authenticatorName">The authenticator which verified this user</param>
        </member>
        <member name="M:Oculus.Security.OculusIdentity.#ctor(System.String,System.Guid)">
            <summary>
            Creates an impersonation identity with authenticator "Impersonation" and authenticated = false
            </summary>
            <param name="username">The user to impersonate</param>
            <param name="userId">The user id to impersonate</param>
        </member>
        <member name="F:Oculus.Security.OculusIdentity.m_id">
            <summary>
            Contains the system guid (from Oculus) for the user
            </summary>
        </member>
        <member name="F:Oculus.Security.OculusIdentity.m_username">
            <summary>
            Contains the username for the user (including domain, if from AD)
            </summary>
        </member>
        <member name="F:Oculus.Security.OculusIdentity.m_authenticatorName">
            <summary>
            Contains the name of the authentication provider
            </summary>
        </member>
        <member name="F:Oculus.Security.OculusIdentity.m_authenticated">
            <summary>
            Contains a flag for whether or not this is an impersonation identity (i.e. not authenticated)
            </summary>
        </member>
        <member name="P:Oculus.Security.OculusIdentity.Id">
            <summary>
            Gets the Oculus user id for this identity
            </summary>
        </member>
        <member name="P:Oculus.Security.OculusIdentity.IdentityDetails">
            <summary>
            Returns basic information about the identity as an informative string
            </summary>
        </member>
        <member name="P:Oculus.Security.OculusIdentity.AuthenticationType">
            <summary>
            Returns the name of the component which handled this item's authentication
            </summary>
        </member>
        <member name="P:Oculus.Security.OculusIdentity.IsAuthenticated">
            <summary>
            Always true unless it's an impersonation identity
            </summary>
        </member>
        <member name="P:Oculus.Security.OculusIdentity.Name">
            <summary>
            The username of the user
            </summary>
        </member>
        <member name="M:Oculus.Security.OculusIdentity.Clone">
            <summary>
            Creates a clone of the identity
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Security.OculusPrincipal">
            <summary>
            Represents an authenticated user in Oculus.
            </summary>
        </member>
        <member name="M:Oculus.Security.OculusPrincipal.#ctor">
            <summary>
            Creates an instance of the object using the default parameters. Exists for serialization purposes.
            </summary>
        </member>
        <member name="M:Oculus.Security.OculusPrincipal.#ctor(Oculus.Security.OculusIdentity)">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="F:Oculus.Security.OculusPrincipal.m_identity">
            <summary>
            The identity for the principal
            </summary>
        </member>
        <member name="F:Oculus.Security.OculusPrincipal.m_sessionId">
            <summary>
            The session id for the logon session
            </summary>
        </member>
        <member name="F:Oculus.Security.OculusPrincipal.m_providerTypeId">
            <summary>
            this is the provider types for the authenticated oculus princaple.
            </summary>
        </member>
        <member name="P:Oculus.Security.OculusPrincipal.SessionId">
            <summary>
            Contains the session id linked to this principal
            </summary>
        </member>
        <member name="P:Oculus.Security.OculusPrincipal.OculusIdentity">
            <summary>
            Returns the attached workflow identity
            </summary>
        </member>
        <member name="P:Oculus.Security.OculusPrincipal.ProviderTypeId">
            <summary>
            this is the provider types for the authenticated oculus princaple.
            </summary>
        </member>
        <member name="P:Oculus.Security.OculusPrincipal.CurrentOculusPrincipal">
            <summary>
            Returns the current principal as an oculus principal. Raises an SessionInvalidException if
            no one is logged in.
            </summary>
        </member>
        <member name="P:Oculus.Security.OculusPrincipal.CurrentSessionId">
            <summary>
            Retrieves the id of the current oculus session. If the principal is not 
            an oculus principal, an SessionInvalidException is thrown.
            </summary>
            <returns>The current session id</returns>
            <exception cref="T:Oculus.Security.SessionInvalidException">If the current principal is not an oculus principal</exception>
        </member>
        <member name="M:Oculus.Security.OculusPrincipal.GetUnverifiedPrincipal(System.String,System.Guid,System.Guid,System.String)">
            <summary>
            Creates an unverified principal object which can be used to assign to the current thread.
            Any external operations will still require a correct session/user id.
            </summary>
            <param name="username">The username</param>
            <param name="userId">The user id</param>
            <param name="sessionid">The session id</param>
            <param name="password">The password (can be null)</param>
            <returns>A principal object</returns>
        </member>
        <member name="P:Oculus.Security.OculusPrincipal.Identity">
            <summary>
            Returns the WorkflowIdentity associated with this object.
            </summary>
        </member>
        <member name="M:Oculus.Security.OculusPrincipal.IsInRole(System.String)">
            <summary>
            Roles are not supported, always false.
            </summary>
            <param name="role">Ignored</param>
            <returns>False</returns>
        </member>
        <member name="M:Oculus.Security.OculusPrincipal.Clone">
            <summary>
            Creates a clone of the object
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Security.Administration.AccessManager">
            <summary>
            Class which contains methods for administering rights in the database
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.AccessManager.#ctor">
            <summary>
            Create an instance of the data access object against the default connection
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.AccessManager.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Create an instance of the object against the specified connection and transaction.
            </summary>
            <param name="connection">The connection to use, cannot be null, ASSUMED TO BE OPEN</param>
        </member>
        <member name="F:Oculus.Security.Administration.AccessManager.SqlDeleteAccess">
            <summary>
            Deletes a trio from the SEC_OBJECT_RIGHT table. Params @ActorId, @TargetId, @RightId
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.AccessManager.SqlInsertAccess">
            <summary>
            Selects all rights. Params @ActorId, @TargetId, @RightId, @Granted
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.AccessManager.SqlSelectAccess">
            <summary>
            Selects the entry for a specified trio. Params @ActorId, @TargetId, @RightId
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.AccessManager.SqlDeleteObjectAccess">
            <summary>
            Performs the query against the object rights table
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.AccessManager.SqlInsertObjectAccess">
            <summary>
            Performs the query against the object rights table
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.AccessManager.SqlSelectObjectAccess">
            <summary>
            Performs the query against the object rights table
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.AccessManager.SqlDeleteTypeAccess">
            <summary>
            Performs the query against the type rights table
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.AccessManager.SqlInsertTypeAccess">
            <summary>
            Performs the query against the type rights table
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.AccessManager.SqlSelectTypeAccess">
            <summary>
            Performs the query against the type rights table
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.AccessManager.GetAccess(System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Gets the direct access entry for the requestor+target+right.
            </summary>
            <param name="actorId">The object requesting the permission</param>
            <param name="targetId">The object which is the target of the request</param>
            <param name="rightId">The id for the right requested</param>
            <param name="query">The query to use for execution</param>
            <returns>The access assigned to the direct relationship</returns>
        </member>
        <member name="M:Oculus.Security.Administration.AccessManager.SetAccess(System.Guid,System.Guid,System.Guid,Oculus.Security.Access,System.String,System.String)">
            <summary>
            Sets the direct access entry for the requestor+target+right. First does a delete then does an insert.
            </summary>
            <param name="actorId">The object requesting the permission</param>
            <param name="targetId">The object which is the target of the request</param>
            <param name="rightId">The id for the right requested</param>
            <param name="allowAccess">Indicates the value for the access relationship - set to none to remove the entry</param>
            <param name="deleteQuery">The query to use for the delete operation</param>
            <param name="insertQuery">The query to use for the insert operation</param>
        </member>
        <member name="M:Oculus.Security.Administration.AccessManager.GetAccess(System.Guid,System.Guid,System.Guid)">
            <summary>
            Gets the direct access entry for the requestor+target+right.
            </summary>
            <param name="actorId">The object requesting the permission</param>
            <param name="targetId">The object which is the target of the request</param>
            <param name="rightId">The id for the right requested</param>
            <returns>The access assigned to the direct relationship</returns>
        </member>
        <member name="M:Oculus.Security.Administration.AccessManager.SetAccess(System.Guid,System.Guid,System.Guid,Oculus.Security.Access)">
            <summary>
            Sets the direct access entry for the requestor+target+right.
            </summary>
            <param name="actorId">The object requesting the permission</param>
            <param name="targetId">The object which is the target of the request</param>
            <param name="rightId">The id for the right requested</param>
            <param name="allowAccess">Indicates the value for the access relationship - set to none to remove the entry</param>
        </member>
        <member name="M:Oculus.Security.Administration.AccessManager.GetAccessOnType(System.Guid,System.Guid,System.Guid)">
            <summary>
            Gets the direct access entry for the requestor+target type+right.
            </summary>
            <param name="actorId">The object requesting the permission</param>
            <param name="targetTypeId">The target type of the request</param>
            <param name="rightId">The id for the right requested</param>
            <returns>The access assigned to the direct relationship</returns>
        </member>
        <member name="M:Oculus.Security.Administration.AccessManager.SetAccessOnType(System.Guid,System.Guid,System.Guid,Oculus.Security.Access)">
            <summary>
            Sets the direct access entry for the requestor+target type+right.
            </summary>
            <param name="actorId">The object requesting the permission</param>
            <param name="targetTypeId">The target type of the request</param>
            <param name="rightId">The id for the right requested</param>
            <param name="allowAccess">Indicates the value for the access relationship - set to none to remove the entry</param>
        </member>
        <member name="T:Oculus.Security.Administration.ObjectTypeManager">
            <summary>
            Class which contains methods for administering object types in the database
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.ObjectTypeManager.#ctor">
            <summary>
            Create an instance of the data access object against the default connection
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.ObjectTypeManager.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Create an instance of the object against the specified connection
            </summary>
            <param name="conn">The connection to use</param>
        </member>
        <member name="F:Oculus.Security.Administration.ObjectTypeManager.SqlInsertRightRelationship">
            <summary>
            Inserts a row to the SEC_TYPE_RIGHT table. Params @TypeId, @RightId
             param 1: TYPE_Id -> OCU_GUId
             param 2: RIGHT_Id -> OCU_GUId
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.ObjectTypeManager.SqlInsertType">
            <summary>
            Inserts a row into the SEC_OBJECT_TYPE table. Params @Id, @Name
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.ObjectTypeManager.SqlSelectAllObjectTypes">
            <summary>
            Selects all items in the SEC_OBJECT_TYPE table. Sorted by name
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.ObjectTypeManager.SqlSelectObjectTypeById">
            <summary>
            Selects a single object based on the id. Params @Id
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.ObjectTypeManager.ObjectTypeTable">
            <summary>
            The table we're storing in
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.ObjectTypeManager.AddObjectType(Oculus.Security.DataObjects.ObjectType)">
            <summary>
            Adds an object type entry to the database. Must specify all members.
            </summary>
            <param name="objectType">The object to add, cannot be null</param>
            <exception cref="T:System.ArgumentException">If Name or Id have not been specified on the object</exception>
        </member>
        <member name="M:Oculus.Security.Administration.ObjectTypeManager.AddRightRelationship(System.Guid,System.Guid)">
            <summary>
            Adds a relationship entry between the specified object type and the specified right.
            </summary>
            <param name="objectTypeId">The id of the object type</param>
            <param name="rightId">The id of the right</param>
        </member>
        <member name="M:Oculus.Security.Administration.ObjectTypeManager.GetObjectTypes">
            <summary>
            Returns a list of all type entries in the database sorted by name
            </summary>
            <returns>The list of object types</returns>
        </member>
        <member name="M:Oculus.Security.Administration.ObjectTypeManager.ObjectTypeExists(System.Guid)">
            <summary>
            Checks to see if the specified object type exists in the database
            </summary>
            <returns>The list of object types</returns>
        </member>
        <member name="T:Oculus.Security.Administration.RightManager">
            <summary>
            Class which contains methods for administering rights in the database
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.RightManager.#ctor">
            <summary>
            Create an instance of the data access object against the default connection
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.RightManager.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Create an instance of the object against the specified connection
            </summary>
            <param name="conn">The connection to use</param>
        </member>
        <member name="F:Oculus.Security.Administration.RightManager.SqlSelectRightsForType">
            <summary>
            Selects all rights for a specific type. Param @TypeId
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.RightManager.SqlInsertRight">
            <summary>
            Inserts a row into the rights table. Params @Id, @Name
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.RightManager.SqlSelectAllRights">
            <summary>
            Selects all items in the rights table. Sorted by name
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.RightManager.SqlSelectRightById">
            <summary>
            Selects a single object based on the id. Params @Id
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.RightManager.RightsTable">
            <summary>
            The table we store our rights in
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.RightManager.AddRight(Oculus.Security.DataObjects.Right)">
            <summary>
            Adds the right to the database
            </summary>
            <param name="right">The right to add, cannot be null</param>
        </member>
        <member name="M:Oculus.Security.Administration.RightManager.GetRights">
            <summary>
            Retrieves a list of all rights in the database, sorted by Description
            </summary>
            <returns>The list of rights</returns>
        </member>
        <member name="M:Oculus.Security.Administration.RightManager.GetRightsByObjectType(System.Guid)">
            <summary>
            Retrieves a list of rights related to the specified object type, sorted by Description.
            </summary>
            <param name="objectTypeId">The id of the object type</param>
            <returns>The list of rights</returns>
        </member>
        <member name="M:Oculus.Security.Administration.RightManager.RightExists(System.Guid)">
            <summary>
            Checks if the specified right exists in the database
            </summary>
            <param name="rightId">The id of the right</param>
            <returns>true if the right exists, false if not</returns>
        </member>
        <member name="T:Oculus.Security.Administration.SecuredObjectManager">
            <summary>
            Class which contains methods for administering secured objects in the database
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.SecuredObjectManager.#ctor">
            <summary>
            Create an instance of the data access object against the default connection
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.SecuredObjectManager.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Create an instance of the object against the specified connection
            </summary>
            <param name="conn">The connection to use</param>
        </member>
        <member name="F:Oculus.Security.Administration.SecuredObjectManager.SqlCheckSysObject">
            <summary>
            Returns 1 if the items is a system object, 0 otherwise
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.SecuredObjectManager.SqlCheckSecuredObject">
            <summary>
            Returns 1 if the items is a system object, 0 otherwise
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.SecuredObjectManager.SqlInsertObject">
            <summary>
            Adds a record to the SEC_OBJECT table. Params @Id, @Name, @TypeId
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.SecuredObjectManager.SqlUpdateObject">
            <summary>
            Updates a record based on the id. Params @Id, @Name, @TypeId
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.SecuredObjectManager.SqlDeleteObjectById">
            <summary>
            Deletes an object based on the id. Params @Id
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.SecuredObjectManager.SqlDeleteFromParentTable">
            <summary>
            Deletes all rows from the SEC_OBJECT_PARENT table containing the specified id.
            Params @Id
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.SecuredObjectManager.SqlDeleteFromRightsTable">
            <summary>
            Deletes all rows from the SEC_OBJECT_RIGHT table containing the specified id. 
            Param @Id
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.SecuredObjectManager.SqlDeleteFromTypeRightsTable">
            <summary>
            Deletes all rows from the SEC_OBJECT_TYPE_RIGHT table containing the 
            specified id. Params @Id
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.SecuredObjectManager.SqlInsertParentRelationship">
            <summary>
            Adds a row to the SEC_OBJECT_PARENT table. Params @ChildId, @ParentId
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.SecuredObjectManager.SqlDeleteParentRelationship">
            <summary>
            Deletes a row from the SEC_OBJECT_PARENT table. Params @ChildId, @ParentId
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.SecuredObjectManager.SqlDeleteSecuredObjectParentsOfType">
            <summary>
            Deletes ALL rows from SEC_OBJECT_PARENT for the child id and all parents of the particular type.
            Params @ChildId, @ParentTypeId
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.SecuredObjectManager.ErrSystem">
            <summary>
            Error message for the case where an update or delete is performed that did not affect any rows.
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.SecuredObjectManager.SaveBrandImages(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.Guid,System.String}})">
            <summary>
            Saves the branding images for the server and for individual user groups (which could be customers of the server owner)
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.SecuredObjectManager.SaveSecuredObject(Oculus.Security.DataObjects.SecuredObject)">
            <summary>
            Saves the specified secured object to security. Use this method for adding or updating any type
            of object, INCLUDING user objects (e.g. before an add to the logon objects table).
            </summary>
            <param name="obj">The object with the data to add, must have all fields defined - cannot be null</param>
        </member>
        <member name="M:Oculus.Security.Administration.SecuredObjectManager.SecuredObjectExists(System.Guid)">
            <summary>
            Can be used to determine whether or not the object with the specified id exists.
            </summary>
            <param name="id">The id to check</param>
            <returns>True if a record exists, false otherwise</returns>
        </member>
        <member name="M:Oculus.Security.Administration.SecuredObjectManager.AddSecuredObjectParent(System.Guid,System.Guid)">
            <summary>
            Adds a parent/child relationship between the specified items.
            </summary>
            <param name="childId">The id of the child object</param>
            <param name="parentId">The id of the parent object</param>
        </member>
        <member name="M:Oculus.Security.Administration.SecuredObjectManager.IsSystemObject(System.Guid)">
            <summary>
            Determines whether or not the specified id is a system object
            </summary>
            <param name="objectId">The id to check</param>
            <returns>True if the object is a system object, else false</returns>
        </member>
        <member name="M:Oculus.Security.Administration.SecuredObjectManager.VerifyNotSystemObject(System.Guid)">
            <summary>
            Verifies the object with the specified id is NOT a system object.
            If it IS, an exception will be raised.
            </summary>
            <param name="objectId">The id to check</param>
        </member>
        <member name="M:Oculus.Security.Administration.SecuredObjectManager.DeleteSecuredObject(System.Guid)">
            <summary>
            Deletes the specified object within the specified transaction.
            </summary>
            <param name="objId">The id of the object to delete</param>
        </member>
        <member name="M:Oculus.Security.Administration.SecuredObjectManager.RemoveSecuredObjectParent(System.Guid,System.Guid)">
            <summary>
            Removes the parent/child relationship between the specified items.
            </summary>
            <param name="childId">The id of the child object</param>
            <param name="parentId">The id of the parent object</param>
            <exception cref="T:System.Data.DataException">If the operation does not affect any rows</exception>
        </member>
        <member name="M:Oculus.Security.Administration.SecuredObjectManager.RemoveSecuredObjectParentsOfType(System.Guid,System.Guid)">
            <summary>
            Removes ALL the parent/child relationships against the child for parents of the specified type.
            </summary>
            <param name="childId">The id of the child</param>
            <param name="parentTypeId">The type id of the parents</param>
        </member>
        <member name="T:Oculus.Security.Administration.UserManager">
            <summary>
            Class which contains methods for administering users in the database
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.UserManager.#ctor">
            <summary>
            Create an instance of the data access object against the default connection
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.UserManager.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Create an instance of the object against the specified connection
            </summary>
            <param name="conn">The connection to use</param>
        </member>
        <member name="F:Oculus.Security.Administration.UserManager.SqlUpdatePasswordHash">
            <summary>
            Updates the password hash field in the SEC_LOGON_OBJECT table. Params @PasswordHash, @Id
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.UserManager.SqlSelectPassHist">
            <summary>
            Retrieves a users last passwords. Params @Id. Replace |top| with number of rows
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.UserManager.SqlUpdateUserProperties">
            <summary>
            Inserts or updates a user's properties depending if it already exists or not. Params @Id, @EMail, @Mobile, @LandLine, @BusUnit, @Comments, @IsEnabled
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.UserManager.SqlGetUserProperties">
            <summary>
            Return user properties. Params @Id.
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.UserManager.SqlInsertUser">
            <summary>
            Adds a record to the SEC_LOGON_OBJECT table. Params @Id, @Name, @LCaseName, @AuthenticatorId, @PassHash
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.UserManager.SqlUpdateUser">
            <summary>
            Udpates a record in the SEC_LOGON_OBJECT table. Params @Id, @Name, @LCaseName, @AuthenticatorId, @PassHash
            </summary>
        </member>
        <member name="F:Oculus.Security.Administration.UserManager.SqlDeleteUser">
            <summary>
            Deletes a record from the SEC_LOGON_OBJECT table. Params @Id
            </summary>
        </member>
        <member name="M:Oculus.Security.Administration.UserManager.InternalSaveUser(Oculus.Security.DataObjects.User,System.String,System.Boolean)">
            <summary>
            Does a save of the user object.
            </summary>
            <param name="user">The user to save</param>
            <param name="sql">The sql to use for the SEC_LOGON_OBJECT add/update</param>
            <param name="includePassword">true to add PassHash as a param, false otherwise</param>
        </member>
        <member name="M:Oculus.Security.Administration.UserManager.AddUser(Oculus.Security.DataObjects.User,System.String)">
            <summary>
            Adds the user record with the specified password.  You must specify the user id, username, 
            and authenticator id.
            </summary>
            <param name="user">The user to add, cannot be null.</param>
            <param name="password">The password for the user, cannot be null</param>
        </member>
        <member name="M:Oculus.Security.Administration.UserManager.AddUser(Oculus.Security.DataObjects.User,System.String,System.Boolean)">
            <summary>
            Adds the user record with the specified password.  You must specify the user id, username, 
            and authenticator id.
            </summary>
            <param name="user">The user to add, cannot be null.</param>
            <param name="password">The password for the user, cannot be null</param>
            <param name="isPasswordHashed">True if the password is already hashed, false if not</param>
            <exception cref="T:System.ArgumentException">If Id, Name, or AuthenticationProviderId have not been set</exception>
        </member>
        <member name="M:Oculus.Security.Administration.UserManager.DeleteUser(System.Guid)">
            <summary>
            Deletes the specified user from the database.
            </summary>
            <param name="userId">The system id of the user to delete</param>
        </member>
        <member name="M:Oculus.Security.Administration.UserManager.SetUserPassword(System.Guid,System.String)">
            <summary>
            Sets the specified user's password. This will only work on users which are authenticated
            by the native provider.
            </summary>
            <param name="userId">The id of the user</param>
            <param name="password">The new password for the user, cannot be null</param>
        </member>
        <member name="M:Oculus.Security.Administration.UserManager.UpdateUser(Oculus.Security.DataObjects.User)">
            <summary>
            Updates the user information. You can change the username and/or the authenticator id.
            NB the "PassHash" property, if it exists, will be deleted on the object, also lowercases
            the Name.
            </summary>
            <param name="user">The user data to update</param>
            <exception cref="T:System.ArgumentException">If Id, Name, or AuthenticationProviderId have not been set</exception>
        </member>
        <member name="T:Oculus.Security.AdminManager">
            <summary>
            This class is responsible for serving as the public face to the internal security system's 
            administration functionality. The gamut of public admin functions are available through this class.
            Please note all administration operations which are not just querying information are SECURED, and the 
            user must possess the security administrator role.
            
            This class is designed specifically for SINGLE CALL remoting.  Don't put any state in this class or
            it'll mess everything up.
            </summary>
        </member>
        <member name="M:Oculus.Security.AdminManager.VerifyAndExtendSession">
            <summary>
            Ensures the current call is done with an Oculus user, and extends the session.
            </summary>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetSecuredObject(System.Guid)">
            <summary>
            Gets the secured object for the specified id.
            </summary>
            <param name="id">The id of the object</param>
            <returns>The SecuredObject for the id</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetSecuredObjectsByNameAndType(System.String,System.Guid)">
            <summary>
            Retrieves the objects with the specified name of the specified type
            </summary>
            <param name="name">The name</param>
            <param name="typeId">The type id</param>
            <returns>The list of objects which match the criteria</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetSecuredObjectsByType(System.Guid)">
            <summary>
            Gets a collection of objects for the specified type, sorted by friendly id.
            </summary>
            <param name="typeId">The type of objects to retrieve</param>
            <returns>The list of objects</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetSecuredObjectsByTypeAsDictionary(System.Guid)">
            <summary>
            Gets a dictionary of objects for the specified type, indexed by id.
            </summary>
            <param name="typeId">The type of objects to retrieve</param>
            <returns>The list of objects</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetSecuredObjectsByParentAndType(System.Guid,System.Guid)">
            <summary>
            Gets a collection of child objects of the specified type for the specified parent, sorted by friendly id.
            </summary>
            <param name="parentId">The id of the parent object</param>
            <param name="typeId">The type of child to retrieve</param>
            <returns>The list of objects</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetSecuredObjectsByParentAndTypeAsDictionary(System.Guid,System.Guid)">
            <summary>
            Gets a collection of child objects of the specified type for the specified parent, indexed by id.
            </summary>
            <param name="parentId">The id of the parent object</param>
            <param name="typeId">The type of child to retrieve</param>
            <returns>The list of objects</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetSecuredObjectsByChildAndType(System.Guid,System.Guid)">
            <summary>
            Gets a collection of parent objects of the specified type for the specified child, sorted by friendly id.
            </summary>
            <param name="childId">The id of the child object</param>
            <param name="typeId">The type of parent to retrieve</param>
            <returns>The list of objects</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetSecuredObjectsByChildAndTypeAsDictionary(System.Guid,System.Guid)">
            <summary>
            Gets a collection of parent objects of the specified type for the specified child, sorted by friendly id.
            </summary>
            <param name="childId">The id of the child object</param>
            <param name="typeId">The type of parent to retrieve</param>
            <returns>The list of objects</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetSecuredObjectRelations(System.Guid,System.Guid)">
            <summary>
            Gets a collection of all relations between the parent type and the child type (useful for retrieving a 
            list of associations, such as groups and users)
            </summary>
            <param name="parentTypeId">The type id for the parent object</param>
            <param name="childTypeId">The type id for the child object</param>
            <returns>A collection of all relation items</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetInheritedObjectRelations(System.Guid,System.Guid,System.Guid)">
            <summary>
            Traverses a parent relationship for a SPECIFIC child and retrieves all grandparent names/ids
            </summary>
            <param name="parentTypeId">The type id for the parent object</param>
            <param name="childId">The specific id for the child object</param>
            <param name="grandParentTypeId">The type id for the grandparent object (the items we're actually retrieving)</param>
            <returns>A collection of all relation items</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetDescendentObjectRelations(System.Guid,System.Guid,System.Guid)">
            <summary>
            Traverses a parent relationship for a SPECIFIC grandparent and retrieves all grandchild names/ids
            </summary>
            <param name="childTypeId">The type id for the chiled object</param>
            <param name="parentId">The specific id for the parent object</param>
            <param name="grandChildTypeId">The type id for the grandchild object (the items we're actually retrieving)</param>
            <returns>A collection of all relation items</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.AddBrandImages(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.Guid,System.String}})">
            <summary>
            Add branding images for the server and for individual user groups (which could be customers of the server owner)
            </summary>
        </member>
        <member name="M:Oculus.Security.AdminManager.AddSecuredObject(Oculus.Security.DataObjects.SecuredObject)">
            <summary>
            Adds the specified secured object to security. Use this method for adding any type
            of object (e.g. groups, roles, etc) EXCEPT users.
            </summary>
            <param name="obj">The object with the data to add, must not be a user and have all fields defined. Cannot be null</param>
            <exception cref="T:System.ArgumentException">If the object is of type user.</exception>
        </member>
        <member name="M:Oculus.Security.AdminManager.AddSecuredObjectParent(System.Guid,System.Guid)">
            <summary>
            Adds a parent/child relationship between the specified items.
            </summary>
            <param name="childId">The id of the child object</param>
            <param name="parentId">The id of the parent object</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.DeleteSecuredObject(System.Guid)">
            <summary>
            Deletes the specified object.
            </summary>
            <param name="objId">The id of the object to delete</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.RemoveSecuredObjectParent(System.Guid,System.Guid)">
            <summary>
            Removes the parent/child relationship between the specified items.
            </summary>
            <param name="childId">The id of the child object</param>
            <param name="parentId">The id of the parent object</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.UpdateSecuredObject(Oculus.Security.DataObjects.SecuredObject)">
            <summary>
            Updates the type and friendly name fields on the object, based on the id.
            </summary>
            <param name="obj">The object to update</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetSecuredBranding(System.String)">
            <summary>
            Gets the branding images for the server and for users groups
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.SaveSecuredBranding(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.Guid,System.String}})">
            <summary>
            Save the branding images for the server and for users groups
            </summary>
        </member>
        <member name="M:Oculus.Security.AdminManager.AddUser(Oculus.Security.DataObjects.User,System.String)">
            <summary>
            Adds the user record with the specified password.  You must specify the user id, username, 
            and authenticator id.
            </summary>
            <param name="user">The user to add, cannot be null</param>
            <param name="password">The password for the user, cannot be null</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.ImportUser(Oculus.Security.DataObjects.User,System.String)">
            <summary>
            Adds the user record with the specified password.  You must specify the user id, username, 
            and authenticator id.
            </summary>
            <param name="user">The user to add, cannot be null</param>
            <param name="password">The password for the user, cannot be null</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.DeleteUser(System.Guid)">
            <summary>
            Deletes the specified user from the database.
            </summary>
            <param name="userId">The system id of the user to delete</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetUser(System.Guid)">
            <summary>
            Retrieves the single user object
            </summary>
            <param name="userId">The system id of the user to retrieve</param>
            <returns>The user</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetUsers">
            <summary>
            Retrieves the list of all users
            </summary>
            <returns>The set of users</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.SetUserPassword(System.Guid,System.String)">
            <summary>
            Sets the specified user's password. This will only work on users which are authenticated
            by the native provider.
            </summary>
            <param name="userId">The id of the user, cannot be null</param>
            <param name="password">The new password for the user, cannot be null</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.UpdateUser(Oculus.Security.DataObjects.User)">
            <summary>
            Updates the user information. You can change the username and/or the authenticator id.
            </summary>
            <param name="user">The user data to update, cannot be null</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.AddObjectType(Oculus.Security.DataObjects.ObjectType)">
            <summary>
            Adds an object type entry to the database. Must specify all members.
            </summary>
            <param name="objectType">The object to add, cannot be null</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.AddRightRelationship(System.Guid,System.Guid)">
            <summary>
            Adds a relationship entry between the specified object type and the specified right.
            </summary>
            <param name="objectTypeId">The id of the object type</param>
            <param name="rightId">The id of the right</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetObjectTypes">
            <summary>
            Returns a list of all type entries in the database sorted by Description
            </summary>
            <returns>The list of object types</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.AddRight(Oculus.Security.DataObjects.Right)">
            <summary>
            Adds the right to the database
            </summary>
            <param name="right">The right to add, cannot be null</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetRights(System.Guid)">
            <summary>
            Retrieves a list of all rights in the database, sorted by Description
            </summary>
            <returns>The list of rights</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetRightsByObjectType(System.Guid)">
            <summary>
            Retrieves a list of rights related to the specified object type, sorted by Description.
            </summary>
            <param name="objectTypeId">The id of the object type</param>
            <returns>The list of rights</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetAccess(System.Guid,System.Guid,System.Guid)">
            <summary>
            Gets the direct access entry for the requestor+target+right.
            </summary>
            <param name="actorId">The object requesting the permission</param>
            <param name="targetId">The object which is the target of the request</param>
            <param name="rightId">The id for the right requested</param>
            <returns>The direct access state for the trio</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.SetAccess(System.Guid,System.Guid,System.Guid,Oculus.Security.Access)">
            <summary>
            Sets the direct access entry for the requestor+target+right.
            </summary>
            <param name="actorId">The object requesting the permission</param>
            <param name="targetId">The object which is the target of the request</param>
            <param name="rightId">The id for the right requested</param>
            <param name="allowAccess">Indicates the value for the access relationship - set to none to remove the entry</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetAccessOnType(System.Guid,System.Guid,System.Guid)">
            <summary>
            Gets the direct access entry for the requestor+target type+right.
            </summary>
            <param name="actorId">The object requesting the permission</param>
            <param name="targetTypeId">The target type of the request</param>
            <param name="rightId">The id for the right requested</param>
            <returns>The direct access state for the trio</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.SetAccessOnType(System.Guid,System.Guid,System.Guid,Oculus.Security.Access)">
            <summary>
            Sets the direct access entry for the requestor+target type+right.
            </summary>
            <param name="actorId">The object requesting the permission</param>
            <param name="targetTypeId">The target type of the request</param>
            <param name="rightId">The id for the right requested</param>
            <param name="allowAccess">Indicates the value for the access relationship - set to none to remove the entry</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetAccessForType(System.Guid,System.Guid,System.Guid)">
            <summary>
            Gets the direct access entries for ALL objects of the specified type against
            the target+right.
            </summary>
            <param name="actorTypeId">The object type requesting the permission</param>
            <param name="targetId">The target of the request</param>
            <param name="rightId">The id for the right requested</param>
            <returns>The direct access state for the trio</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetPermissionMatrix(System.Guid,System.Guid)">
            <summary>
            Retrieves the permission matrix filled with all permissions defined against the specified
            actor and target types.
            </summary>
            <param name="actorTypeId">The actor type id</param>
            <param name="targetTypeId">The target type id</param>
            <returns>The matrix for the input</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetPermissionMatrix(System.Guid,Oculus.Util.Collections.GuidList)">
            <summary>
            Retrieves the permission matrix filled with all permissions defined against the specified
            actor and target ids.
            </summary>
            <param name="actorTypeId">The actor type id</param>
            <param name="targetIds">The target ids</param>
            <returns>The matrix for the input</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.VerifyAdministrator">
            <summary>
            Ensures the principal for the session possesses the security administrator role and raises
            an exception if they're not.
            </summary>
        </member>
        <member name="M:Oculus.Security.AdminManager.VerifySecuredObject(Oculus.Security.DataObjects.SecuredObject)">
            <summary>
            Ensures the object is in the database (i.e. adds it if it's not)
            </summary>
            <param name="secObject">The object to verify</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.VerifyRights(Oculus.Security.DataObjects.Collections.RightCollection)">
            <summary>
            Ensures the rights are in the database (i.e. adds them if it's not)
            </summary>
            <param name="rights">The rights to verify</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.VerifyRightsForType(Oculus.Security.DataObjects.Collections.RightCollection,System.Guid)">
            <summary>
            Ensures the rights are in the database (i.e. adds them if it's not) and
            makes sure the associations with the specified type exist.
            </summary>
            <param name="rights">The rights to verify</param>
            <param name="objectTypeId">The object type to check against</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.VerifyObjectType(Oculus.Security.DataObjects.ObjectType)">
            <summary>
            Ensures the object type is in the database (i.e. adds it if it's not)
            </summary>
            <param name="objectType">The object type to verify</param>
        </member>
        <member name="M:Oculus.Security.AdminManager.GetSessions">
            <summary>
            Retrieves the current set of sessions for the security service. Please
            note the session ids will be cleared for security reasons.
            </summary>
            <returns>The current set of sessions</returns>
        </member>
        <member name="M:Oculus.Security.AdminManager.ExpireSession(System.Guid,System.DateTime)">
            <summary>
            Expires a specific session based on the user id and the time they logged on
            </summary>
            <param name="userId">The user id</param>
            <param name="logonTime">The time of original login</param>
        </member>
        <member name="T:Oculus.Security.Collections.NamedItemList">
            <summary>
            Contains a list of NamedItem objects.
            </summary>
        </member>
        <member name="M:Oculus.Security.Collections.NamedItemList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.Collections.NamedItemList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Security.Collections.IdIndexedAccessDictionary">
            <summary>
            Contains a list of access values indexed by id
            </summary>
        </member>
        <member name="M:Oculus.Security.Collections.IdIndexedAccessDictionary.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.Collections.IdIndexedAccessDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Security.Collections.PermissionMatrix">
            <summary>
            Data class containing values for actor access to targets. Updating this class DOES NOT
            perform any changes on the server.
            </summary>
        </member>
        <member name="M:Oculus.Security.Collections.PermissionMatrix.RightToAccessDictionary.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.Collections.PermissionMatrix.RightToAccessDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="M:Oculus.Security.Collections.PermissionMatrix.GuidToRTADictionary.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.Collections.PermissionMatrix.GuidToRTADictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="M:Oculus.Security.Collections.PermissionMatrix.GuidToGTRTADictionary.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.Collections.PermissionMatrix.GuidToGTRTADictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="M:Oculus.Security.Collections.PermissionMatrix.SetAccess(System.Guid,System.Guid,System.Guid,Oculus.Security.Access)">
            <summary>
            Set the access specified against the actor and target
            </summary>
            <param name="actorId">The actor id</param>
            <param name="targetId">The target id</param>
            <param name="rightId">The right id</param>
            <param name="access">The access to set</param>
        </member>
        <member name="M:Oculus.Security.Collections.PermissionMatrix.GetAccess(System.Guid,System.Guid,System.Guid)">
            <summary>
            Get the access defined against the specified actor and target
            </summary>
            <param name="actorId">The actor id</param>
            <param name="targetId">The target id</param>
            <param name="rightId">The right id</param>
            <returns>The access specified against the relationship</returns>
        </member>
        <member name="T:Oculus.Security.Config">
            <summary>
            This class is a gateway to the settings for the security application. All configuration 
            requests should come through here.
            </summary>
        </member>
        <member name="F:Oculus.Security.Config.s_connection">
            <summary>
            The connection to the database
            </summary>
        </member>
        <member name="F:Oculus.Security.Config.s_sessionTimeout">
            <summary>
            The timeout limit for sessions.
            </summary>
        </member>
        <member name="P:Oculus.Security.Config.Connection">
            <summary>
            Sets the connection to use. Once set, cannot be overwritten.
            </summary>
        </member>
        <member name="P:Oculus.Security.Config.HasConnection">
            <summary>
            Gets whether or not a connection has been defined
            </summary>
        </member>
        <member name="M:Oculus.Security.Config.NewConnection">
            <summary>
            Retrieves a new instance of a connection to the security database.
            </summary>
            <returns>The unopened connection to the database</returns>
        </member>
        <member name="M:Oculus.Security.Config.ExpireSessions">
            <summary>
            Performs a purge of available sessions
            </summary>
        </member>
        <member name="M:Oculus.Security.Config.SetSessionTimeout(System.TimeSpan)">
            <summary>
            Used to set the timeout even after it's been set.
            </summary>
        </member>
        <member name="T:Oculus.Security.Core.Authenticator">
            <summary>
            Helper class responsible for all authentication operations.
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.Authenticator.CreatePrincipalFromAD(Oculus.Security.DataObjects.User,Oculus.Security.Interfaces.ISecurityStoreProvider)">
            <summary>
            Creates a principal object based on ActiveDirectory data. This will load all groups (both AD and Native)
            and role information.
            </summary>
            <param name="user">The user info for the principal</param>
            <param name="adProvider">The provider used to authenticate the user</param>
            <returns>A fully populated principal</returns>
        </member>
        <member name="M:Oculus.Security.Core.Authenticator.CreateNativePrincipal(Oculus.Security.DataObjects.User,Oculus.Security.Interfaces.ISecurityStoreProvider)">
            <summary>
            Creates a principal based on native data. This will load all group and role info.
            </summary>
            <param name="user">The user info</param>
            <param name="nativeProvider">The provider used for authentication</param>
            <returns>A fully populated principal</returns>
        </member>
        <member name="M:Oculus.Security.Core.Authenticator.GetImpersonationPrincipal(System.String)">
            <summary>
            Retrieves a principal suitable for use in impersonation (i.e. Roles only, no groups)
            </summary>
            <param name="username">The user to impersonate</param>
            <returns>The shallow principal</returns>
        </member>
        <member name="M:Oculus.Security.Core.Authenticator.Authenticate(System.Security.Principal.WindowsPrincipal)">
            <summary>
            Performs a verification against ActiveDirectory and ensures the user can log in using windows authentication.
            </summary>
            <param name="windowsPrinciple">The principal for the current windows user</param>
            <returns>A workflow principle representing the login - will be null if authentication failed.</returns>
            <exception cref="T:Oculus.Security.AuthenticationModeException">If the specified user is not allowed to log in via windows</exception>
        </member>
        <member name="M:Oculus.Security.Core.Authenticator.Authenticate(System.String,System.String,System.Boolean)">
            <summary>
            Performs a login for the specified user.
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
            <returns>A workflow principle representing the login - will be null if authentication failed.</returns>
        </member>
        <member name="M:Oculus.Security.Core.Authenticator.GetUserSecurityProvider(System.String)">
            <summary>
            this method returns the appropriate provider id for the user
            </summary>
            <param name="username">the user name</param>
            <returns>the provider id</returns>
        </member>
        <member name="T:Oculus.Security.Core.Collections.SessionDictionary">
            <summary>
            Helper collection class (if we want, we can persist this to disk!)
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.Collections.SessionDictionary.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.Core.Collections.SessionDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="M:Oculus.Security.Core.Collections.SessionDictionary.ToSessionList">
            <summary>
            Converts the dictionary to a list. Contents are a shallow copy.
            </summary>
            <returns>The list</returns>
        </member>
        <member name="T:Oculus.Security.Core.Collections.ThreadSafeSessionDictionary">
            <summary>
            Helper collection class (if we want, we can persist this to disk!)
            This is an attempted threadsafe implementation of the oculus threadsafe dictionary
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.Collections.ThreadSafeSessionDictionary.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.Core.Collections.ThreadSafeSessionDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="M:Oculus.Security.Core.Collections.ThreadSafeSessionDictionary.ToSessionList">
            <summary>
            Converts the dictionary to a list. Contents are a shallow copy.
            </summary>
            <returns>The list</returns>
        </member>
        <member name="T:Oculus.Security.Core.Collections.SessionList">
            <summary>
            Helper collection class containing a list of Session objects
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.Collections.SessionList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.Core.Collections.SessionList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="M:Oculus.Security.Core.Collections.SessionList.Clone">
            <summary>
            Creates a deep clone of the list
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Security.Core.Permissions">
            <summary>
            Utility class for querying permissions.
            
            NB THIS CLASS IS CURRENTLY ONLY GEARED TO WORK WITH FIREBIRD DATABASES.
            THERE ARE LIMITATIONS ON SELECTING MULTIPLE COLUMNS FROM INNER QUERIES.
            ONCE THAT LIMITATION IS REMOVED, THIS CLASS CAN MOVE TO A MORE GENERIC
            SOLUTION WITH THE SQL INCLUDED HERE.
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.Permissions.SqlSelectAccessGranted">
            <summary>
            Retrieves a 0 or null if the user does not have access to the specified object
            using the specified permission, 1 if the user does. This query checks for direct
            access or single-level group inherited access, and checks against type-level access.
            
            Params @ActorId, @TargetId, @RightId
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.Permissions.SqlSelectUserGroups">
            <summary>
            Retrieves only the ID's of the groups that the user belongs to
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.Permissions.SqlNonFBSelectAccessGranted">
            <summary>
            Fetch 0 or null if user doesn't have access, 1 if access in non-FB databases
            
            Params @ActorId, @TargetId, @RightId
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.Permissions.SqlSelectAllGrantedForType">
            <summary>
            Retrieves a list of all the objects of a particular type to which the user has the 
            specified permission. This query checks for direct access or single-level group inherited 
            access, and checks against type-level access.
            
            Params @ActorId, @ItemTypeId, @RightId
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.Permissions.SqlNonFBSelectAllGrantedForType">
            <summary>
            Fetch all items of a specific type to which we have access
            
            Params @ActorId, @ItemTypeId, @RightId
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.Permissions.SqlSelectAllAccessByRequestorType">
            <summary>
            Retrieves all access states for an object type against a single object/permission.
            Params @TypeId, @TargetId, @RightId
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.Permissions.SqlGetMatrix">
            <summary>
            Retrieves the permission matrix for the specified actor and target types
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.Permissions.SqlGetMatrixByIds">
            <summary>
            Retrieves the permission matrix for the specified actor and target ids - note must be 
            modified for the OR condition
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.Permissions.GetAccessForType(System.Guid,System.Guid,System.Guid)">
            <summary>
            Gets the direct access entries for ALL objects of the specified type against
            the target+right.
            </summary>
            <param name="actorTypeId">The object type requesting the permission</param>
            <param name="targetId">The target of the request</param>
            <param name="rightId">The id for the right requested</param>
            <returns>The direct access state for the trio</returns>
        </member>
        <member name="M:Oculus.Security.Core.Permissions.HasPermission(System.Guid,System.Guid,System.Guid)">
            <summary>
            Checks to see if the user associated with the session has the specified permission against
            the target object. In the interest of performance, this method DOES NOT verify the existence 
            of the permission or the target object.
            </summary>
            <param name="actorId">The actor id to check (i.e. the one requesting the operation)</param>
            <param name="targetObjectId">The object against which the user requires access</param>
            <param name="rightId">The id for the requested permission</param>
            <returns>True if the user has the requested access, false if not</returns>
        </member>
        <member name="M:Oculus.Security.Core.Permissions.GetCurrentOculusPrincipalGroups(System.Guid)">
            <summary>
            Retrieves a list of groupID's that the user belongs to
            </summary>
            <param name="actorId"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Security.Core.Permissions.GetObjectsByPermissionAndType(System.Guid,System.Guid,System.Guid)">
            <summary>
            Retrieves a list of all objects for the particular type to which the user with the specified 
            session id has access.
            </summary>
            <param name="actorId">The actor id to check (i.e. the one requesting the operation)</param>
            <param name="objectTypeId">The object type id to use in the retrieval</param>
            <param name="rightId">The particular permission to use in the retrieval</param>
            <returns>A list of ids which match the search criteria (will be zero-length, not null, if there are none)</returns>
        </member>
        <member name="M:Oculus.Security.Core.Permissions.GetPermissionMatrix(System.Guid,System.Guid)">
            <summary>
            Retrieves the permission matrix filled with all permissions defined against the specified
            actor and target types.
            </summary>
            <param name="actorTypeId">The actor type id</param>
            <param name="targetTypeId">The target type id</param>
            <returns>The matrix for the input</returns>
        </member>
        <member name="M:Oculus.Security.Core.Permissions.GetPermissionMatrix(System.Guid,Oculus.Util.Collections.GuidList)">
            <summary>
            Retrieves the permission matrix filled with all permissions defined against the specified
            actor and target ids.
            </summary>
            <param name="actorTypeId">The actor type id</param>
            <param name="targetIds">The target ids</param>
            <returns>The matrix for the input</returns>
        </member>
        <member name="T:Oculus.Security.Core.ProviderManager">
            <summary>
            Class which handles provider instantiation.  All methods are available off the class, 
            but internall the class uses an instance to handle the calls.  Please note the two native
            providers are included AUTOMATICALLY without adding entries to the SEC_AUTHENTICATOR table.
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.ProviderManager.s_synclock">
            <summary>
            Helper object for instance instantiation
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.ProviderManager.s_instance">
            <summary>
            The singleton instance of the manager
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.ProviderManager.SqlSelectAllProviders">
            <summary>
            Grabs all authenticator records out of the database
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.ProviderManager.SqlInsertProvider">
            <summary>
            Inserts a provider
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.ProviderManager.m_providers">
            <summary>
            Contains a list of all valid providers from the SEC_AUTHENTICATOR table + the 2 native providers
            </summary>
        </member>
        <member name="P:Oculus.Security.Core.ProviderManager.Instance">
            <value>
            Get the current workflow environment.
            </value>
        </member>
        <member name="M:Oculus.Security.Core.ProviderManager.GetProviderInstance(System.Guid)">
            <summary>
            Returns an instance of the specified provider
            </summary>
            <param name="providerId">The id of the provider</param>
            <returns>The new provider instance</returns>
            <exception cref="T:Oculus.Security.ProviderUnknownException">If the provider does not exist or was not properly loaded</exception>
        </member>
        <member name="M:Oculus.Security.Core.ProviderManager.LoadProviders">
            <summary>
            Loads up and validates all providers from the database plus our native providers, 
            populating the this.m_providers variable.
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.ProviderManager.NewNativeProvider">
            <summary>
            Retrieves an instance of the native Oculus provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Security.Core.ProviderManager.NewProvider(System.Guid)">
            <summary>
            Creates a new instance of the specified provider
            </summary>
            <param name="providerId">The provider to create</param>
            <returns>The new instance of the provider</returns>
        </member>
        <member name="M:Oculus.Security.Core.ProviderManager.NewActiveDirectoryProvider">
            <summary>
            Retrieves a new instance of the active directory provider
            </summary>
            <returns>The active directory provider instance</returns>
        </member>
        <member name="M:Oculus.Security.Core.ProviderManager.AddProvider(System.Guid,System.Type)">
            <summary>
            Adds the provider type to the system. Does not verify existence in the db
            </summary>
            <param name="id">The provider id</param>
            <param name="providerType">The type of the provider</param>
        </member>
        <member name="T:Oculus.Security.Core.ProviderManager.ProviderRecord">
            <summary>
            Helper class to contain provider info
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.ProviderManager.ProviderRecord.Id">
            <summary>
            The unique id of the provider
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.ProviderManager.ProviderRecord.FullTypeName">
            <summary>
            The fully qualified type name for the provider
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.ProviderManager.ProviderRecord.LoadedType">
            <summary>
            The type object loaded from the class and assembly name
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.ProviderManager.ProviderRecord.LoadType">
            <summary>
            After initialization, this method attempts to load the type and will raise an exception
            if it fails
            </summary>
        </member>
        <member name="T:Oculus.Security.Core.SecuredObjectManager">
            <summary>
            Contains utility methods for loading up secured objects for use in core operations.
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.#ctor">
            <summary>
            Create an instance of the data access object against the default connection
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Create an instance of the object against the specified connection
            </summary>
            <param name="conn">The connection to use</param>
        </member>
        <member name="F:Oculus.Security.Core.SecuredObjectManager.SqlSelectHasParent">
            <summary>
            Selects a specific child/parent relationship, return will be 0 or &gt; 0
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SecuredObjectManager.SqlSelectObjectFields">
            <summary>
            Basic select against the object table
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SecuredObjectManager.SqlSelectObjectById">
            <summary>
            Selects by Id. Params @Id
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SecuredObjectManager.SqlSelectObjectByNameAndType">
            <summary>
            Selects by Name and TypeId. Params @Name, @TypeId
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SecuredObjectManager.SqlSelectObjectByType">
            <summary>
            Selects by TypeId. Params @TypeId
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SecuredObjectManager.SecuredObjectTable">
            <summary>
            The table where all secured objects are saved
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SecuredObjectManager.SqlSelectChildrenByParentAndType">
            <summary>
            Selects all child entries (of the given type) for the given parent. Params @TypeId, @ParentId
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SecuredObjectManager.SqlSelectParentsByChildAndType">
            <summary>
            Selects all parent entries for the given child + type of parent. Params @TypeId, @ChildId
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SecuredObjectManager.SqlSelectRelationsByTypes">
            <summary>
            Selects all relations between the child and parent types. Param @ChildTypeId, @ParentTypeId
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SecuredObjectManager.SqlSelectInheritedRelations">
            <summary>
            Selects all inherited relations for a specific child following a typed parent/child relationship.
            Params @ChildId, @ParentTypeId, @GParentTypeId
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SecuredObjectManager.SqlSelectDescendantRelations">
            <summary>
            Selects all descendant relations for a specific parent following a typed parent/child relationship.
            Params @ParentId, @ChildTypeId, @GChildTypeId
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.LoadList(Oculus.Data.Connections.Interfaces.IOcuConnection,System.Data.Common.DbCommand)">
            <summary>
            Loads up the records for all objects returned by executing the parameter.
            </summary>
            <param name="connection">The OPEN connection to use for the operation</param>
            <param name="commandToRun">The command object to execute, should already be linked to the connection</param>
            <returns>The list of objects requested</returns>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.HasParent(System.Guid,System.Guid)">
            <summary>
            Determines if the specified child/parent relationship exists
            </summary>
            <param name="childId">The child id</param>
            <param name="parentId">The parent id</param>
            <returns>True if the relationship exist, false otherwise</returns>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.Load(System.String,System.Guid)">
            <summary>
            Retrieves a secured object based on its name and type.
            </summary>
            <param name="name">The name of the secured object</param>
            <param name="typeId">The type for the object</param>
            <returns>The populated item</returns>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.Load(System.Guid)">
            <summary>
            Retrieves a secured object based on its id.
            </summary>
            <param name="objectId">The unique id of the secured object</param>
            <returns>The populated item</returns>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.Load(System.Guid,System.Boolean)">
            <summary>
            Retrieves a secured object based on its id.
            </summary>
            <param name="objectId">The unique id of the secured object</param>
            <param name="raiseOnNotFound">Set to true to automatically raise an exception if the item isn't found</param>
            <returns>The populated item, or null if not found and not raising errors</returns>
            <exception cref="T:Oculus.Security.SecuredObjectUnknownException">If the object cannot be found and raiseOnNotFound is true</exception>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.GetAllObjectsByNameAndType(System.String,System.Guid)">
            <summary>
            Retrieves a list of all the objects of a particular type in the database, with
            the specified name.
            </summary>
            <param name="name">The name of the object to retrieve - CASE SENSITIVE. Use null to exclude</param>
            <param name="typeId">The type of object to retrieve</param>
            <returns>A list of all the objects for the type/name in the database</returns>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.GetAllObjectsOfType(System.Guid)">
            <summary>
            Retrieves a list of all the objects of a particular type in the database.
            </summary>
            <param name="typeId">The type of object to retrieve</param>
            <returns>A list of all the objects for the type in the database</returns>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.GetChildrenOfType(System.Guid,System.Guid)">
            <summary>
            Retrieves a list of all the children for a particular parent in the database.
            </summary>
            <param name="parentId">The parent object id</param>
            <param name="childTypeId">The type of children to retrieve</param>
            <returns>A list of all the children for the type in the database</returns>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.GetParentsOfType(System.Guid,System.Guid)">
            <summary>
            Retrieves a list of all the parents for a particular child of the specified type.
            </summary>
            <param name="childId">The child object id</param>
            <param name="parentTypeId">The type of parents to retrieve</param>
            <returns>A list of all the parents for the child + type in the database</returns>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.GetRelations(System.Guid,System.Guid)">
            <summary>
            Gets a collection of all relations between the parent type and the child type (useful for retrieving a 
            list of associations, such as groups and users)
            </summary>
            <param name="parentTypeId">The type id for the parent object</param>
            <param name="childTypeId">The type id for the child object</param>
            <returns>A collection of all relation items</returns>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.GetInheritedObjectRelations(System.Guid,System.Guid,System.Guid)">
            <summary>
            Traverses a parent relationship for a SPECIFIC child and retrieves all grandparent names/ids
            </summary>
            <param name="parentTypeId">The type id for the parent object</param>
            <param name="childId">The specific id for the child object</param>
            <param name="grandParentTypeId">The type id for the grandparent object (the items we're actually retrieving)</param>
            <returns>A collection of all relation items</returns>
        </member>
        <member name="M:Oculus.Security.Core.SecuredObjectManager.GetDescendentObjectRelations(System.Guid,System.Guid,System.Guid)">
            <summary>
            Traverses a parent relationship for a SPECIFIC grandparent and retrieves all grandchild names/ids
            </summary>
            <param name="childTypeId">The type id for the chiled object</param>
            <param name="parentId">The specific id for the parent object</param>
            <param name="grandChildTypeId">The type id for the grandchild object (the items we're actually retrieving)</param>
            <returns>A collection of all relation items</returns>
        </member>
        <member name="T:Oculus.Security.Core.Session">
            <summary>
            Helper class which contains a user session on the server
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.Session.#ctor">
            <summary>
            Empty constructor for serialization
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.Session.#ctor(Oculus.Security.OculusPrincipal)">
            <summary>
            Create a new session for the specified principal. This will automatically create
            an id.
            </summary>
            <param name="principal">The principal to associate with this session</param>
        </member>
        <member name="F:Oculus.Security.Core.Session.m_id">
            <summary>
            The id for this session object
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.Session.m_principal">
            <summary>
            The principal associated with this session
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.Session.m_lastTouched">
            <summary>
            Time indicating the most recent time this session was used - the value MUST
            be updated via the Extend method.
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.Session.m_loginTimestamp">
            <summary>
            Time indicating when the user actually logged in
            </summary>
        </member>
        <member name="P:Oculus.Security.Core.Session.Id">
            <summary>
            Get the session id for the object
            </summary>
        </member>
        <member name="P:Oculus.Security.Core.Session.Principal">
            <summary>
            Get the principal for the session
            </summary>
        </member>
        <member name="P:Oculus.Security.Core.Session.LastTouched">
            <summary>
            Get the last time this object was extended
            </summary>
        </member>
        <member name="P:Oculus.Security.Core.Session.LoginTimestamp">
            <summary>
            Get the original time the user logged in
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.Session.Extend">
            <summary>
            Updates the last used date to current, thereby extending the lifetime of the session.
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.Session.Expire">
            <summary>
            Destroys all the session information for the object
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.Session.ClearSessionId">
            <summary>
            Clears the session id from the session, NB use with caution as this could lead to stale
            sessions.
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.Session.Clone">
            <summary>
            Creates a clone of the object, please note the principal is also cloned
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Security.Core.SessionManager">
            <summary>
            Class which manages user sessions. A single instance is exposed of the static Instance property,
            but other instances may also be created. Please note instances DO NOT share any resources, so a 
            session in one instance will not be valid in another instance.
            
            Some work could be done to make this more thread safe
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.SessionManager.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SessionManager.s_instance">
            <summary>
            Singleton instance of the session manager instance
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SessionManager.m_sessions">
            <summary>
            Contains the current list of sessions.
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.SessionManager.DefaultSessionTimeout">
            <summary>
            The default amount, in minutes, for a session to time out
            </summary>
        </member>
        <member name="P:Oculus.Security.Core.SessionManager.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
        </member>
        <member name="P:Oculus.Security.Core.SessionManager.ConcurrentSessionCount">
            <summary>
            Gets the total number of concurrent sessions. Does not take into account
            system accounts.
            </summary>
        </member>
        <member name="P:Oculus.Security.Core.SessionManager.Sessions">
            <summary>
            Provides access to the set of sessions
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.SessionManager.VerifySession(System.Guid)">
            <summary>
            Raises an exception if the session id is not valid.
            </summary>
            <param name="sessionId">The session id in question</param>
            <returns>The session for the id</returns>
        </member>
        <member name="M:Oculus.Security.Core.SessionManager.IsSystemAccount(Oculus.Security.OculusPrincipal)">
            <summary>
            Determines if the principal is linked to a system account
            </summary>
            <param name="principal">The principal object</param>
            <returns>True if it's a system account, false otherwise</returns>
        </member>
        <member name="M:Oculus.Security.Core.SessionManager.ExtendSession(System.Guid)">
            <summary>
            Extends the lifetime of a particular session (postponing a timeout).
            </summary>
            <param name="sessionId">The session id being extended</param>
        </member>
        <member name="M:Oculus.Security.Core.SessionManager.StartSession(Oculus.Security.OculusPrincipal)">
            <summary>
            Initiates a session with security and sets the session Id on the principal
            </summary>
            <param name="principal">The principal associated with the session</param>
        </member>
        <member name="M:Oculus.Security.Core.SessionManager.ExpireSession(System.Guid)">
            <summary>
            Immediately expires the specified session.
            </summary>
            <param name="sessionId">The id of the session to expire.</param>
        </member>
        <member name="M:Oculus.Security.Core.SessionManager.ExpireSession(System.Guid,System.DateTime)">
            <summary>
            Expires the session with the specified user id and logon time. This is less 
            efficient than expiring by id, but useful in situations where the session id
            is not available
            </summary>
            <param name="userId">The user id</param>
            <param name="logonTime">The logon time</param>
        </member>
        <member name="M:Oculus.Security.Core.SessionManager.ExpireSessions(System.DateTime)">
            <summary>
            Immediately expires all sessions whose last extension is earlier than the cutoff date.
            </summary>
            <param name="sessionCutoff">The minimum valid date/time for a session</param>
        </member>
        <member name="M:Oculus.Security.Core.SessionManager.ExpireSessions">
            <summary>
            Expires sessions that are older than the preconfigured value
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.SessionManager.RetrievePrincipal(System.Guid)">
            <summary>
            Returns the principal object for the specified session.
            </summary>
            <param name="sessionId">The session id for the principal</param>
            <returns>The principal requested</returns>
        </member>
        <member name="M:Oculus.Security.Core.SessionManager.VerifyUserSession(System.Guid)">
            <summary>
            Raises an exception if the session id is not valid. Also extends the session
            </summary>
            <param name="sessionId">The session id in question</param>
            <returns>The session for the id</returns>
        </member>
        <member name="T:Oculus.Security.Core.UserManager">
            <summary>
            Represents a user in the security database. Contains methods for loading up a particular 
            user entry (i.e. data from the SEC_LOGON_OBJECT table)
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.UserManager.#ctor">
            <summary>
            Create an instance of the data access object against the default connection
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.UserManager.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Create an instance of the object against the specified connection
            </summary>
            <param name="conn">The connection to use</param>
        </member>
        <member name="F:Oculus.Security.Core.UserManager.SqlUpdateLastLogon">
            <summary>
            Updates the SEC_LOGON_OBJECT.LAST_LOGON field for a successful log in. Params @LastLogon, @Id
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.UserManager.SqlSelectAll">
            <summary>
            Retrieves all users.
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.UserManager.SqlSelectUserById">
            <summary>
            Retrieves a user by their user ID. Params @Id
            </summary>
        </member>
        <member name="F:Oculus.Security.Core.UserManager.SqlSelectUserByLCaseName">
            <summary>
            Retrieves a user by their lower case name. Params @LCaseName
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.UserManager.LoadUsers(Oculus.Data.Connections.Interfaces.IOcuConnection,System.Data.Common.DbCommand)">
            <summary>
            Loads a single user record
            </summary>
            <param name="connection">The connection to use</param>
            <param name="command">The command to use</param>
            <returns>The user, or null if not found</returns>
        </member>
        <member name="M:Oculus.Security.Core.UserManager.TouchLastLogin(System.Guid)">
            <summary>
            Updates the LAST_LOGIN field to the current date/time
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.UserManager.TouchPassCreated(System.Guid)">
            <summary>
            Updates the PASS_CREATED field to the current date/time
            </summary>
        </member>
        <member name="M:Oculus.Security.Core.UserManager.Load(System.String)">
            <summary>
            Retrieves the user record from the database corresponding to the user name
            </summary>
            <param name="username">The username in question, cannot be null</param>
            <returns>The populated user object</returns>
            <exception cref="T:Oculus.Security.SecuredObjectUnknownException">If the user cannot be found</exception>
        </member>
        <member name="M:Oculus.Security.Core.UserManager.Load(System.Guid)">
            <summary>
            Retrieves the user record from the database corresponding to the user id
            </summary>
            <param name="userId">The user id in question</param>
            <returns>The populated user object</returns>
            <exception cref="T:Oculus.Security.SecuredObjectUnknownException">If the user cannot be found</exception>
        </member>
        <member name="M:Oculus.Security.Core.UserManager.LoadAll">
            <summary>
            Retrieves the list of all users
            </summary>
            <returns>All the users</returns>
        </member>
        <member name="T:Oculus.Security.DataObjects.BaseObject">
            <summary>
            The base type of all objects managed by Oculus systems.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.BaseObject.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="P:Oculus.Security.DataObjects.BaseObject.Id">
            <summary>
            Get/Set the id of the object
            </summary>
        </member>
        <member name="P:Oculus.Security.DataObjects.BaseObject.Name">
            <summary>
            Get/Set the name of the object
            </summary>
        </member>
        <member name="P:Oculus.Security.DataObjects.BaseObject.Properties">
            <summary>
            Get/Set any extra information you want to associate with the object
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.BaseObject.CopyMembers(Oculus.Security.DataObjects.BaseObject)">
            <summary>
            Copies all fields from the argument to the current (this) instance
            </summary>
            <param name="objectToClone">Our source object</param>
        </member>
        <member name="M:Oculus.Security.DataObjects.BaseObject.ToString">
            <summary>
            The to string implimentation for base ocuobject
            </summary>
            <returns>the name of the object</returns>
        </member>
        <member name="M:Oculus.Security.DataObjects.BaseObject.Clone">
            <summary>
            Creates a clone of all members against the current type (inherited will work properly)
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="M:Oculus.Security.DataObjects.BaseObject.CompareTo(System.Object)">
            <summary>
            Less than zero -> This instance is less than obj. 
            Zero -> This instance is equal to obj. 
            Greater than zero -> This instance is greater than obj. 
            </summary>
        </member>
        <member name="T:Oculus.Security.DataObjects.Collections.SecuredObjectCollection">
            <summary>
            Contains a list of SecuredObject objects.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.SecuredObjectCollection.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.SecuredObjectCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Security.DataObjects.Collections.SecuredObjectDictionary">
            <summary>
            Contains a list of SecuredObject objects indexed by their id.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.SecuredObjectDictionary.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.SecuredObjectDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Security.DataObjects.Collections.UserCollection">
            <summary>
            Contains a list of User objects.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.UserCollection.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.UserCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Security.DataObjects.Collections.SecuredObjectRelationCollection">
            <summary>
            Contains a list of SecuredObjectRelation objects.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.SecuredObjectRelationCollection.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.SecuredObjectRelationCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Security.DataObjects.Collections.ObjectTypeCollection">
            <summary>
            Contains a list of ObjectType objects.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.ObjectTypeCollection.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.ObjectTypeCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Security.DataObjects.Collections.ObjectTypeDictionary">
            <summary>
            Contains a list of object types indexed by their name.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.ObjectTypeDictionary.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.ObjectTypeDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Security.DataObjects.Collections.RightCollection">
            <summary>
            Contains a list of Right objects.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.RightCollection.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.RightCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Security.DataObjects.Collections.RightDictionary">
            <summary>
            Contains a list of rights objects indexed by their name.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.RightDictionary.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Collections.RightDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Security.DataObjects.ObjectType">
            <summary>
            Represents an object type entry in the security database (i.e. data from the SEC_OBJECT_TYPE table). 
            Any items added to the extendable properties (via "Properties") will be stored as columns.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.ObjectType.#ctor">
            <summary>
            Create a type object
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.ObjectType.#ctor(System.Guid,System.String)">
            <summary>
            Create a type object with all fields
            </summary>
            <param name="id">The id</param>
            <param name="name">The name</param>
        </member>
        <member name="T:Oculus.Security.DataObjects.Right">
            <summary>
            Data object for the SEC_RIGHT table
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Right.#ctor">
            <summary>
            Create a right object
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.Right.#ctor(System.Guid,System.String)">
            <summary>
            Create a right object with all fields
            </summary>
            <param name="id">The id</param>
            <param name="name">The name</param>
        </member>
        <member name="M:Oculus.Security.DataObjects.Right.Equals(System.Object)">
            <summary>
            Determines equality between two right objects
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if equal, false if not</returns>
        </member>
        <member name="M:Oculus.Security.DataObjects.Right.GetHashCode">
            <summary>
            get the hash for the instance 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Security.DataObjects.SecuredObject">
            <summary>
            Data object for entries in the SEC_OBJECT table. Any items added to the 
            extendable properties (via "Properties") will be stored as columns.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.SecuredObject.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.SecuredObject.#ctor(System.Guid,System.String,System.Guid)">
            <summary>
            Create a secured object with all parameters
            </summary>
            <param name="id">The id</param>
            <param name="name">The friendly name</param>
            <param name="typeId">The type id</param>
        </member>
        <member name="P:Oculus.Security.DataObjects.SecuredObject.TypeId">
            <summary>
            Member property for the type id
            </summary>
        </member>
        <member name="T:Oculus.Security.DataObjects.SecuredObjectRelation">
            <summary>
            Data object for entries in the SEC_OBJECT_PARENT table.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.SecuredObjectRelation.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.SecuredObjectRelation.#ctor(System.Guid,System.Guid)">
            <summary>
            Initialization constructor.
            </summary>
        </member>
        <member name="F:Oculus.Security.DataObjects.SecuredObjectRelation.m_childId">
            <summary>
            Data member id
            </summary>
        </member>
        <member name="F:Oculus.Security.DataObjects.SecuredObjectRelation.m_parentId">
            <summary>
            Data member type id
            </summary>
        </member>
        <member name="P:Oculus.Security.DataObjects.SecuredObjectRelation.ChildId">
            <summary>
            Member property for the child id
            </summary>
        </member>
        <member name="P:Oculus.Security.DataObjects.SecuredObjectRelation.ParentId">
            <summary>
            Member property for the parent id
            </summary>
        </member>
        <member name="T:Oculus.Security.DataObjects.User">
            <summary>
            Represents a user in the security database (i.e. data from the SEC_LOGON_OBJECT table)
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.User.#ctor">
            <summary>
            Create a user object
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.User.#ctor(System.Guid,System.String,System.Guid)">
            <summary>
            Create a user object with all parameters
            </summary>
            <param name="id">The id</param>
            <param name="name">The friendly name</param>
            <param name="authenticationProviderId">The Authentication Provider Id </param>
        </member>
        <member name="P:Oculus.Security.DataObjects.User.PassHash">
            <summary>
            Member property for the password hash
            </summary>
        </member>
        <member name="P:Oculus.Security.DataObjects.User.LastLogon">
            <summary>
            Member property for the last logon
            </summary>
        </member>
        <member name="P:Oculus.Security.DataObjects.User.PassCreated">
            <summary>
            Member property for the last logon
            </summary>
        </member>
        <member name="P:Oculus.Security.DataObjects.User.AuthenticationProviderId">
            <summary>
            Member property for the authentication provider id
            </summary>
        </member>
        <member name="P:Oculus.Security.DataObjects.User.IsWinLoginOk">
            <summary>
            Returns true if the user can use a windows login, false if not.
            </summary>
        </member>
        <member name="M:Oculus.Security.DataObjects.User.ToSecuredObject">
            <summary>
            Helper method converting a user object into a secured object
            </summary>
            <returns>The secured object representation of the user</returns>
        </member>
        <member name="T:Oculus.Security.Access">
            <summary>
            Contains the different kinds of direct access that may be specified against a permission trio
            (requestor + target + right).
            </summary>
        </member>
        <member name="F:Oculus.Security.Access.Deny">
            <summary>
            Explicitly denies access to the specified resource
            </summary>
        </member>
        <member name="F:Oculus.Security.Access.Grant">
            <summary>
            Grants access on the specified resource
            </summary>
        </member>
        <member name="F:Oculus.Security.Access.None">
            <summary>
            Signifies that no relationship has been specified
            </summary>
        </member>
        <member name="T:Oculus.Security.AuthenticationModeException">
            <summary>
            This class represents an attempt to authenticate a user in an incorrect fashion. An example
            of this would be an attempt to authenticate via a windows principal when the particular user
            has been specified as authenticating through oculus.
            </summary>
        </member>
        <member name="M:Oculus.Security.AuthenticationModeException.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.Security.AuthenticationModeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="T:Oculus.Security.SecuredObjectUnknownException">
            <summary>
            This class represents an attempt to access an object in the security database which does 
            not exist.
            </summary>
        </member>
        <member name="M:Oculus.Security.SecuredObjectUnknownException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Oculus.Security.SecuredObjectUnknownException.#ctor(System.String,System.Guid)">
            <summary>
            Create the exception against the particular id which could not be found.
            </summary>
            <param name="objectName">The name of the unknown object</param>
            <param name="objectType">The type of the unknown object</param>
        </member>
        <member name="M:Oculus.Security.SecuredObjectUnknownException.#ctor(System.Guid)">
            <summary>
            Create the exception against the particular id which could not be found.
            </summary>
            <param name="objectId">The unknown object id</param>
        </member>
        <member name="M:Oculus.Security.SecuredObjectUnknownException.#ctor(System.String)">
            <summary>
            Create the exception against the particular name which could not be found.
            </summary>
            <param name="objectName">The unknown object name</param>
        </member>
        <member name="M:Oculus.Security.SecuredObjectUnknownException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="M:Oculus.Security.SecuredObjectUnknownException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override to handle serialization
            </summary>
            <param name="info">serialization info</param>
            <param name="context">serialization context</param>
        </member>
        <member name="T:Oculus.Security.SessionInvalidException">
            <summary>
            Exception which represents a situation where a session id is either unknown or expired
            </summary>
        </member>
        <member name="F:Oculus.Security.SessionInvalidException.m_sessionId">
            <summary>
            Contains the invalid session id
            </summary>
        </member>
        <member name="M:Oculus.Security.SessionInvalidException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Security.SessionInvalidException.#ctor(System.Guid)">
            <summary>
            Exception with the invalid session id
            </summary>
            <param name="sessionId">The invalid session id</param>
        </member>
        <member name="M:Oculus.Security.SessionInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="M:Oculus.Security.SessionInvalidException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override to handle serialization
            </summary>
            <param name="info">serialization info</param>
            <param name="context">serialization context</param>
        </member>
        <member name="T:Oculus.Security.ProviderUnknownException">
            <summary>
            This class represents an attempt to access a provider object in the security database which does 
            not exist.
            </summary>
        </member>
        <member name="M:Oculus.Security.ProviderUnknownException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Oculus.Security.ProviderUnknownException.#ctor(System.Guid)">
            <summary>
            Create the exception against the particular id which could not be found.
            </summary>
            <param name="providerId">The unknown provider id</param>
        </member>
        <member name="M:Oculus.Security.ProviderUnknownException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="M:Oculus.Security.ProviderUnknownException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override to handle serialization
            </summary>
            <param name="info">serialization info</param>
            <param name="context">serialization context</param>
        </member>
        <member name="T:Oculus.Security.SecurityException">
            <summary>
            Custom security exception class indicating a violation of security in either roles or rights.
            </summary>
        </member>
        <member name="F:Oculus.Security.SecurityException.m_username">
            <summary>
            The username associated with the exception
            </summary>
        </member>
        <member name="F:Oculus.Security.SecurityException.m_userId">
            <summary>
            The user id associated with the exception
            </summary>
        </member>
        <member name="F:Oculus.Security.SecurityException.m_operation">
            <summary>
            The operation which resulted in the exception
            </summary>
        </member>
        <member name="M:Oculus.Security.SecurityException.#ctor">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="M:Oculus.Security.SecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="M:Oculus.Security.SecurityException.#ctor(System.String,System.Guid,System.String)">
            <summary>
            Create a security exception object with the default parameters
            </summary>
            <param name="username">The name of the user who instigated the violation</param>
            <param name="userId">The id of the user who instigated the violation</param>
            <param name="operation">The operation which raise the error</param>
        </member>
        <member name="M:Oculus.Security.SecurityException.#ctor(System.String)">
            <summary>
            Create a security exception object with the default parameters
            </summary>
            <param name="operation">The operation which raise the error</param>
        </member>
        <member name="P:Oculus.Security.SecurityException.Username">
            <summary>
            Get the username
            </summary>
        </member>
        <member name="P:Oculus.Security.SecurityException.UserId">
            <summary>
            Get the user's id
            </summary>
        </member>
        <member name="P:Oculus.Security.SecurityException.Operation">
            <summary>
            Get the operation performed
            </summary>
        </member>
        <member name="M:Oculus.Security.SecurityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Override to handle serialization
            </summary>
            <param name="info">serialization info</param>
            <param name="context">serialization context</param>
        </member>
        <member name="P:Oculus.Security.SecurityException.Message">
            <summary>
            Returns a message for this exception
            </summary>
        </member>
        <member name="T:Oculus.Security.SecurityInvalidActionException">
            <summary>
            This class represents an attempt to authenticate a user in an incorrect fashion. An example
            of this would be an attempt to authenticate via a windows principal when the particular user
            has been specified as authenticating through oculus.
            </summary>
        </member>
        <member name="M:Oculus.Security.SecurityInvalidActionException.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.Security.SecurityInvalidActionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="T:Oculus.Security.Interfaces.ISecurityStoreProvider">
            <summary>
            This interface represents a back-end authentication system for oculus. This provider
            is responsible for handling authentication and basic queries against a security store.
            </summary>
        </member>
        <member name="M:Oculus.Security.Interfaces.ISecurityStoreProvider.WhoIs(System.String,System.String,System.Boolean)">
            <summary>
            Performs an authentication against the provider with the username and password (+ metadata)
            and returns a value representing the user to the underlying system. This will most likely 
            be a unique id.
            </summary>
            <param name="username">
            The friendly name of a user, i.e. the username for a username/password combo
            </param>
            <param name="password">The password for the user</param>
            <returns>
            The id of the user, if it exists in the plugin and the password/metadata is correct, 
            null or empty string if it not
            </returns>
        </member>
        <member name="T:Oculus.Security.NamedItem">
            <summary>
            This is a helper class used in the authentication provider for passing information
            back regarding users, groups, etc.
            </summary>
        </member>
        <member name="M:Oculus.Security.NamedItem.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.Security.NamedItem.#ctor(System.String,System.Guid)">
            <summary>
            Creates an instance of the object with populated name and id.
            </summary>
        </member>
        <member name="F:Oculus.Security.NamedItem.m_name">
            <summary>
            The friendly name of the group
            </summary>
        </member>
        <member name="F:Oculus.Security.NamedItem.m_id">
            <summary>
            The unique id of the group
            </summary>
        </member>
        <member name="P:Oculus.Security.NamedItem.Id">
            <summary>
            Get or set the id for this item.
            </summary>
        </member>
        <member name="P:Oculus.Security.NamedItem.Name">
            <summary>
            Get or set the name for this item.
            </summary>
        </member>
        <member name="T:Oculus.Security.Providers.ADProvider">
            <summary>
            Active directory provider implementation.
            </summary>
        </member>
        <member name="M:Oculus.Security.Providers.ADProvider.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="F:Oculus.Security.Providers.ADProvider.ProviderTypeId">
            <summary>
            The provider id for AD
            </summary>
        </member>
        <member name="M:Oculus.Security.Providers.ADProvider.WhoIs(System.String,System.String,System.Boolean)">
            <summary>
            Verifies the user login. Please note calling this method sets the WindowsImpersonationContext
            on the current context. If/when AD is configured to run under a specific user, that user's 
            credentials should be supplied for this method, and the impersonation context removed within this
            call.
            </summary>
            <param name="logonName">The user logon name</param>
            <param name="password">The password</param>
            <returns>The name of the user</returns>
        </member>
        <member name="T:Oculus.Security.Providers.NativeProvider">
            <summary>
            This class is the native oculus provider linked into the security database. It handles all 
            generalised functionality for dealing with authentication, etc.
            </summary>
        </member>
        <member name="M:Oculus.Security.Providers.NativeProvider.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="F:Oculus.Security.Providers.NativeProvider.ProviderTypeId">
            <summary>
            The internal database id for this provider
            </summary>
        </member>
        <member name="M:Oculus.Security.Providers.NativeProvider.GetMD5HashBase64(System.String)">
            <summary>
            Computes an MD5 hash for login. This is compatible with Oculus 8 password hashing.
            </summary>
            <param name="value">The string to hash</param>
            <returns>The hash for the string</returns>
        </member>
        <member name="M:Oculus.Security.Providers.NativeProvider.DecodeStringCompat(System.Byte[])">
            <summary>
            This method exists b/c .NET 1.1 handles string decoding differently than .NET 2.0, and
            we need to be able to authenticate the old Oculus 8 users with this same method, so the 
            hash has to be computed identically.  This method mimics the decoding of a byte array
            in the .NET 1.1 ASCIIEncoding class.
            </summary>
            <param name="buf">The byte array to convert</param>
            <returns>The decoded string</returns>
        </member>
        <member name="M:Oculus.Security.Providers.NativeProvider.HashUserPassword(System.Guid,System.String)">
            <summary>
            Given the user id and password, generates the hash that is used to compare for logins.
            </summary>
            <param name="userId">The system id of the user</param>
            <param name="password">The password to hash</param>
            <returns>A hash for the user's password</returns>
        </member>
        <member name="M:Oculus.Security.Providers.NativeProvider.WhoIs(System.String,System.String,System.Boolean)">
            <summary>
            Performs a login against the username and returns the user id if the login is successful
            or null if it is not. Please note this method WILL NOT update the LAST_LOGIN field.
            </summary>
            <param name="logonName">The logon name for the user</param>
            <param name="password">The password for the user</param>
            <returns>The user id if the name exists, otherwise null</returns>
        </member>
        <member name="T:Oculus.Security.SecConvert">
            <summary>
            Helper class responsible for conversions inside the security library
            </summary>
        </member>
        <member name="M:Oculus.Security.SecConvert.ToNamedItemCollection(Oculus.Security.DataObjects.Collections.SecuredObjectCollection)">
            <summary>
            Converts a secured object collection to a named item collection
            </summary>
            <param name="value">The object to convert</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:Oculus.Security.SecConvert.ToGuidArray(Oculus.Security.DataObjects.Collections.SecuredObjectCollection)">
            <summary>
            Converts a secured object collection to a list of Guids (Id values)
            </summary>
            <param name="value">The object to convert</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:Oculus.Security.SecConvert.ToDictionary(Oculus.Security.DataObjects.Collections.SecuredObjectCollection)">
            <summary>
            Converts a list of secured objects to an id-indexed dictionary.
            </summary>
            <param name="value">The object to convert</param>
            <returns>The converted object</returns>
        </member>
        <member name="T:Oculus.Security.SecurityExceptionNotifier">
            <summary>
            
            </summary>
        </member>
        <member name="E:Oculus.Security.SecurityExceptionNotifier.SecurityViolation">
            <summary>
            When fired, uses Oculus.Security.SecurityException object as source parameter.
            </summary>
        </member>
        <member name="M:Oculus.Security.SecurityExceptionNotifier.NotifySecurityViolation(Oculus.Security.SecurityException)">
            <summary>
            Method which raises the static event for a security exception encountered in the security system.
            </summary>
            <param name="ex">The exception raised.</param>
        </member>
        <member name="T:Oculus.Security.SecurityManager">
            <summary>
            This class is responsible for serving as the public face to the internal security system. The gamut
            of public security functions are available through this class.
            
            This class is designed specifically for SINGLE CALL remoting.  Don't put any state in this class or
            it'll mess everything up.
            </summary>
        </member>
        <member name="M:Oculus.Security.SecurityManager.#ctor">
            <summary>
            Default empty constructor
            </summary>
        </member>
        <member name="M:Oculus.Security.SecurityManager.Authenticate(System.Security.Principal.WindowsPrincipal)">
            <summary>
            Performs a verification against ActiveDirectory and ensures the user can log in using windows authentication.
            </summary>
            <param name="windowsPrinciple">The principal for the current windows user</param>
            <returns>A workflow principle representing the login</returns>
            <exception cref="T:Oculus.Security.AuthenticationModeException">If the specified user is not allowed to log in via windows</exception>
        </member>
        <member name="M:Oculus.Security.SecurityManager.Authenticate(System.String,System.String,System.Boolean)">
            <summary>
            Performs a login for the specified user.
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
            <returns>A workflow principle representing the login - will be null if authentication failed.</returns>
        </member>
        <member name="M:Oculus.Security.SecurityManager.DemandPermission(System.Guid,System.Guid)">
            <summary>
            Checks to see if the user associated with the session has the specified right against
            the target object and raises an exception if the user DOES NOT
            </summary>
            <param name="targetObjectId">The object against which the user requires access</param>
            <param name="rightId">The id for the requested right</param>
            <exception cref="T:System.Security.SecurityException">If the user for the session does not have the specified right</exception>
        </member>
        <member name="M:Oculus.Security.SecurityManager.ExpireSession(System.Guid)">
            <summary>
            Expires the specified session (i.e. logout).
            </summary>
            <param name="sessionId">the session to expire</param>
        </member>
        <member name="M:Oculus.Security.SecurityManager.GetObjectsByPermissionAndType(System.Guid,System.Guid)">
            <summary>
            Retrieves a list of all objects for the particular type to which the user with the specified 
            session id has access.
            </summary>
            <param name="objectTypeId">The object type id to use in the retrieval</param>
            <param name="rightId">The particular right to use in the retrieval</param>
            <returns>A list of ids which match the search criteria (will be zero-length, not null, if there are none)</returns>
        </member>
        <member name="M:Oculus.Security.SecurityManager.GetActorObjectsByPermissionAndType(System.Guid,System.Guid,System.Guid)">
            <summary>
            Retrieves a list of all objects for the particular type to which the actor has access.
            </summary>
            <param name="actorId">The actor id to check</param>
            <param name="objectTypeId">The object type id to use in the retrieval</param>
            <param name="rightId">The particular right to use in the retrieval</param>
            <returns>A list of ids which match the search criteria (will be zero-length, not null, if there are none)</returns>
        </member>
        <member name="M:Oculus.Security.SecurityManager.GetPrincipal(System.Guid)">
            <summary>
            Retrieves the principal object associated with the specific session id.
            </summary>
            <param name="sessionId">The session id for the login</param>
            <returns>The principal object</returns>
        </member>
        <member name="M:Oculus.Security.SecurityManager.HasPermission(System.Guid,System.Guid)">
            <summary>
            Checks to see if the user associated with the session has the specified right against
            the target object. In the interest of performance, this method DOES NOT verify the existence 
            of the right or the target object.
            </summary>
            <param name="targetObjectId">The object against which the user requires access</param>
            <param name="rightId">The id for the requested right</param>
            <returns>True if the user has the requested access, false if not</returns>
        </member>
        <member name="M:Oculus.Security.SecurityManager.ActorHasPermission(System.Guid,System.Guid,System.Guid)">
            <summary>
            Checks to see if the actor has the specified right against
            the target object. In the interest of performance, this method DOES NOT verify the existence 
            of the right or the target object.
            </summary>
            <param name="actorId">The actor id</param>
            <param name="targetObjectId">The object against which the user requires access</param>
            <param name="rightId">The id for the requested right</param>
            <returns>True if the user has the requested access, false if not</returns>
        </member>
        <member name="M:Oculus.Security.SecurityManager.VerifySession(System.Guid)">
            <summary>
            Verifies the session id is associated with a valid login.
            </summary>
            <param name="sessionId">The session id to check</param>
        </member>
        <member name="M:Oculus.Security.SecurityManager.VerifySession">
            <summary>
            Verifies the current session id (as assigned to the current oculus principal) is associated with a valid login.
            </summary>
        </member>
        <member name="M:Oculus.Security.SecurityManager.GetUserSecurityProvider(System.String)">
            <summary>
            this method returns the appropriate provider id for the user
            </summary>
            <param name="userName">the user</param>
            <returns>the provider id</returns>
        </member>
        <member name="T:Oculus.Security.Constants">
            <summary>
            Constants for imaging security, also provides static access to all standard rights and types
            </summary>
        </member>
        <member name="M:Oculus.Security.Constants.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="F:Oculus.Security.Constants.Use">
            <summary>The permission name for Use</summary>
        </member>
        <member name="F:Oculus.Security.Constants.Edit">
            <summary>The permission name for Edit</summary>
        </member>
        <member name="F:Oculus.Security.Constants.Add">
            <summary>The permission name for Add</summary>
        </member>
        <member name="F:Oculus.Security.Constants.Delete">
            <summary>The permission name for Delete</summary>
        </member>
        <member name="F:Oculus.Security.Constants.View">
            <summary>The permission name for View</summary>
        </member>
        <member name="F:Oculus.Security.Constants.DirectAdd">
            <summary>The permission name for AddDirect</summary>
        </member>
        <member name="F:Oculus.Security.Constants.Search">
            <summary>The permission name for Search</summary>
        </member>
        <member name="F:Oculus.Security.Constants.Profile">
            <summary>The type name for profile</summary>
        </member>
        <member name="F:Oculus.Security.Constants.Application">
            <summary>The type name for an app</summary>
        </member>
        <member name="F:Oculus.Security.Constants.Queue">
            <summary>The type name for queues</summary>
        </member>
        <member name="F:Oculus.Security.Constants.User">
            <summary>The type name for users</summary>
        </member>
        <member name="F:Oculus.Security.Constants.Group">
            <summary>The type name for groups</summary>
        </member>
        <member name="F:Oculus.Security.Constants.AdminstratorGroupId">
            <summary>
            The id of the Administrators group
            </summary>
        </member>
        <member name="P:Oculus.Security.Constants.Rights">
            <summary>
            Gets the static collection of rights
            </summary>
        </member>
        <member name="P:Oculus.Security.Constants.Types">
            <summary>
            Gets the static collection of types
            </summary>
        </member>
        <member name="T:Oculus.Util.Collections.BaseVolatileList`1">
            <summary>
            Handles volatile lists and raising events
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.BaseVolatileList`1.#ctor">
            <summary>
            Initializes a new instance of the ImageList class.
            </summary>
        </member>
        <member name="E:Oculus.Util.Collections.BaseVolatileList`1.Change">
            <summary>Fires whenever the list changes, look at the event args to find out the exact operation</summary>
        </member>
        <member name="P:Oculus.Util.Collections.BaseVolatileList`1.Count">
            <summary>
            Get the number of images in the list
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.BaseVolatileList`1.Item(System.Int32)">
            <summary>
            Retrieve the item at the index
            </summary>
            <param name="index">The index of the item</param>
            <returns>The list item</returns>
        </member>
        <member name="M:Oculus.Util.Collections.BaseVolatileList`1.RaiseChange(System.Int32,Oculus.Util.Collections.ListOperation,`0)">
            <summary>
            Raises the change event
            </summary>
            <param name="index">The item index to which the change applies</param>
            <param name="op">The operation performed</param>
            <param name="tag">The tag for the operation</param>
        </member>
        <member name="M:Oculus.Util.Collections.BaseVolatileList`1.AddRange(`0[])">
            <summary>
            Appends the file paths to the end of the list
            </summary>
            <param name="listItems">The list of images to add</param>
        </member>
        <member name="M:Oculus.Util.Collections.BaseVolatileList`1.AddRange(Oculus.Util.Collections.BaseVolatileList{`0})">
            <summary>
            Appends the file paths to the end of the list
            </summary>
            <param name="listItems">The list of images to add</param>
        </member>
        <member name="M:Oculus.Util.Collections.BaseVolatileList`1.Add(`0)">
            <summary>
            Appends a single item to the end of the list
            </summary>
            <param name="listItem">The item</param>
        </member>
        <member name="M:Oculus.Util.Collections.BaseVolatileList`1.Insert(System.Int32,`0)">
            <summary>
            Insert the item at the specified location
            </summary>
            <param name="index">The item index</param>
            <param name="listItem">The item to add to the list</param>
        </member>
        <member name="M:Oculus.Util.Collections.BaseVolatileList`1.ReplaceAt(System.Int32,`0)">
            <summary>
            Replace the item at the specified index
            </summary>
            <param name="index">The item index</param>
            <param name="listItem">The path to the item</param>
        </member>
        <member name="M:Oculus.Util.Collections.BaseVolatileList`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified index
            </summary>
            <param name="index">The item index</param>
        </member>
        <member name="M:Oculus.Util.Collections.BaseVolatileList`1.Clear">
            <summary>
            Clears the list of items
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.BaseVolatileList`1.IndexOf(`0)">
            <summary>
            Finds the location of the item based on reference comparisons. (uses Object.Equals)
            </summary>
            <param name="listItem">The item to find. Cannot be null.</param>
            <returns>The index of the item, or -1 if it's not there</returns>
        </member>
        <member name="M:Oculus.Util.Collections.BaseVolatileList`1.BaseVolatileListEnumerator`1.Dispose">
            <summary>
            Frees resources
            </summary>
        </member>
        <member name="T:Oculus.Util.Collections.List`1">
            <summary>
            This is a utility class that allows generic list types to be serialized. Please note instances of this 
            class ARE NOT serializable, but any subclasses bound to a specific type will be. Any sub-class 
            MUST include a constructor signature identical to the SerializationInfo, StreamingContext constructor,
            and must call the base class constructor with the same signature.
            </summary>
            <typeparam name="T1">The contained type in the list</typeparam>
        </member>
        <member name="M:Oculus.Util.Collections.List`1.#ctor">
            <summary>
            Default public constructor.
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calles the base contructor with the enumarable items
            </summary>
            <param name="items">the source items to populate with</param>
        </member>
        <member name="M:Oculus.Util.Collections.List`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Mandatory constructor for ISerializable
            </summary>
            <param name="info">Contains our serialized data</param>
            <param name="context">Ignored</param>
        </member>
        <member name="M:Oculus.Util.Collections.List`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Convert our generic types into standard array lists so SoapFormatter
            can handle them.
            </summary>
            <param name="info">Contains data</param>
            <param name="context">Ignored</param>
        </member>
        <member name="M:Oculus.Util.Collections.List`1.Clone">
            <summary>
            Creates an identical list to the current list. This is a shallow clone.
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="M:Oculus.Util.Collections.List`1.GetElementType">
            <summary>
            Gets the element type for the list
            </summary>
            <returns>The element type</returns>
        </member>
        <member name="T:Oculus.Util.Collections.Dictionary`2">
            <summary>
            This is a utility class that allows generic dictionary types to be serialized. Please note instances of this 
            class ARE NOT serializable, but any subclasses bound to a specific type will be. Any sub-class 
            MUST include a constructor signature identical to the SerializationInfo, StreamingContext constructor,
            and must call the base class constructor with the same signature.
            </summary>
            <typeparam name="T1">The key type</typeparam>
            <typeparam name="T2">The value type</typeparam>
        </member>
        <member name="M:Oculus.Util.Collections.Dictionary`2.#ctor">
            <summary>
            Default public constructor.
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Mandatory constructor for ISerializable
            </summary>
            <param name="info">Contains our serialized data</param>
            <param name="context">Ignored</param>
        </member>
        <member name="M:Oculus.Util.Collections.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Convert our generic types into standard array lists so SoapFormatter
            can handle them. Please note this ONLY serialises the key/value pairs.
            </summary>
            <param name="info">Contains data</param>
            <param name="context">Ignored</param>
        </member>
        <member name="M:Oculus.Util.Collections.Dictionary`2.Clone">
            <summary>
            Creates a shallow clone of this object (all values/keys are referenced, just returns a new
            version of this same dictionary). This will be typed to the subclass.
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Util.Collections.GuidList">
            <summary>
            Guid-indexed dictionary of objects
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.GuidList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Util.Collections.GuidList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Util.Collections.GuidDictionary">
            <summary>
            Guid-indexed dictionary of objects
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.GuidDictionary.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Util.Collections.GuidDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Util.Collections.KeyChangedEventArgs`1">
            <summary>
            Contains the event arguments for volatile object events. This should only be fired AFTER the
            key has actually changed on the object.
            </summary>
            <typeparam name="TKey">The type for the item's key</typeparam>
        </member>
        <member name="M:Oculus.Util.Collections.KeyChangedEventArgs`1.#ctor">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.KeyChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Serialization constructor
            </summary>
            <param name="oldValue">The old value of the property</param>
            <param name="newValue">The new value for the key</param>
        </member>
        <member name="F:Oculus.Util.Collections.KeyChangedEventArgs`1.m_oldKeyValue">
            <summary>
            Contains the old value for the key
            </summary>
        </member>
        <member name="F:Oculus.Util.Collections.KeyChangedEventArgs`1.m_newKeyValue">
            <summary>
            Contains the new value for the key
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.KeyChangedEventArgs`1.OldKeyValue">
            <summary>
            Gets the old value of the object's key
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.KeyChangedEventArgs`1.NewKeyValue">
            <summary>
            Gets the new value of the object's key
            </summary>
        </member>
        <member name="T:Oculus.Util.Collections.KeyChangedEventHandler`1">
            <summary>
            Delegates which handle volatile object events
            </summary>
            <typeparam name="TKey">The type for the key</typeparam>
            <param name="sender">The volatile object</param>
            <param name="e">The arguments, which include information about the changed properties</param>
        </member>
        <member name="T:Oculus.Util.Collections.IVolatileObject`1">
            <summary>
            Interface indicating an object which changes and will raise an event when it changes
            </summary>
            <typeparam name="TKey">The key type for the object</typeparam>
        </member>
        <member name="E:Oculus.Util.Collections.IVolatileObject`1.Changed">
            <summary>
            Indicates a change in the object
            </summary>
        </member>
        <member name="E:Oculus.Util.Collections.IVolatileObject`1.KeyChanged">
            <summary>
            Indicates a change in the object key (as determined by the object itself)
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.IVolatileObject`1.Key">
            <summary>
            Returns the object's key value
            </summary>
        </member>
        <member name="T:Oculus.Util.Collections.KeyValueCollection">
            <summary>
            A collection of items indexed by string or index
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.KeyValueCollection.Add(System.String,System.Object)">
            <summary>
            Adds an item with the specified key
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Oculus.Util.Collections.KeyValueCollection.Delete(System.String)">
            <summary>
            Deletes the object with the specified key from the collection
            </summary>
            <param name="key">The key to delete</param>
        </member>
        <member name="M:Oculus.Util.Collections.KeyValueCollection.Clear">
            <summary>
            Clears the entire collection
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.KeyValueCollection.Item(System.Int32)">
            <summary>
            Gets the object at the specified index
            </summary>
            <param name="index">The index to retrieve</param>
            <returns>The object for the index</returns>
        </member>
        <member name="P:Oculus.Util.Collections.KeyValueCollection.Item(System.String)">
            <summary>
            Gets the object for the specified key
            </summary>
            <param name="name">The key to use</param>
            <returns>The object for the key</returns>
        </member>
        <member name="M:Oculus.Util.Collections.KeyValueCollection.GetItem``1(System.String,``0)">
            <summary>
            Gets a specific item from the collection, allows you to specify a default value
            to use if the associated value for the key does not exist or is null
            </summary>
            <typeparam name="T">The type of object you're retrieving</typeparam>
            <param name="key">The key to use</param>
            <param name="defaultValue">The default value to use if the value for the key is null</param>
            <returns>The value for the key, or the default value if the value doesn't exist</returns>
        </member>
        <member name="T:Oculus.Util.Collections.StringDictionary">
            <summary>
            A string indexed dictionary of objects
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.StringDictionary.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Util.Collections.StringDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Util.Collections.StringList">
            <summary>
            A generic list of strings
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.StringList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Util.Collections.StringList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Util.Collections.TypeList">
            <summary>
            Collection of types
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.TypeList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Util.Collections.TypeList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Util.Collections.Interfaces.IGeneric">
            <summary>
            Interface used to designate certain types for special serialization in our collection
            classes.
            </summary>
        </member>
        <member name="T:Oculus.Util.Collections.BindableListChangedEventArgs`1">
            <summary>
            Custom event args which contain more info than in the base class
            </summary>
            <typeparam name="TObject">The object type for the list</typeparam>
        </member>
        <member name="M:Oculus.Util.Collections.BindableListChangedEventArgs`1.#ctor(`0[],System.ComponentModel.ListChangedType,System.Int32)">
            <summary>
            
            </summary>
            <param name="changedItems"></param>
            <param name="lct"></param>
            <param name="newIndex"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableListChangedEventArgs`1.#ctor(`0[],System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
            <summary>
            
            </summary>
            <param name="changedItems"></param>
            <param name="lct"></param>
            <param name="propDesc"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableListChangedEventArgs`1.#ctor(`0[],System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="changedItems"></param>
            <param name="lct"></param>
            <param name="newIndex"></param>
            <param name="oldIndex"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableListChangedEventArgs`1.#ctor(`0[],System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
            <summary>
            
            </summary>
            <param name="changedItems"></param>
            <param name="lct"></param>
            <param name="newIndex"></param>
            <param name="propDesc"></param>
        </member>
        <member name="P:Oculus.Util.Collections.BindableListChangedEventArgs`1.ChangedItems">
            <summary>
            Gets the list of items which were the targets of the change operation
            </summary>
        </member>
        <member name="T:Oculus.Util.Collections.BindableList`2">
            <summary>
            bindable list used in the grid control as a dataset
            </summary>
            <typeparam name="TObject">The actual object type</typeparam>
            <typeparam name="TKey">The key type for the object</typeparam>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.#ctor">
            <summary>
            Default public constructor.
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Mandatory constructor for ISerializable
            </summary>
            <param name="info">Contains our serialized data</param>
            <param name="context">Ignored</param>
        </member>
        <member name="E:Oculus.Util.Collections.BindableList`2.ListChanged">
            <summary>
            Fires when there's a change in its list
            </summary>
        </member>
        <member name="E:Oculus.Util.Collections.BindableList`2.ListItemChanged">
            <summary>
            Fires when a volatile object was changed
            </summary>
        </member>
        <member name="E:Oculus.Util.Collections.BindableList`2.ListItemKeyChanged">
            <summary>
            Fires when a volatile object's key was changed
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.BindableList`2.AllowEdit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.BindableList`2.AllowNew">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.BindableList`2.AllowRemove">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.BindableList`2.IsSorted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.BindableList`2.SortDirection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.BindableList`2.SortProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.BindableList`2.SupportsChangeNotification">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.BindableList`2.SupportsSearching">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.BindableList`2.SupportsSorting">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.OnListChanged(Oculus.Util.Collections.BindableListChangedEventArgs{`0})">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.OnListItemChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.OnListItemKeyChanged(System.Object,Oculus.Util.Collections.KeyChangedEventArgs{`1})">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.GetNewItem">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.AddNew">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.RemoveSort">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="collection"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.RemoveAll(System.Predicate{`0})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.RemoveRange(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:Oculus.Util.Collections.BindableList`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Convert our generic types into standard array lists so SoapFormatter
            can handle them.
            </summary>
            <param name="info">Contains data</param>
            <param name="context">Ignored</param>
        </member>
        <member name="T:Oculus.Util.Collections.ListOperation">
            <summary>
            Represents the various operations that can be done against an image list,
            used in raising events
            </summary>
        </member>
        <member name="F:Oculus.Util.Collections.ListOperation.Clear">
            <summary>When the list is cleared</summary>
        </member>
        <member name="F:Oculus.Util.Collections.ListOperation.Append">
            <summary>When an item is appended to the list</summary>
        </member>
        <member name="F:Oculus.Util.Collections.ListOperation.Insert">
            <summary>When an item is inserted in the list</summary>
        </member>
        <member name="F:Oculus.Util.Collections.ListOperation.Remove">
            <summary>When an item is removed from the list</summary>
        </member>
        <member name="F:Oculus.Util.Collections.ListOperation.Replace">
            <summary>When one item in the list is replaced with another</summary>
        </member>
        <member name="T:Oculus.Util.Collections.ListEventArgs">
            <summary>
            the args the is used when you click on a tree item
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.ListEventArgs.#ctor(System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="index">the index to which the args apply</param>
        </member>
        <member name="P:Oculus.Util.Collections.ListEventArgs.Operation">
            <summary>
            Get/set the operation for the event args
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.ListEventArgs.Index">
            <summary>
            Get/set the image index for the event args
            </summary>
        </member>
        <member name="P:Oculus.Util.Collections.ListEventArgs.Tag">
            <summary>
            Get/set the tag for the event args
            </summary>
        </member>
        <member name="T:Oculus.Util.Collections.ListEventHandler">
            <summary>
            the delegate for thumnailviewer item click
            </summary>
            <param name="sender">the sender treeitem</param>
            <param name="e">the TreeItemEventArgs with the result or not</param>
        </member>
        <member name="T:Oculus.Util.Collections.BlockingQueue">
            <summary>
            Same as Queue except Dequeue function blocks until there is
            an object to return.
            Note: This class does not need to be synchronized
            code taken from http://www.eggheadcafe.com/articles/20060414.asp
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.BlockingQueue.Clear">
            <summary>
            Remove all objects from the Queue.
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.BlockingQueue.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the Queue.
            </summary>
            <returns>Object in queue.</returns>
        </member>
        <member name="M:Oculus.Util.Collections.BlockingQueue.Enqueue(System.Object)">
            <summary>
            Adds an object to the end of the Queue.
            </summary>
            <param name="obj">Object to put in queue</param>
        </member>
        <member name="T:Oculus.Util.Collections.DrawableList">
            <summary>
            List of drawable objects
            </summary>
        </member>
        <member name="M:Oculus.Util.Collections.DrawableList.Draw(System.Drawing.Graphics)">
            <summary>
            Draws all the items in the list
            </summary>
            <param name="g">The graphics to draw against</param>
        </member>
        <member name="T:Oculus.Util.Utility">
            <summary>
            contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Util.Utility.GetResourceXml(System.Type,System.String)">
            <summary>
            Get the xml for a particular resource
            </summary>
            <param name="typeInAssembly">A type in the assembly where the file is</param>
            <param name="fullyQualifiedFileName">The fully qualified name of the resource</param>
            <returns>The resource as an xml document</returns>
        </member>
        <member name="M:Oculus.Util.Utility.GetTransformFromAssembly(System.String,System.Reflection.Assembly)">
            <summary>
             Retrieves an XSLT from a resource in an assembly (i.e. XSLT in project is included as embedded resource)
            </summary>
            <param name="xsltResourceName">
             The resource name of the XSLT. This will generally be the filename.
            </param>
            <param name="assembly">
             The assembly in which the resource exists.
            </param>
            <exception cref="T:System.ArgumentException">If the resource name is invalid</exception>
        </member>
        <member name="M:Oculus.Util.Utility.Transform(System.Xml.Xsl.XslCompiledTransform,System.Xml.XmlDocument)">
            <summary>
            Runs the transform against the specified document, returns the result as an xml document.
            </summary>
            <param name="transform">The transform to run, cannot be null</param>
            <param name="inputDocument">The document for input, cannot be null</param>
            <returns>The resultant document</returns>
        </member>
        <member name="M:Oculus.Util.Utility.Transform(System.Xml.Xsl.XslCompiledTransform,System.Xml.XmlDocument,System.Xml.Xsl.XsltArgumentList)">
            <summary>
            Runs the transform against the specified document, returns the result as an xml document.
            </summary>
            <param name="transform">The transform to run, cannot be null</param>
            <param name="inputDocument">The document for input, cannot be null</param>
            <param name="args">The args to use in the transform, can be null</param>
            <returns>The resultant document</returns>
        </member>
        <member name="M:Oculus.Util.Utility.GetCompatibleObject(System.Type,System.Object)">
            <summary>
            Attempts to convert (as necessary) the value to the target type
            </summary>
            <param name="targetType">The type we want</param>
            <param name="value">The value to convert</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:Oculus.Util.Utility.DeleteFileIfExists(System.String)">
            <summary>
            Deletes a file if it exists
            </summary>
            <param name="path">The path to check/delete</param>
        </member>
        <member name="M:Oculus.Util.Utility.TestRegularExpression(System.String,System.String)">
            <summary>
            Tests the value against the regular expression for a COMPLETE match
            </summary>
            <param name="regex">The regular expression to test</param>
            <param name="value">The value to test, if null, empty string is assumed</param>
            <returns>True if the value matches completely, false otherwise</returns>
        </member>
        <member name="M:Oculus.Util.Utility.NormalizeFilePath(System.String)">
            <summary>
            Automatically normalizes platform dependent directory separator characters 
            </summary>
            <param name="path">The path to normalize, as it would be on windows</param>
            <returns>The normalized path</returns>
        </member>
        <member name="T:Oculus.Util.Encryption">
            <summary>
            This contains settings for a virtual profile
            </summary>
        </member>
        <member name="M:Oculus.Util.Encryption.Decrypt(System.String)">
            <summary>
            Decrypts the specified string from a standard oculus encryption
            </summary>
            <param name="stringValue"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Util.Encryption.Encrypt(System.String)">
            <summary>
             Encrypts the selected text.
            </summary>
            <param name="value">
             The string to encrypt.
            </param>
            <returns>
             The encrypted text. Each byte is comma delimited.
            </returns>
        </member>
        <member name="T:Oculus.Util.Activation">
            <summary>
            Used to wrap reflection calls.
            </summary>
        </member>
        <member name="M:Oculus.Util.Activation.GetProperty(System.Object,System.String)">
            <summary>
            Gets the value of the property, calls all instance properties (non-indexed), regardless of protection level.
            </summary>
            <param name="obj">The object which has the property, cannot be null</param>
            <param name="propertyName">The name of the property, cannot be null</param>
            <returns>The value of the property</returns>
            <exception cref="T:System.ArgumentException">If the property is invalid or doesn't have a getter, or is indexed</exception>
        </member>
        <member name="M:Oculus.Util.Activation.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the property, calls all instance properties (non-indexed), regardless of protection level.
            </summary>
            <param name="obj">The object which has the property, cannot be null</param>
            <param name="propertyName">The name of the property, cannot be null</param>
            <param name="propertyValue">The value to use for the property</param>
            <returns>The value of the property</returns>
            <exception cref="T:System.ArgumentException">If the property is invalid or doesn't have a getter, or is indexed</exception>
        </member>
        <member name="M:Oculus.Util.Activation.GetField(System.Object,System.String)">
            <summary>
            Gets the value of the field, regardless of protection level.
            </summary>
            <param name="obj">The object which has the field, cannot be null</param>
            <param name="fieldName">The name of the field, cannot be null</param>
            <returns>The value of the field</returns>
            <exception cref="T:System.ArgumentException">If the field is invalid</exception>
        </member>
        <member name="M:Oculus.Util.Activation.SetField(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of the field, regardless of protection level.
            </summary>
            <param name="obj">The object which has the field, cannot be null</param>
            <param name="fieldName">The name of the field, cannot be null</param>
            <param name="fieldValue">The value to use for the field</param>
            <returns>The value of the field</returns>
            <exception cref="T:System.ArgumentException">If the field is invalid</exception>
        </member>
        <member name="M:Oculus.Util.Activation.RunMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the specified method against the object with the specified args.
            </summary>
            <param name="obj">The object which has the method, cannot be null</param>
            <param name="methodName">The method to call, cannot be null</param>
            <param name="args">The args to use when calling the method, these are not validated prior to making the call</param>
            <returns>The result of the method</returns>
        </member>
        <member name="M:Oculus.Util.Activation.CreateInstance(System.Type)">
            <summary>
            Creates the specified object using the empty constructor
            </summary>
            <param name="type">The type to create</param>
            <returns>The object instance</returns>
        </member>
        <member name="M:Oculus.Util.Activation.CreateInstance``1(System.Type)">
            <summary>
            Creates the specified object using the empty constructor
            </summary>
            <typeparam name="T">The type to cast the instance as</typeparam>
            <param name="type">The type to create</param>
            <returns>The object instance</returns>
        </member>
        <member name="M:Oculus.Util.Activation.CreateInstance``1">
            <summary>
            Creates the specified object using the empty constructor
            </summary>
            <typeparam name="T">The type to create</typeparam>
            <returns>The object instance</returns>
        </member>
        <member name="M:Oculus.Util.Activation.CreateInstance``1(System.String,System.Type)">
            <summary>
            Creates an instance of type T using the class name, if provided, or the default type.
            This is most often used in a case where a default type can be overridden by a user-
            specified one.
            </summary>
            <typeparam name="T">The instance type which the specified and/or default can be cast to</typeparam>
            <param name="typeName">
            The overriding type to use. If specified but cannot be loaded or cast to the required 
            type, an exception will be thrown
            </param>
            <param name="defaultType">The default type should the specified type be null/empty, cannot be null</param>
            <returns>An instance of the type</returns>
        </member>
        <member name="M:Oculus.Util.Activation.IsTypeWithinPublicKeys(System.Type,System.String[])">
            <summary>
            Returns true if the type is signed with one of the specified public keys.
            </summary>
            <param name="type">The type to check</param>
            <param name="publicKeyTokens">The public keys to check</param>
            <returns>True if the type is signed with one of the specified public keys, false otherwise</returns>
        </member>
        <member name="M:Oculus.Util.Activation.IsOculusType(System.Type)">
            <summary>
            Returns true if the type parameter is an oculus type (i.e. signed with
            the oculus key), false otherwise
            </summary>
            <param name="type">The type to verify</param>
            <returns>True if the type is an "oculus type", false otherwise</returns>
        </member>
        <member name="M:Oculus.Util.Activation.LoadType(System.String)">
            <summary>
            Loads the type object for the type specified in the argument. WILL RAISE AN EXCEPTION
            if the type cannot be loaded.
            </summary>
            <param name="typeName">The type name, should be fully qualified</param>
            <returns>The type object</returns>
        </member>
        <member name="T:Oculus.Util.Data.Utility">
            <summary>
            Contains utility methods for data classes
            </summary>
        </member>
        <member name="M:Oculus.Util.Data.Utility.IsNull(System.Object)">
            <summary>
            Returns true if the value is null OR DBNull.
            </summary>
            <param name="dbValue">The value to check</param>
            <returns>True if the value is null or DBNull, false otherwise</returns>
        </member>
        <member name="M:Oculus.Util.Data.Utility.DeNull(System.Object)">
            <summary>
            Converts db null to standard null.
            </summary>
            <param name="dbValue">The value to convert</param>
            <returns>the value, or null if it's db null</returns>
        </member>
        <member name="M:Oculus.Util.Data.Utility.GetDbBool(System.Object)">
            <summary>
            Calculates a boolean value from the parameter. Booleans aren't converted, ToString() values
            of "1", "TRUE", or "YES" are converted to "true".  All other values are false.
            </summary>
            <param name="value">The value to get a boolean for, cannot be null or DBNull</param>
            <returns>The boolean equivalent</returns>
        </member>
        <member name="M:Oculus.Util.Data.Utility.GetParameter(System.Data.Common.DbCommand,System.String)">
            <summary>
            Returns the parameter the specified name in the command.
            </summary>
            <param name="command">The command to check, cannot be null</param>
            <param name="paramName">The parameter name, cannot be null</param>
            <returns>The index of the parameter, or null if not found</returns>
        </member>
        <member name="T:Oculus.Util.Formatter">
            <summary>
            Contains helper methods for dealing with formatting.
            </summary>
        </member>
        <member name="M:Oculus.Util.Formatter.ComputeMD5Hash(System.String)">
            <summary>
            Computes and returns an MD5 hash of a string value, returned as a sequence of 
            concatenated byte values (e.g. 125132133...)
            </summary>
            <param name="valueToHash">The string value to hash</param>
            <returns>The hashed result</returns>
        </member>
        <member name="M:Oculus.Util.Formatter.ComputeMD5HashFromFile(System.String)">
            <summary>
            Computes and returns an MD5 hash of a file, returned as a sequence of 
            concatenated byte values (e.g. 125132133...)
            </summary>
            <param name="filePath">The path of the file to hash</param>
            <returns>The hashed result</returns>
        </member>
        <member name="M:Oculus.Util.Formatter.ComputeMD5Hash(System.Byte[])">
            <summary>
            Computes and returns an MD5 hash of a byte array, returned as a sequence of 
            concatenated byte values (e.g. 125132133...)
            </summary>
            <param name="hashData">The value to hash</param>
            <returns>The hashed result</returns>
        </member>
        <member name="M:Oculus.Util.Formatter.UriEncode(System.String)">
            <summary>
            Encodes the text in URI format
            </summary>
            <param name="uri">The uri to encode (escape)</param>
            <returns>The encoded value</returns>
        </member>
        <member name="M:Oculus.Util.Formatter.UriDecode(System.String)">
            <summary>
            Unescapes the text in URI format
            </summary>
            <param name="encodedUri">The uri to unescape</param>
            <returns>The decoded value</returns>
        </member>
        <member name="M:Oculus.Util.Formatter.GetExceptionString(System.Exception)">
            <summary>
            Retrieves a multiline exception message including all inner exception information
            for the exception provided.
            </summary>
            <param name="ex">The exception to query</param>
            <returns>The exception text</returns>
        </member>
        <member name="T:Oculus.Util.Serialization.Binary">
            <summary>
            Contains helper methods for working with binary serialization
            </summary>
        </member>
        <member name="M:Oculus.Util.Serialization.Binary.Serialize(System.Object)">
            <summary>
            Serialize object using the SoapFormatter to new stream.
            </summary>
            <param name="obj">the object to serialize</param>
            <returns>the resulting stream</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.Binary.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serialize object using the SoapFormatter to existing stream
            </summary>
            <param name="stream">the existing stream</param>
            <param name="obj">the object to serialize</param>
        </member>
        <member name="M:Oculus.Util.Serialization.Binary.GetSerializedBytes(System.Object)">
            <summary>
            Serializes the object to a byte array
            </summary>
            <param name="obj">The object to serialize</param>
        </member>
        <member name="M:Oculus.Util.Serialization.Binary.Deserialize(System.IO.Stream)">
            <summary>
            Oculus.Util.Serialization
            De-serialize object.
            </summary>
            <param name="stream">the stream to serialize to</param>
            <returns>Return object.</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.Binary.Deserialize(System.Byte[])">
            <summary>
            Deserializes the byte array into an object
            </summary>
            <param name="objectBytes">The serialized byte array</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="T:Oculus.Util.Serialization.Attributes.XmlEnumAsIntAttribute">
            <summary>
            Indicates the associated ENUM property value should be serialized as an int instead of the enum text.
            </summary>
        </member>
        <member name="M:Oculus.Util.Serialization.Attributes.XmlEnumAsIntAttribute.#ctor">
            <summary>
            Create a default instance of the attribute
            </summary>
        </member>
        <member name="T:Oculus.Util.Serialization.Attributes.XmlIgnoreAttribute">
            <summary>
            Indicates this property should be ignored by xml serialization
            </summary>
        </member>
        <member name="T:Oculus.Util.Serialization.Attributes.XmlElementPropertyAttribute">
            <summary>
            Indicates this property should be serialized as a sub-node
            </summary>
        </member>
        <member name="T:Oculus.Util.Serialization.Attributes.XmlReadThroughAttribute">
            <summary>
            Represents a "read-through" property, which is never serialized but used to 
            contain list members on deserialization.
            </summary>
        </member>
        <member name="T:Oculus.Util.Serialization.Attributes.XmlElementNameAttribute">
            <summary>
            Used to name xml elements something other than the class type name.
            </summary>
        </member>
        <member name="M:Oculus.Util.Serialization.Attributes.XmlElementNameAttribute.#ctor">
            <summary>
            Create a default instance of the attribute
            </summary>
        </member>
        <member name="M:Oculus.Util.Serialization.Attributes.XmlElementNameAttribute.#ctor(System.String)">
            <summary>
            Create an initialized instance of the attribute
            </summary>
        </member>
        <member name="P:Oculus.Util.Serialization.Attributes.XmlElementNameAttribute.ElementName">
            <summary>
            Get set the element name to use.
            </summary>
        </member>
        <member name="T:Oculus.Util.Serialization.Soap">
            <summary>
            Contains helper methods for working with binary serialization
            </summary>
        </member>
        <member name="M:Oculus.Util.Serialization.Soap.Serialize(System.Object)">
            <summary>
            Serialize object using the SoapFormatter to new stream.
            </summary>
            <param name="obj">the object to serialize</param>
            <returns>the resulting stream</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.Soap.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serialize object using the SoapFormatter to existing stream
            </summary>
            <param name="stream">the existing stream</param>
            <param name="obj">the object to serialize</param>
        </member>
        <member name="M:Oculus.Util.Serialization.Soap.GetSerializedBytes(System.Object)">
            <summary>
            Serializes the object to a byte array
            </summary>
            <param name="obj">The object to serialize</param>
        </member>
        <member name="M:Oculus.Util.Serialization.Soap.Deserialize(System.IO.Stream)">
            <summary>
            Oculus.Util.Serialization
            De-serialize object.
            </summary>
            <param name="stream">the stream to serialize to</param>
            <returns>Return object.</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.Soap.Deserialize(System.Byte[])">
            <summary>
            Deserializes the byte array into an object
            </summary>
            <param name="objectBytes">The serialized byte array</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="T:Oculus.Util.Serialization.Interfaces.IXmlSerializableList">
            <summary>
            Can be used for basic xml serialization. Serializable lists must only contain a
            single element type.
            </summary>
        </member>
        <member name="M:Oculus.Util.Serialization.Interfaces.IXmlSerializableList.GetElementType">
            <summary>
            Gets the type for the objects in the list. Please note this is only supported
            for a single element type
            </summary>
            <returns>The type of ALL objects in the list</returns>
        </member>
        <member name="T:Oculus.Util.Serialization.XmlSerializer">
            <summary>
            Handles serialization and deserialization of objects
            </summary>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.#ctor">
            <summary>
            Create a default instance of the object
            </summary>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.#ctor(System.String,System.String)">
            <summary>
            Create an instance of the serializer using the specified prefix and uri
            </summary>
            <param name="namespacePrefix">The prefix to use (in serialization)</param>
            <param name="namespaceUri">The namespace to use (in serialization)</param>
        </member>
        <member name="P:Oculus.Util.Serialization.XmlSerializer.NamespacePrefix">
            <summary>
            Get/set the namespace prefix
            </summary>
        </member>
        <member name="P:Oculus.Util.Serialization.XmlSerializer.NamespaceUri">
            <summary>
            Get/set the namespace uri
            </summary>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.IsListType(System.Type)">
            <summary>
            Determines if the specified type is a supported list type
            </summary>
            <param name="t">The type to check</param>
            <returns>True if it is a list type, false otherwise</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.IsXmlElementType(System.Type)">
            <summary>
            Returns true if the type is XmlElement
            </summary>
            <param name="t">The type to check</param>
            <returns>True if it's XmlElement, false otherwise</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.IsReadThrough(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the read-through attribute is present on the property
            </summary>
            <param name="info">The info to check</param>
            <returns>true if it's a read-through property, false otherwise</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.IsIgnore(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the ignore attribute is present on the property
            </summary>
            <param name="info">The info to check</param>
            <returns>true if it's an ignore property, false otherwise</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.IsXmlElementProperty(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the read-through attribute is present on the property
            </summary>
            <param name="info">The info to check</param>
            <returns>true if it's a read-through property, false otherwise</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.IsConvertible(System.Type)">
            <summary>
            Determines if the specified type is (oculus) Convertible
            </summary>
            <param name="t">The type to check</param>
            <returns>True if it is a convertible type, false otherwise</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.IsEnumAsInt(System.Reflection.PropertyInfo)">
            <summary>
            Returns true if the enum as int attribute is present on the property
            </summary>
            <param name="info">The info to check</param>
            <returns>true if it's an enum as int property, false otherwise</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.DeserializeListProperty(System.Object,System.Xml.XmlElement,System.Reflection.PropertyInfo)">
            <summary>
            Deserializes the specific list property into the object
            </summary>
            <param name="value">The object we're working with</param>
            <param name="listNode"></param>
            <param name="property"></param>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.DeserializeList(System.Xml.XmlElement,Oculus.Util.Serialization.Interfaces.IXmlSerializableList)">
            <summary>
            Deserializes the list node into the list object
            </summary>
            <param name="listNode">The list node</param>
            <param name="list">The list object</param>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.DeserializeAttributes(System.Type,System.Xml.XmlElement,System.Object)">
            <summary>
            Deserialize the attributes for the node into the value object
            </summary>
            <param name="type">The type of our object</param>
            <param name="objectNode">The node we're working with</param>
            <param name="value">The object we are modifying</param>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.DeserializeReadThroughProperties(System.Type,System.Xml.XmlElement,System.Object)">
            <summary>
            Iterates through the properties and finds any read-through properties, populating them
            </summary>
            <param name="type">The object type</param>
            <param name="objectNode">The node for our object</param>
            <param name="objectValue">The value we're modifying</param>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.SerializeProperties(System.Object,System.Xml.XmlElement,System.Type)">
            <summary>
            Serializes the properties for the object
            </summary>
            <param name="value">The object we're serializing</param>
            <param name="elementValue">The element being serialized</param>
            <param name="objectType">The object type</param>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.GetPropertyValue(System.Type,System.Object)">
            <summary>
            Retrieves the string value for a property to be used in an attribute or text node
            </summary>
            <param name="type">The property type</param>
            <param name="value">The value</param>
            <returns>The string to use</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.SerializeXmlElementType(System.Xml.XmlElement,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Serializes an xml element type property
            </summary>
            <param name="elementValue">The current element we're serializing to</param>
            <param name="property">The info for the property</param>
            <param name="propertyValue">The value for the property (XmlElement)</param>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.SerializeList(System.Xml.XmlElement,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Serializes a list property
            </summary>
            <param name="elementValue">The current element we're serializing to </param>
            <param name="property">The info for the property</param>
            <param name="propertyValue">The value for the property</param>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.GetElementName(System.Type)">
            <summary>
            Retrieves the element name for the specified type
            </summary>
            <param name="t">The type to use</param>
            <returns>The name for the corresponding xml element (for lists)</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.Deserialize``1(System.Xml.XmlElement)">
            <summary>
            Deserialize the node as the specified type
            </summary>
            <typeparam name="T">The type to deserialize to</typeparam>
            <param name="objectNode">The node to deserialize</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.Deserialize(System.Type,System.Xml.XmlElement)">
            <summary>
            Deserializes the node to the specified type
            </summary>
            <param name="type">The type to deserialize to, cannot be null</param>
            <param name="objectNode">The node to deserialize</param>
            <returns>The node deserialized to the type, or null if null is passed in</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.Serialize(System.Object,System.String)">
            <summary>
            Creates an Xml document for the object, returning the document element, which is the
            xml serialized version of the object
            </summary>
            <param name="value">The object to serialize</param>
            <param name="nodeName">The name to use for the serialized node</param>
            <returns>The serialized node</returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.Serialize(System.Object,System.String,System.String,System.String)">
            <summary>
            Convenience method which serializes the value to the nodename using the specified
            namespace prefix and uri.
            </summary>
            <param name="value">The value to serialize</param>
            <param name="nodeName">The name of the root node to create, cannot be null</param>
            <param name="namespacePrefix">The prefix to use for all the generated nodes. Use null for none</param>
            <param name="namespaceUri">The uri to use for all the generated nodes. Use null for none</param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Util.Serialization.XmlSerializer.Deserialize``1(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Deserialize the element to the specified type
            </summary>
            <typeparam name="T">The type to deserialize to</typeparam>
            <param name="objectNode">The node containing the object data</param>
            <param name="namespacePrefix">The prefix to use for all the nodes. Use null for none</param>
            <param name="namespaceUri">The uri to use for all the nodes. Use null for none</param>
            <returns></returns>
        </member>
        <member name="T:Oculus.Util.Stream">
            <summary>
            Utility class for working with streams
            </summary>
        </member>
        <member name="M:Oculus.Util.Stream.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies all the contents of the source stream (from the current location) to the destination stream.
            </summary>
            <param name="source">The stream we're reading from</param>
            <param name="destination">The stream we're writing to</param>
        </member>
        <member name="M:Oculus.Util.Stream.GetBytesFromStream(System.IO.Stream)">
            <summary>
            Reads the bytes out of the source stream
            </summary>
            <param name="stream">The stream to read</param>
            <returns>The set of bytes</returns>
        </member>
        <member name="M:Oculus.Util.Stream.GetBytesFromStream(System.IO.MemoryStream)">
            <summary>
            Automatically truncates the buffer in the memory stream and returns the resultant byte array.
            NB THIS CAN MODIFY YOUR UNDERLYING BUFFER LENGTH
            </summary>
            <param name="stream">The stream</param>
            <returns>The set of bytes</returns>
        </member>
        <member name="T:Oculus.Util.Windows.ActiveDirectory.ADSearch">
            <summary>
            Interacts with AD to retrieve information for all object types.
            Please note any attempt to retrieve "ALL" of something is limited to 1000 results.
            Use the SrcDictionary methods to retrieve items as an alphabetical indexed list
            (limited to 1000 per letter), or use your own filters to retrieve the data.
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.ActiveDirectory.ADSearch.AllUsersWildcardFilter">
            <summary>Filter for all users starting with the specified characters (format param 0)</summary>
        </member>
        <member name="F:Oculus.Util.Windows.ActiveDirectory.ADSearch.AllComputersWildcardFilter">
            <summary>Filter for all computers starting with the specified characters (format param 0)</summary>
        </member>
        <member name="F:Oculus.Util.Windows.ActiveDirectory.ADSearch.AllGroupsFilter">
            <summary>Filter for all groups</summary>
        </member>
        <member name="F:Oculus.Util.Windows.ActiveDirectory.ADSearch.AllGroupsWildcardFilter">
            <summary>Filter for all gruops starting with the specified characters (format param 0)</summary>
        </member>
        <member name="F:Oculus.Util.Windows.ActiveDirectory.ADSearch.SingleGroupFilter">
            <summary>Filter for a single group with the specified characters (exact match - format param 0)</summary>
        </member>
        <member name="F:Oculus.Util.Windows.ActiveDirectory.ADSearch.SingleUserFilter">
            <summary>Filter for a single user with the specified characters (exact match - format param 0)</summary>
        </member>
        <member name="F:Oculus.Util.Windows.ActiveDirectory.ADSearch.SingleUserFilterBySam">
            <summary>Filter for a single user by the sam account name (exact match - format param 0)</summary>
        </member>
        <member name="F:Oculus.Util.Windows.ActiveDirectory.ADSearch.m_propertiesToLoad">
            <summary>
            Contains a list of properties to return. If empty, all properties are returned.
            Be sure to clear this value between calls, as every call into AD uses this list
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.ADSearch.PropertiesToLoad">
            <summary>
            Use this method to restrict which properties are being loaded
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetDirectoryEntry(System.String,System.String)">
            <summary>
            Get an item from the ac for the distinguished name
            </summary>
            <param name="domain">the domain to look in</param>
            <param name="distinguishedName">the item to look for</param>
            <returns>The directory entry for the item</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetAllUsers(System.String)">
            <summary>
            Retrieves all the users for a specific domain
            </summary>
            <param name="domain">The domain to use</param>
            <returns>All the users</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetUsers(System.String,System.String)">
            <summary>
            Retrieves all domain users according to a name filter
            </summary>
            <param name="domain">The domain to use</param>
            <param name="nameFilter">The filter</param>
            <returns>All users in the domain matching the filter</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetUserSrcDictionary(System.String)">
            <summary>
            Retrieves a per-letter list of search results.
            </summary>
            <param name="domain">The domain to use</param>
            <returns>The per-letter list of user search result objects</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetSrcDictionary(System.String,System.String)">
            <summary>
            Retrieves a per-letter list of search result.
            </summary>
            <param name="domain">The domain to use</param>
            <param name="filterFormat">The format string to use</param>
            <returns>The per-letter list of search result objects</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetSearchResults(System.String,System.String)">
            <summary>
            Retrieves a set of objects which match the name filter as a search result collection
            </summary>
            <param name="domain">The domain to use</param>
            <param name="nameFilter">The filter to use</param>
            <returns>The search results</returns> 
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetGroups(System.String)">
            <summary>
            Retrieves all the groups for a specific domain
            </summary>
            <param name="domain">The domain to use</param>
            <returns>All the groups</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetGroups(System.String,System.String)">
            <summary>
            Retrieves all domain groups according to a name filter
            </summary>
            <param name="domain">The domain to use</param>
            <param name="nameFilter">The filter</param>
            <returns>All groups in the domain matching the filter</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetGroupSrcDictionary(System.String)">
            <summary>
            Retrieves a per-letter list of search results.
            </summary>
            <param name="domain">The domain to use</param>
            <returns>The per-letter list of group search result objects</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetGroupUsers(System.String,System.String)">
            <summary>
            Retrieves a set of users for a specific group
            </summary>
            <param name="domain">The domain to use</param>
            <param name="group">The group to find</param>
            <returns>The set of matching groups, with their users</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetGroupUsersSrc(System.String,System.String)">
            <summary>
            Retrieves an search result collection of users for a specific group
            </summary>
            <param name="domain">The domain to use</param>
            <param name="group">The group to find</param>
            <returns>The set of matching groups, with their users</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetDomainList">
            <summary>
            Retrieves a list of available domains - please note this requires administrator privileges.
            </summary>
            <returns>The list of domains</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetFullADObject(System.String,System.String)">
            <summary>
            Adds a full AD entry to the collection, based on the CN member name.
            NB this only works for Users and Groups
            </summary>
            <param name="domain">The domain name</param>
            <param name="distinguishedName">The user/group complete CN name</param>
            <returns>The associated object</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.ADSearch.GetBasicADObject(System.String,System.String)">
            <summary>
            Adds a full AD entry to the collection, based on the CN member name.
            NB this only works for Users and Groups. Result properties are filtered. To get all basic props,
            do an addrange of Basic, user, and group
            </summary>
            <param name="domain">The domain name</param>
            <param name="distinguishedName">The user/group complete CN name, NO LDAP:// PREFIX!</param>
            <returns>The associated object, or null if not found OR unknown type</returns>
        </member>
        <member name="T:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject.#ctor(System.String,System.DirectoryServices.SearchResult)">
            <summary>
            creates an instance from a search result entry
            </summary>
            <param name="domain">the domain name</param>
            <param name="instance">the search result entry</param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject.#ctor(System.String,System.DirectoryServices.DirectoryEntry)">
            <summary>
            creates an instance from a active directory entry
            </summary>
            <param name="domain">the domain name</param>
            <param name="instance">the active directory entry</param>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject.DomainName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject.Properties">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject.DistinguishedName">
            <summary>
            uuid for the instance
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject.Name">
            <summary>
            name for the instance
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject.Description">
            <summary>
            description for the instance
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject.ObjectGuid">
            <summary>
            Gets the unique id for the object
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject.CreateFields(System.Data.DataTable)">
            <summary>
            creates the default coulumns in the table
            </summary>
            <param name="table">the table to modify</param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject.PopulateRow(System.Data.DataRow)">
            <summary>
            add the row data
            </summary>
            <param name="row">the row to populate</param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Base.BaseActiveDirectoryObject.GetBaseProperties">
            <summary>
            Get the set of primary properties to use in optimised retrievals
            </summary>
            <returns>The properties</returns>
        </member>
        <member name="T:Oculus.Util.Windows.ActiveDirectory.PropertyBag">
            <summary>
            A string indexed object array
            </summary>
        </member>
        <member name="T:Oculus.Util.Windows.ActiveDirectory.SrcDictionary">
            <summary>
            A string indexed SearchResultCollection (Src) dictionary
            </summary>
        </member>
        <member name="T:Oculus.Util.Windows.ActiveDirectory.ADCollection">
            <summary>
            Collection of member objects
            </summary>
        </member>
        <member name="T:Oculus.Util.Windows.ActiveDirectory.Group">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Group.#ctor">
            <summary>
            empty instance
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Group.#ctor(System.String,System.DirectoryServices.SearchResult)">
            <summary>
            
            </summary>
            <param name="domain"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Group.#ctor(System.String,System.DirectoryServices.DirectoryEntry)">
            <summary>
            
            </summary>
            <param name="domain"></param>
            <param name="instance"></param>
        </member>
        <member name="F:Oculus.Util.Windows.ActiveDirectory.Group.Empty">
            <summary>
            the default empty instance
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Group.GetMemberNames(System.Boolean)">
            <summary>
            
            </summary>
            <param name="includeLdapPrefix">True to include the LDAP://DOMAIN/ prefix, false if not</param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Group.CreateFields(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Group.PopulateRow(System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Group.GetMembers(System.Boolean)">
            <summary>
            Retrieves ALL members of the group. Use "deep" to load all properties,
            otherwise only the base user properties will be loaded.
            </summary>
            <param name="deep"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Group.GetGroupProperties(System.Boolean)">
            <summary>
            Get the set of primary properties to use in optimised retrievals.
            </summary>
            <param name="includeBaseProps">True to include the base properties with the list</param>
            <returns>The properties</returns>
        </member>
        <member name="T:Oculus.Util.Windows.ActiveDirectory.GroupCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.GroupCollection.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.DirectoryServices.SearchResult[]})">
            <summary>
            
            </summary>
            <param name="domain"></param>
            <param name="items"></param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.GroupCollection.#ctor(System.String,System.DirectoryServices.SearchResultCollection)">
            <summary>
            
            </summary>
            <param name="domain"></param>
            <param name="items"></param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.GroupCollection.GetData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Util.Windows.ActiveDirectory.Helpers">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oculus.Util.Windows.ActiveDirectory.Helpers.ADAccountOptions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Helpers.IsAccountActive(System.Int32)">
            <summary>
            Returns true if the user account is active, false if not
            </summary>
            <param name="userAccountControl">The value of the account control property</param>
            <returns>True if active, false if cant find or disabled</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Helpers.GetProperties(System.Object)">
            <summary>
            Gets the properties for a specific value in a standard way - always an object array.
            </summary>
            <param name="value">The value to convert</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Helpers.GetValue``1(Oculus.Util.Windows.ActiveDirectory.PropertyBag,System.String,``0)">
            <summary>
            Gets the first value from the properties with the given name, as the specified type
            </summary>
            <typeparam name="T">The type to retrieve</typeparam>
            <param name="properties">The properties containing the value</param>
            <param name="propertyName">The name of the property</param>
            <param name="defaultValue">The default value to use if the property is missing</param>
            <returns>The value for the property, cast to T</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Helpers.GetNames(Oculus.Util.Windows.ActiveDirectory.PropertyBag,System.String,System.String,System.Boolean)">
            <summary>
            Gets all the cname strings inside the specified property as a string collection,
            optionally including the LDAP prefix.
            </summary>
            <param name="properties">The properties containing the value</param>
            <param name="propertyName">The property name to use</param>
            <param name="domain">The current domain</param>
            <param name="includeLdapPrefix">True to add the prefix, false if not</param>
            <returns>The list of cnames</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Helpers.GetADObjects(System.String,Oculus.Util.Collections.StringList,System.Boolean)">
            <summary>
            Retrieves all the AD objects for the given list of cnames (i.e. from the GetNames method)
            </summary>
            <param name="domain">The current domain</param>
            <param name="cnames">The names to load</param>
            <param name="deep">True to load full records, false to load basic records</param>
            <returns>The list of AD objects</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.Helpers.GetDirectoryEntry(System.String)">
            <summary>
            Gets the directory entry for the given UUID. This must be of the form LDAP://....
            </summary>
            <param name="entryUUID">The entry</param>
            <returns>The corresponding DE object</returns>
        </member>
        <member name="T:Oculus.Util.Windows.ActiveDirectory.Interfaces.IActiveDirectoryObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.Interfaces.IActiveDirectoryObject.DomainName">
            <summary>
            the domain thiis instance was found on
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.Interfaces.IActiveDirectoryObject.DistinguishedName">
            <summary>
            the fully qualified name for the instance = "adspath"
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.Interfaces.IActiveDirectoryObject.Name">
            <summary>
            the name for the entry default = "cn"
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.Interfaces.IActiveDirectoryObject.Description">
            <summary>
            the description for the entry default = "description"
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.Interfaces.IActiveDirectoryObject.ObjectGuid">
            <summary>
            The unique object guid for the object
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.Interfaces.IActiveDirectoryObject.Properties">
            <summary>
            all the properties for the item
            -- the is where all the properties get stored
            </summary>
        </member>
        <member name="T:Oculus.Util.Windows.ActiveDirectory.User">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.User.#ctor">
            <summary>
            empty instance
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.User.#ctor(System.String,System.DirectoryServices.SearchResult)">
            <summary>
            
            </summary>
            <param name="domain"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.User.#ctor(System.String,System.DirectoryServices.DirectoryEntry)">
            <summary>
            
            </summary>
            <param name="domain"></param>
            <param name="instance"></param>
        </member>
        <member name="F:Oculus.Util.Windows.ActiveDirectory.User.MemberOf">
            <summary>
            The property to include if you want to access the GetGroups method. Is not included
            in the list of default properties
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.ActiveDirectory.User.Empty">
            <summary>
            the default empty instance
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.Description">
            <summary>
            description for the instance
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.Title">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.Initials">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.LastName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.EmailAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.Fax">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.Mobile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.Phone">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.Company">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.Department">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.DateCreated">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.DateLastModified">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.AccountIsActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.SamAccountName">
            <summary>
            Gets the user logon name (sam account name) for the user
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.ActiveDirectory.User.Upn">
            <summary>
            Gets the user principal name (user@domain) for the user
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.User.GetGroupNames(System.Boolean)">
            <summary>
            Returns the list of groups
            </summary>
            <param name="includeLdapPrefix">True to include the LDAP://DOMAIN/ prefix, false if not</param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.User.GetGroups(System.Boolean)">
            <summary>
            Retrieves a list of groups in which this user is a member
            </summary>
            <param name="deep">True for full AD entries, false for basic</param>
            <returns>The list of groups</returns>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.User.CreateFields(System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.User.PopulateRow(System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.User.GetUserProperties(System.Boolean)">
            <summary>
            Get the set of primary properties to use in optimised retrievals
            </summary>
            <param name="includeBaseProps">True to include the base properties with the list</param>
            <returns>The properties</returns>
        </member>
        <member name="T:Oculus.Util.Windows.ActiveDirectory.UserCollection">
            <summary>
            Represents a user within AD.
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.UserCollection.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.DirectoryServices.SearchResult[]})">
            <summary>
            Create a user collection against the specified domain primed with 
            the specified search results (key username, search result value).
            </summary>
            <param name="domain">The domain we're working with</param>
            <param name="items">The list of user search results</param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.UserCollection.#ctor(System.String,System.DirectoryServices.SearchResultCollection)">
            <summary>
            
            </summary>
            <param name="domain"></param>
            <param name="items"></param>
        </member>
        <member name="M:Oculus.Util.Windows.ActiveDirectory.UserCollection.GetData">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oculus.Util.Windows.Security">
            <summary>
            Works with security related functionality against Windows.
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.Security.Impersonate(System.String,System.String,System.String)">
            <summary>
            Impersonate a windows user. This ONLY works for machines on the domain.
            </summary>
            <param name="user">the user name</param>
            <param name="domain">the domain name</param>
            <param name="password">the user password</param>
            <returns>A valid impersonation context</returns>
            <exception cref="T:System.ApplicationException">If the login fails</exception>
        </member>
        <member name="M:Oculus.Util.Windows.Security.Login(System.String,System.String,System.String,Oculus.Util.Windows.SecurityImports.LogonType,Oculus.Util.Windows.SecurityImports.LogonProvider)">
            <summary>
            Performs a login and returns an IntPtr reference to the login.
            </summary>
            <param name="username">the username</param>
            <param name="domainname">the domain name</param>
            <param name="password">the user password</param>
            <param name="loginType">the login type</param>
            <param name="provider">the provider to user</param>
            <returns>the login token or IntPtr.Zero if the login failed</returns>
        </member>
        <member name="M:Oculus.Util.Windows.Security.CheckLogin(System.String,System.String,System.String)">
            <summary>
            Verifies the login is correct. Will return the impersonation context as created by this method
            which is used to verify the login. If the value returned is null, the impersonation failed.
            NB You must manually undo the impersonation when you want to stop impersonating.
            </summary>
            <param name="username">the username</param>
            <param name="domainname">the domain name</param>
            <param name="password">the user password</param>
            <returns>True if the login is correct, false if not</returns>
        </member>
        <member name="T:Oculus.Util.Windows.SecurityImports">
            <summary>
            Contains Dll imports to the authentication dlls as well as "useful" enumerations
            for various flags.
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.SecurityImports.LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            
            </summary>
            <param name="Username"></param>
            <param name="Domain"></param>
            <param name="Password"></param>
            <param name="LogonType"></param>
            <param name="LogonProvider"></param>
            <param name="Token"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Util.Windows.SecurityImports.CloseHandle(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="Object"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Util.Windows.SecurityImports.FormatMessage(System.Int64,System.IntPtr,System.Int64,System.Int64,System.IntPtr@,System.Int64,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="Flags"></param>
            <param name="Source"></param>
            <param name="MessageId"></param>
            <param name="LanguageId"></param>
            <param name="Buffer"></param>
            <param name="Size"></param>
            <param name="Arguments"></param>
            <returns></returns>
        </member>
        <member name="T:Oculus.Util.Windows.SecurityImports.LogonType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.LogonType.LogonInteractive">
            <summary>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on  
            by a terminal server, remote shell, or similar process.
            This logon type has the additional expense of caching logon information for disconnected operations;
            therefore, it is inappropriate for some client/server applications,
            such as a mail server.
            
            NB THIS LOGON METHOD ONLY WORKS FOR THE LOCAL MACHINE
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.LogonType.LogonNetwork">
            <summary>
            This logon type is intended for high performance servers to authenticate plaintext passwords.
            The LogonUser function does not cache credentials for this logon type.
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.LogonType.LogonBatch">
            <summary>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without
            their direct intervention. This type is also for higher performance servers that process many plaintext
            authentication attempts at a time, such as mail or Web servers.
            The LogonUser function does not cache credentials for this logon type.
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.LogonType.LogonService">
            <summary>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.LogonType.LogonUnlock">
            <summary>
            This logon type is for GINA DLLs that log on users who will be interactively using the computer.
            This logon type can generate a unique audit record that shows when the workstation was unlocked.
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.LogonType.LogonNetworkClearText">
            <summary>
            This logon type preserves the name and password in the authentication package, which allows the server to make
            connections to other network servers while impersonating the client. A server can accept plaintext credentials
            from a client, call LogonUser, verify that the user can access the system across the network, and still
            communicate with other servers.
            NOTE: Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.LogonType.LogonNewCredentials">
            <summary>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections.
            The new logon session has the same local identifier but uses different credentials for other network connections.
            NOTE: This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            NOTE: Windows NT:  This value is not supported.
            </summary>
        </member>
        <member name="T:Oculus.Util.Windows.SecurityImports.LogonProvider">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.LogonProvider.Default">
            <summary>
            Use the standard logon provider for the system.
            The default security provider is negotiate, unless you pass NULL for the domain name and the user name
            is not in UPN format. In this case, the default provider is NTLM.
            NOTE: Windows 2000/NT:   The default security provider is NTLM.
            </summary>
        </member>
        <member name="T:Oculus.Util.Windows.SecurityImports.SecurityImpersonationLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.SecurityImpersonationLevel.SecurityAnonymous">
            <summary>
            The server process cannot obtain identification information about the client,
            and it cannot impersonate the client. It is defined with no value given, and thus,
            by ANSI C rules, defaults to a value of zero.
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.SecurityImpersonationLevel.SecurityIdentification">
            <summary>
            The server process can obtain information about the client, such as security identifiers and privileges,
            but it cannot impersonate the client. This is useful for servers that export their own objects,
            for example, database products that export tables and views.
            Using the retrieved client-security information, the server can make access-validation decisions without
            being able to use other services that are using the client's security context.
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.SecurityImpersonationLevel.SecurityImpersonation">
            <summary>
            The server process can impersonate the client's security context on its local system.
            The server cannot impersonate the client on remote systems.
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.SecurityImpersonationLevel.SecurityDelegation">
            <summary>
            The server process can impersonate the client's security context on remote systems.
            NOTE: Windows NT:  This impersonation level is not supported.
            </summary>
        </member>
        <member name="T:Oculus.Util.Windows.SecurityImports.MessageFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.MessageFormat.AllocateBuffer">
            <summary></summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.MessageFormat.IgnoreInserts">
            <summary></summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.MessageFormat.FromSystem">
            <summary></summary>
        </member>
        <member name="T:Oculus.Util.Windows.SecurityImports.SamAccountType">
            <summary>
            sAM type values for AD. Use with sAMAccountType qualifier on LDAP query
            </summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.SamAccountType.DistributionList">
            <summary></summary>
        </member>
        <member name="F:Oculus.Util.Windows.SecurityImports.SamAccountType.SecurityGroup">
            <summary></summary>
        </member>
        <member name="T:Oculus.Util.Windows.Gac">
            <summary>
            Contains methods for working with the standard windows Global Assembly Cache (GAC)
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.Gac.LoadAvailableDevExpressAssembly(System.String)">
            <summary>
            Loads whatever devexpress assembly is available from the GAC
            </summary>
            <param name="assemblyName">The failed devexpress assembly</param>
            <returns>The assembly which matches the parameter, or null if one can't be found</returns>
        </member>
        <member name="T:Oculus.Util.Windows.Email">
            <summary>
            Works with mail using the default MAPI application (e.g. Outlook, Outlook Express,
            Thunderbird). Code adapted from http://www.codeproject.com/KB/IP/SendFileToNET.aspx
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.Email.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.Email.To">
            <summary>
            Get the list of "To" recipients
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.Email.CC">
            <summary>
            Get the list of "CC" recipients
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.Email.BCC">
            <summary>
            Get the list of "BCC" recipients
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.Email.Attachments">
            <summary>
            Get the list of attachments - these are full file paths
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.Email.Subject">
            <summary>
            Get/set the mail subject
            </summary>
        </member>
        <member name="P:Oculus.Util.Windows.Email.Body">
            <summary>
            Get/set the mail body (plain text)
            </summary>
        </member>
        <member name="M:Oculus.Util.Windows.Email.LaunchMail">
            <summary>
            Launch the current mail values to the default mail program
            </summary>
        </member>
        <member name="T:Oculus.Util.Drawing.Utility">
            <summary>
            Utility class for working with drawing objects
            </summary>
        </member>
        <member name="M:Oculus.Util.Drawing.Utility.SetGraphicsHighRes(System.Drawing.Graphics)">
            <summary>
            Sets the graphics to hi-res rendering mode. Only use this mode when necessary, as it is
            quite slow.
            </summary>
            <param name="graphics">The graphics to modify</param>
        </member>
        <member name="M:Oculus.Util.Drawing.Utility.SetGraphicsLowRes(System.Drawing.Graphics)">
            <summary>
            Sets the graphics to low-res rendering mode. When possible, use this mode as it is MUCH faster.
            </summary>
            <param name="graphics">The graphics to modify</param>
        </member>
        <member name="T:Oculus.Util.Interfaces.IDrawable">
            <summary>
            Represents an annotation in runtime
            </summary>
        </member>
        <member name="M:Oculus.Util.Interfaces.IDrawable.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the annotation on the graphics object
            </summary>
            <param name="g">The graphics</param>
        </member>
        <member name="M:Oculus.Util.Interfaces.IDrawable.GetBoundingBox">
            <summary>
            Gets a bounding box for the object
            </summary>
            <returns>The bounding box</returns>
        </member>
        <member name="T:Oculus.Util.Image">
            <summary>
            Contains helper methods for working with images
            </summary>
        </member>
        <member name="T:Oculus.Util.Image.MergeImageFormat">
            <summary>
            Enum helper for supported merge types
            </summary>
        </member>
        <member name="F:Oculus.Util.Image.MergeImageFormat.MultipageTiff">
            <summary>
            Indicates merging as a multipage tiff
            </summary>
        </member>
        <member name="F:Oculus.Util.Image.MergeImageFormat.Pdf">
            <summary>
            Indicates merging as a pdf
            </summary>
        </member>
        <member name="P:Oculus.Util.Image.TiffCodecInfo">
            <summary>
            Get the codec info for a Tiff
            </summary>
        </member>
        <member name="T:Oculus.Util.Image.PageHandler">
            <summary>
            Used for streaming pdfs
            </summary>
        </member>
        <member name="M:Oculus.Util.Image.Merge(Oculus.Util.Collections.StringList,System.String,Oculus.Util.Image.MergeImageFormat)">
            <summary>
            Merges the entire set of images on disk to a single, multipage file.
            NB this uses LZW compression for the resultant images.
            </summary>
            <param name="filesToMerge">The files to merge, cannot be null</param>
            <param name="destinationFile">The file to save the merged images to, will be deleted if present, cannot be null</param>
            <param name="format">The format to use for the merge</param>
        </member>
        <member name="M:Oculus.Util.Image.GetBitmapFromFile(System.String)">
            <summary>
            Retrieves a bitmap from a file. This is preferable to use over Bitmap.FromFile, as the FromFile
            method locks the file until the bitmap is disposed
            </summary>
            <param name="path">The path to load, cannot be null</param>
            <returns>The bitmap object</returns>
        </member>
        <member name="M:Oculus.Util.Image.ConvertToBitonal(System.Drawing.Bitmap)">
            <summary>
             Converts an image to a bitonal tiff. NB this uses bit-by-bit conversion,so use with care.
            </summary>
            <param name="original">The original image</param>
            <returns>The bitonal image</returns>
        </member>
        <member name="M:Oculus.Util.Image.SaveWithBitonalCompression(System.Drawing.Bitmap,System.String)">
            <summary>
            Saves the bitonal tiff with the default b/w compression (CCTIC)
            </summary>
            <param name="bitonalTiff">The bitonal tiff</param>
            <param name="path">The path to save to, will delete the file if it's there</param>
        </member>
        <member name="M:Oculus.Util.Image.ConvertToArgb32(System.Drawing.Bitmap)">
            <summary>
            Converts the bitmap to argb 32 bpp format
            </summary>
            <param name="original">The original bitmap</param>
            <returns>The converted bitmap</returns>
        </member>
        <member name="M:Oculus.Util.Image.GetIndexedBitmap(System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            modified from http://ewbi.blogs.com/develops/2005/08/sparklines_22.html
            Converts the original bitmap to an indexed bitmap
            </summary>
            <param name="origBitmap">The original bitmap</param>
            <param name="transparentColor">A transparent color to use</param>
            <returns>The indexed bitmap</returns>
        </member>
        <member name="M:Oculus.Util.Image.GetCodecForType(System.String)">
            <summary>
            Get a codec for a particular string
            </summary>
            <param name="type">The mime type of the codec type</param>
            <returns>The codec, or null if not found</returns>
        </member>
        <member name="M:Oculus.Util.Image.GetThumbnail(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Generates and returns a thumbnail which takes up as much of the width and height
            as possible without distorting the original image ratios
            </summary>
            <param name="image">The image to generate a thumbnail of, cannot be null</param>
            <param name="idealWidth">The target width</param>
            <param name="idealHeight">The target height</param>
            <returns>The thumbnail</returns>
        </member>
        <member name="M:Oculus.Util.Image.DrawWatermark(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Draws a half-tone watermark at the specified coordinates on the target image
            </summary>
            <param name="target">The image we're drawing onto</param>
            <param name="watermark">The watermark image we're using</param>
            <param name="x">The x coord in the target where we're placing the watermark</param>
            <param name="y">The y coord in the target where we're placing the watermark</param>
        </member>
        <member name="M:Oculus.Util.Image.GetScaledSize(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Calculates a scaled size of the source rectangle against the target rectangle, attempting to 
            maximize the source rectangle within the target rectangle
            </summary>
            <param name="source">The source rectangle</param>
            <param name="target">The target rectangle</param>
            <returns>The maximized rectangle</returns>
        </member>
        <member name="M:Oculus.Util.Image.FindCodecForType(System.String)">
            <summary>
            Retrieves an image codec for a specific mime type
            </summary>
            <param name="mimeType">The mime type, cannot be null</param>
            <returns>The codec info</returns>
        </member>
        <member name="M:Oculus.Util.Image.ConvertToGrayscale(System.Drawing.Image)">
            <summary>
            Covert the image to grayscale and return the result
            </summary>
            <param name="image">The image, cannot be null</param>
            <returns>The grayscale version</returns>
        </member>
        <member name="T:Oculus.Util.InputValidator">
            <summary>
            Generalised validator for text input
            </summary>
        </member>
        <member name="M:Oculus.Util.InputValidator.ValidateAlphanumeric(System.String,System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            this should validate the new input charater's validity based on type and length
            </summary>
            <param name="extraAllow">any extra characters to allow</param>
            <param name="currentText">the current text</param>
            <param name="minLength">The minimum length for the value, -1 means no limit</param>
            <param name="maxLength">the max text length, -1 means no limit</param>
            <param name="errorMessage">this is the resulting error message</param>
            <returns>true if the input is allowed</returns>
        </member>
        <member name="M:Oculus.Util.InputValidator.ValidateLength(System.String,System.Int32,System.Int32,System.String@)">
            <summary>
            this should validate the new input length
            </summary>
            <param name="currentText">the current text</param>
            <param name="minLength">The minimum length for the value, -1 means no limit</param>
            <param name="maxLength">the max text length, -1 means no limit</param>
            <param name="errorMessage">this is the resulting error message</param>
            <returns>true if the input lengths is valide</returns>
        </member>
        <member name="T:Oculus.Util.MimeType">
            <summary>
             Class that contains utility methods pertaining to Mime types, etc.
            </summary>
        </member>
        <member name="M:Oculus.Util.MimeType.GetContentTypeForExtension(System.String)">
            <summary>
             Returns the content type (e.g. "text/html") for the specified extension. Returns nul
             string if the argument is empty or the type unknown or an error occurs.
            </summary>
            <param name="extension">The extension to check</param>
            <returns>Null if the extension is null or the resource item can't be found</returns>
        </member>
        <member name="M:Oculus.Util.MimeType.IsImageContentType(System.String)">
            <summary>
             Returns true if the mime type could be construed as in image, false if not
            </summary>
        </member>
        <member name="M:Oculus.Util.MimeType.GetEncoderInfo(System.String)">
            <summary>
            Gets the supported codec info.
            </summary>
            <param name="mimeType">the mime type value, cannot be null</param>
            <returns>The codec info for the mime type</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Collections.ParamDictionary">
            <summary>
            Class which contains a parameter-name indexed list of search criteria items
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.SearchSqlGenerator">
            <summary>
            This class contains an implementation of the ISearchSqlGenerator interface and is responsible
            for generating the SQL used in search operations.
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.SearchSqlGenerator.IndexesToRetrieve">
            <summary>
            Get the set of indexes we need to retrieve
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.SearchSqlGenerator.Parameters">
            <summary>
            Get the set of parameters we're going to be using
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.SearchSqlGenerator.Indexes">
            <summary>
            Get the set of indexes we're going to be using
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.SearchSqlGenerator.Initialize(Oculus.Searching.SearchCriteria)">
            <summary>
            Initialize the generator with the specified search criteria. Called before any other
            methods.
            </summary>
            <param name="searchCriteria">The criteria we'll be generating sql against</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.SearchSqlGenerator.GetSortFieldReference(System.String)">
            <summary>
            For the specified field, return the column reference (e.g. Table1.FieldX)
            </summary>
            <param name="fieldName">
            The field to sort against, doc qualifiers will be of the form [NAME] in brackets, otherwise it will be an index name
            </param>
            <returns>The column reference to sort against, or null if it should be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.SearchSqlGenerator.AddStandardColumns(Oculus.Util.Collections.StringList)">
            <summary>
            Add any standard columns to retrieve, these will be included in the list of columns
            we select
            </summary>
            <param name="columns">The list of columns to add to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.SearchSqlGenerator.GetIndexColumnReference(System.String)">
            <summary>
            Get the fully qualified column reference for the specified index.
            </summary>
            <param name="indexName">The name of the index we're going to retrieve</param>
            <returns>The column reference, or null if it should be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.SearchSqlGenerator.GetSelectTables">
            <summary>
            Gets the COMPLETE set of tables we're going to be selecting against. Include any aliases.
            </summary>
            <returns>The list of tables to select from</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.SearchSqlGenerator.GetDefaultWhereClause">
            <summary>
            Gets any default where clause. DO NOT include the WHERE keyword.
            </summary>
            <returns>The default where clause, or null if there is none</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.SearchSqlGenerator.GetColumnReference(System.String)">
            <summary>
            Get the fully qualified column reference for the field. Can be index or document field.
            </summary>
            <param name="fieldName">The field name</param>
            <returns>The column name. If null is returned, this field will be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.SearchSqlGenerator.GetParameterName(Oculus.Searching.SearchCriteriaItem)">
            <summary>
            Get the parameter name for the field. Can be index or document field.
            </summary>
            <param name="item">The criteria item</param>
            <returns>The parameter name. Cannot be null, as GetColumnReference will be called first</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.SearchSqlGenerator.GetArchiveWhereClause(Oculus.Searching.ArchiveState)">
            <summary>
            Gets the relevant where clause for the archive state
            </summary>
            <param name="archiveState">The state requested, will never be "Any"</param>
            <returns>The where clause to use</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Data.Collections.DocProfileRecordList">
            <summary>
            List of DocProfileRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Data.Collections.DocRecordList">
            <summary>
            List of DocRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Data.Collections.FragRecordList">
            <summary>
            List of FragRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Data.Collections.IndexRecordList">
            <summary>
            List of IndexRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Data.Collections.MonikerRecordList">
            <summary>
            List of MonikerRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Data.Collections.IndexDictionary">
            <summary>
            A dictionary of index records, indexed by index name
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Data.DocProfileRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.DocProfileRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.DocProfileRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus8.Data.Collections.IndexDictionary)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
            <param name="indexes">The indexes to add to the record</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.DocProfileRecord.DocId">
            <summary>
            The document id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.DocProfileRecord.Indexes">
            <summary>
            The set of indexes
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.DocProfileRecord.LoadRecord(System.Guid,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus8.PluginManager)">
            <summary>
            Loads a DOC_DOCUMENT record based on the id provided.
            </summary>
            <param name="docId">The document id</param>
            <param name="profileId">The profile id for the document</param>
            <param name="connection">The connection</param>
            <param name="manager">The manager to use</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.DocProfileRecord.AddRecord(Oculus.Plugins.Oculus8.Data.DocProfileRecord,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus8.PluginManager)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="profileId">The profile id to use</param>
            <param name="connection">The connection to use</param>
            <param name="manager">Our manager</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.DocProfileRecord.UpdateRecord(Oculus.Plugins.Oculus8.Data.DocProfileRecord,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus8.PluginManager)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="profileId">The profile id to use</param>
            <param name="connection">The connection to use</param>
            <param name="manager">Our manager</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.DocProfileRecord.DeleteRecord(System.Guid,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus8.PluginManager)">
            <summary>
            Deletes the specified record from the profile table
            </summary>
            <param name="docId">The document id</param>
            <param name="profileId">The profile id</param>
            <param name="connection">The connection</param>
            <param name="manager">The manager</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Data.DocRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.DocRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.DocRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.DocRecord.Id">
            <summary>
            The document id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.DocRecord.ProfileId">
            <summary>
            The profile id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.DocRecord.Name">
            <summary>
            The document name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.DocRecord.Description">
            <summary>
            The document description
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.DocRecord.MetaData">
            <summary>
            The document metadata xml
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.DocRecord.SqlInsertRecord">
            <summary>
            1:ID, 2:PROFILE_ID, 3:NAME, 4:DESCRIPTION, 5:SECURED, 6:METADATA
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.DocRecord.AddRecord(Oculus.Plugins.Oculus8.Data.DocRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.DocRecord.LoadRecord(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads a DOC_DOCUMENT record based on the id provided.
            </summary>
            <param name="id">The id</param>
            <param name="connection">The connection</param>
            <returns>The record</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Data.FragRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.FragRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.FragRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.FragRecord.Id">
            <summary>
            The fragment id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.FragRecord.VersionId">
            <summary>
            The version id for the fragment
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.FragRecord.FileName">
            <summary>
            The fragment file name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.FragRecord.Sequence">
            <summary>
            The sequence of the fragment within the version
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.FragRecord.PageCount">
            <summary>
            The total number of pages. Deprecated
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.FragRecord.ContentType">
            <summary>
            The MIME type for the document
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.FragRecord.SqlInsertRecord">
            <summary>
            1:ID, 2:VERSION_ID, 3:FILE_NAME, 4:PAGE_COUNT, 5:SEQUENCE, 6:SECURED
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.FragRecord.LoadFromCommand(System.Data.Common.DbCommand,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves a list of fragment records from the specified command
            </summary>
            <param name="cmd">The command</param>
            <param name="connection">The connection</param>
            <returns>The set of records</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.FragRecord.AddRecord(Oculus.Plugins.Oculus8.Data.FragRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.FragRecord.GetAllRecordsForDoc(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads all DOC_FRAGMENT record based on the doc id provided.
            </summary>
            <param name="docId">The document id</param>
            <param name="connection">The connection</param>
            <returns>The fragment records, sorted in sequence</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.FragRecord.LoadRecord(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads a DOC_FRAGMENT record based on the id provided.
            </summary>
            <param name="id">The id</param>
            <param name="connection">The connection</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.FragRecord.GetConsolidationFragmentSequence(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves out the list of fragments that, in consolidation mode, would comprise the document
            </summary>
            <param name="documentId">the document id</param>
            <param name="connection">The connection</param>
            <returns>The list of items</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Data.IndexRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.IndexRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.IndexRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.IndexRecord.Id">
            <summary>
            The index unique id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.IndexRecord.ProfileId">
            <summary>
            The profile id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.IndexRecord.Name">
            <summary>
            The index name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.IndexRecord.IndexType">
            <summary>
            The index type
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.IndexRecord.Length">
            <summary>
            The index length
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.IndexRecord.Attributes">
            <summary>
            The index attributes
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.IndexRecord.Active">
            <summary>
            Whether or not the index is active
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.IndexRecord.DbType">
            <summary>
            The database type for the index
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.IndexRecord.SqlInsertRecord">
            <summary>
            inserts an index record. 0:id, 1:profile id, 2:name, 3:type, 4:length, 5:attributes, 6:active
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.IndexRecord.SqlUpdateRecord">
            <summary>
            updates an index record. 0:length, 1:active, 2:profile id, 3:name
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.IndexRecord.SetDbType">
            <summary>
            Automatically sets the DbType value based on the Type
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.IndexRecord.GetIndexes(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves the set of indexes for the specified profile
            </summary>
            <param name="profileId">The id</param>
            <param name="connection">The connection</param>
            <returns>The string-indexed list of records</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.IndexRecord.AddRecord(Oculus.Plugins.Oculus8.Data.IndexRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.IndexRecord.UpdateRecord(Oculus.Plugins.Oculus8.Data.IndexRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Updates the LENGTH and ACTIVE status for the specified record - nothing else can change
            </summary>
            <param name="record">The record to update</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Data.MonikerRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.MonikerRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.MonikerRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.MonikerRecord.Moniker">
            <summary>
            The moniker for the record
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.MonikerRecord.FragmentId">
            <summary>
            The fragment id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.MonikerRecord.MonikerType">
            <summary>
            The type of moniker for the fragment. NB from v9 this will only be online
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Data.MonikerRecord.SqlInsertRecord">
            <summary>
            1:FRAGMENT_ID, 2:LIBRARY_ID, 3:PATH
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.MonikerRecord.GetAllRecords(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,System.String,System.String)">
            <summary>
            Gets all the records for the specified id and sql
            </summary>
            <param name="id">The id to use</param>
            <param name="connection">The connection to use</param>
            <param name="sql">The sql to use</param>
            <param name="paramName">The parameter name to use</param>
            <returns>The set of records for the query</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.MonikerRecord.AddRecord(Oculus.Plugins.Oculus8.Data.MonikerRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.MonikerRecord.GetAllRecordsForDoc(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads all DOC_MONIKER records based on the doc id provided.
            </summary>
            <param name="docId">The document id</param>
            <param name="connection">The connection</param>
            <returns>The fragment records, sorted in sequence</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.MonikerRecord.GetAllRecordsForFrag(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads all DOC_MONIKER records based on the fragment id provided.
            </summary>
            <param name="fragmentId">The fragment id</param>
            <param name="connection">The connection</param>
            <returns>The fragment records, sorted in sequence</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Data.MonikerRecord.GetOrCreateLibrary(System.String,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves the id for an existing library, or inserts a new library and returns the id.
            </summary>
            <param name="libraryText">The text for the library</param>
            <param name="connection">The connection</param>
            <returns>The id to use for the library</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Helpers.Config">
            <summary>
            Contains utility methods for interfacing with configuration, namely changing
            our schema based on new configuration.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus8.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Helpers.Config.SqlInvalidateIndex">
            <summary>
            Sets index record inactive. 0:false, 1:profile id, 2:index name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Helpers.Config.SqlDropView">
            <summary>
            Drop the view. Format 0:view name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Helpers.Config.SqlCreateView">
            <summary>
            Create the view. Format 0:view name, 1:base table
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.AddProfileEntry(System.Guid,System.String)">
            <summary>
            Adds the profile entry to the profiles table
            </summary>
            <param name="profileId">The id</param>
            <param name="profileName">the name</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.UpdateProfileEntry(System.Guid,System.String)">
            <summary>
            Updates the existing profile entry in the profiles table
            </summary>
            <param name="profileId">The id</param>
            <param name="profileName">the name</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.ReCreateProfileView(System.Guid,System.String,System.String)">
            <summary>
            Drops and creates the view on the profile, but only if the new name is different from the
            new name.
            </summary>
            <param name="profileId">The profile id</param>
            <param name="oldProfileName">The old name of the profile, string.empty if no old name</param>
            <param name="newProfileName">The new name of the profile (may be the same)</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.CreateProfileView(System.Guid,System.String,System.Boolean)">
            <summary>
            Create the profile view
            </summary>
            <param name="profileId">The id</param>
            <param name="profileName">The name for the view</param>
            <param name="useSeparateConnection">If we need to use a separate connection to do the drop</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.DropProfileView(System.String,System.Boolean)">
            <summary>
            Drops the profile view from the system
            </summary>
            <param name="oldProfileName">The old profile name</param>
            <param name="useSeparateConnection">If we need to use a separate connection to do the drop</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.ExpansionRequired(Oculus.Data.Schema.Column,Oculus.Data.Schema.Column)">
            <summary>
            Determines if the base column needs to be expanded to accommodate the new column
            </summary>
            <param name="baseColumn">the current column</param>
            <param name="newColumn">the column to compare to</param>
            <returns>True if expansion is necessary, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.ModifyExistingProfileTable(System.Guid,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Modifies an existing profile table for the particular profile
            </summary>
            <param name="profileId">The id of the profile</param>
            <param name="profileNode">The node for the profile</param>
            <param name="doTableUpdates">True if we need to do schema changes, false if not (e.g. false for virtual profiles)</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.CreateNewProfileTable(System.Guid,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Creates a new profile table for the particular profile
            </summary>
            <param name="profileId">The id of the profile</param>
            <param name="profileNode">The node for the profile</param>
            <param name="doTableUpdates">True if we need to do schema changes, false if not (e.g. false for virtual profiles)</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.ToIndexRecord(System.Guid,Oculus.Data.Schema.Column)">
            <summary>
            Creates an index record object based on the column data
            </summary>
            <param name="profileId">The profile id</param>
            <param name="column">The column</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.UpdateIndexTable(System.Guid,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Plugins.Oculus8.Collections.LocalIndexTypeDictionary)">
            <summary>
            Updates the INDEX table entries for each profile
            </summary>
            <param name="profileId">The profile id</param>
            <param name="indexesToAdd">The indexes to add</param>
            <param name="indexesToModify">The indexes to modify</param>
            <param name="indexesToInactivate">The indexes to inactivate (have been removed)</param>
            <param name="indexTypes">A dictionary of index types which links the column names to a data type</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.GetCurrentProfiles">
            <summary>
            Returns an id-indexed list of the profiles currently in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Config.NotifyOfNewConfiguration(System.Xml.XmlDocument)">
            <summary>
            Obtains a new copy of configuration
            </summary>
            <param name="newConfigXml">The new configuration</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Helpers.Document">
            <summary>
            Contains utility methods for interfacing with Documents.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus8.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Helpers.Document.SqlInsertVersion">
            <summary>
            1:ID, 2:DOCUMENT_ID, 3:VERSION, 4:CREATED, 5:CREATED_BY, 6:STATUS, 7:SECURED
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.GetDocument(System.Guid)">
            <summary>
            Retrieves an engine document based on the id
            </summary>
            <param name="docId">The id of the document to retrieve</param>
            <returns>The document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.GetProfileId(System.Guid)">
            <summary>
            Retrieves the document profile based on the id
            </summary>
            <param name="docId">The id of the document to retrieve</param>
            <returns>The profile id</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.GetNewestVersionId(System.Guid)">
            <summary>
            Retrieves the newest version id for the document (generally only one)
            </summary>
            <param name="docId">The id of the document</param>
            <returns>The active version id</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.DocumentExists(System.Guid)">
            <summary>
            Returns true if the document exists in the system, false if not. This is a cached operation
            for the lifetime of the object.
            </summary>
            <param name="docId">The document id</param>
            <returns>True if we've got it, false if not</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.VerifyDocumentExists(System.Guid)">
            <summary>
            Throws an exception if the document doesn't exist. This is a cached operation.
            </summary>
            <param name="docId">The document id</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.ChangeProfile(System.Guid,System.Guid,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Reprofiles the document specified
            </summary>
            <param name="docId">The id of our document</param>
            <param name="profileId">The new profile id</param>
            <param name="newIndexes">The new indexes</param>
            <returns>The new moniker for the item</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.UpdateDescription(System.Guid,System.String)">
            <summary>
            Updates the document description for the id - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="newDescription">The new description to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.AddDocument(Oculus.Storage.StorageDocument,Oculus.Configuration.ProfileContext)">
            <summary>
            Adds a document to the system
            </summary>
            <param name="document">The document to add</param>
            <param name="profileContext">The profile context to use</param>
            <returns>The id of the document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.AddDocumentVersion(System.Guid,System.Guid,System.Int32)">
            <summary>
            Adds a version record for the specified document - does not check if it exists
            </summary>
            <param name="docId">The doc id</param>
            <param name="versionId">The id for the new version</param>
            <param name="versionNumber">The number for the new version</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.UpdateName(System.Guid,System.String)">
            <summary>
            Updates the document name for the id - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="newName">The new name to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.Reindex(System.Guid,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Applies a new set of indexes to a document
            </summary>
            <param name="docId">The id of our document</param>
            <param name="indexes">The new index values</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.Delete(System.Guid)">
            <summary>
            Deletes the specified document from the archive. HEAP of commands
            </summary>
            <param name="docId">The id of our document</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.DeleteXmlMetadata(System.Guid)">
            <summary>
            Deletes the xml metadata for the specified document - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Document.SetXmlMetadata(System.Guid,System.Xml.XmlDocument)">
            <summary>
            Sets the xml associated with a document - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="xml">The xml for the metadata</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Helpers.DocumentFragment">
            <summary>
            Contains utility methods for interfacing with Document Fragments
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus8.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.ApplyMoniker(Oculus.Storage.StorageFragment,Oculus.Plugins.Oculus8.Data.MonikerRecord)">
            <summary>
            Adds the moniker to the fragment
            </summary>
            <param name="fragment">The fragment</param>
            <param name="monikerRecord">The moniker</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.GetBasicFragmentFromRecord(System.Guid)">
            <summary>
            Retrieves a basic fragment from the default record. All that remains is to populate
            the online/offline monikers and document moniker
            </summary>
            <param name="fragmentId">The fragment id</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.GetBasicFragmentFromRecord(Oculus.Plugins.Oculus8.Data.FragRecord)">
            <summary>
            Retrieves a basic fragment from the default record. All that remains is to populate
            the data moniker and document moniker
            </summary>
            <param name="record">The base record</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.WriteStreamToFile(Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Writes the contents of the oculus stream to the specified location
            </summary>
            <param name="stream">The stream (will not be closed)</param>
            <param name="path">The path to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.WriteConsolidated(Oculus.Storage.StorageDocument,System.Guid,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Writes the consolidated content of the entire fragment to the output stream
            THIS IS ONLY FOR ARCHIVED DOCUMENTS
            </summary>
            <param name="documentId">The id of our DOCUMENT</param>
            <param name="stream">The stream to write to</param>
            <param name="mimeType">The target mime type, default is tiff</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.WriteConsolidated(System.Guid,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Writes the consolidated content of the entire fragment to the output stream
            </summary>
            <param name="documentId">The id of our DOCUMENT</param>
            <param name="stream">The stream to write to</param>
            <param name="mimeType">The target mime type, default is tiff</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.WriteFragmentData(System.Guid,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the simple content of the specified fragment to the output stream
            </summary>
            <param name="fragmentId">The id of our fragment</param>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.WriteFileToStream(System.String,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the simple content of the specified file to the output stream
            </summary>
            <param name="fragFilePath">The path of our fragment</param>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.FragmentExists(System.Guid)">
            <summary>
            Checks to see if the fragment with the specifid id exists. This is a cached operation.
            </summary>
            <param name="fragmentId">The id of the fragment to check</param>
            <returns>True if it exists, false if not</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.VerifyFragmentExists(System.Guid)">
            <summary>
            Ensures the fragment exists in the archive. Throws an exception if it does not.
            This is a cached operation
            </summary>
            <param name="fragmentId">The id of the fragment to verify</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.GetMaxSequenceNumber(System.Guid)">
            <summary>
            Retrieves the max sequence number for a specific version
            </summary>
            <param name="versionId">The id of the version</param>
            <returns>The highest sequence number in a version</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.GetDocumentIdForFragment(System.Guid)">
            <summary>
            Retrieves the document id for the specified fragment
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <returns>The id of the owner document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.GetDocumentFragment(System.Guid)">
            <summary>
            Retrieves an engine fragment for the specified id
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.GetDocumentFragments(System.Guid)">
            <summary>
            Retrieves all fragment records for a specific document.
            </summary>
            <param name="docId">The document id</param>
            <returns>The list of fragments, consolidated as necessary</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.GetFragmentPath(System.Guid)">
            <summary>
            Retrieves the path for a specific fragment
            </summary>
            <param name="fragmentId">The fragment id</param>
            <returns>The path</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.GetDocumentFragmentPaths(System.Guid)">
            <summary>
            Retrieves the paths for all fragments of a document
            </summary>
            <param name="docId">The doc id</param>
            <returns>The list of ids</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.Append(System.Guid,Oculus.Storage.StorageFragment)">
            <summary>
            Appends the fragment to the specified document
            </summary>
            <param name="docId">The id of our document</param>
            <param name="fragment">The fragment to append</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.Append(System.Guid,Oculus.Storage.StorageFragment,System.Int32)">
            <summary>
            Appends the fragment to the specified document version
            </summary>
            <param name="versionId">The version id to append to</param>
            <param name="fragment">The fragment to append</param>
            <param name="sequenceNo">The sequence number to use - should be last in list - does not check!</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.Delete(System.Guid)">
            <summary>
            Deletes the fragment with the specified id
            </summary>
            <param name="fragmentId">The id of the fragment to delete</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.GetLength(System.Guid)">
            <summary>
            Gets the length of a particular fragment.
            </summary>
            <param name="fragmentId">The id of the fragment we're interested in</param>
            <returns>The fragment length</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.GetLocalByteLength(System.Guid)">
            <summary>
            Retrieves the byte length of a particular fragment
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <returns>The number of bytes in the local data</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.GetLocalByteLength(System.String)">
            <summary>
            Retrieves the byte length of a particular fragment file.
            </summary>
            <param name="fragmentPath">The path of the fragment</param>
            <returns>The number of bytes in the local data</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.Write(System.Guid,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the fragment data to the specified stream.
            </summary>
            <param name="fragmentId">The id of our fragment</param>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.DeleteLocalData(System.Guid)">
            <summary>
            Removes the physical file for a fragment.
            </summary>
            <param name="fragmentId">The id of our fragment</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.SetMoniker(System.Guid,Oculus.Storage.ItemMoniker)">
            <summary>
            Sets the online moniker for a fragment
            </summary>
            <param name="fragmentId">The id of our fragment</param>
            <param name="moniker">The moniker</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.ConsolidatedWriteArchivedFragment(Oculus.Storage.StorageDocument,System.Guid,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of the specified document for ArchivedDocs
            </summary>
            <param name="documentId">The document id</param>
            <param name="stream">The stream to write to</param>
            <param name="mimeType">The target mime type</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.DocumentFragment.ConsolidatedWrite(System.Guid,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of the specified document
            </summary>
            <param name="documentId">The document id</param>
            <param name="stream">The stream to write to</param>
            <param name="mimeType">The target mime type</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Helpers.TempFrag">
            <summary>
            this is used ONLY to keep track of the tempfiles for consolidated write 
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Helpers.Util">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Util.GetId(System.String)">
            <summary>
            Retrieves a guid id from the string
            </summary>
            <param name="id">The id</param>
            <returns>The guid</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Util.IsImageType(System.String)">
            <summary>
            Determines if the mime type is an image
            </summary>
            <param name="mimeType">The mime type</param>
            <returns>True if it's tiff, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Helpers.Util.GetDbTypeForIndexType(Oculus.Plugins.Oculus8.LocalIndexType)">
            <summary>
            Gets a db type for the specified index type
            </summary>
            <param name="iType">The index type</param>
            <returns>The db type</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Engine">
            <summary>
            Oculus 8 native implementation of a plug-in.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.#ctor">
            <summary>
            Creates a default instance of the object - this is the constructor
            always activated by the engine
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Engine.m_manager">
            <summary>
            Contains all settings and access to most things we need to do
            - created on initialize
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.Engine.m_search">
            <summary>
            Handles a search, etc - created on initialize
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.UpdateExistingDocumentFragments(Oculus.Storage.StorageDocument)">
            <summary>
            NOT Supported
            Updates the fragments of a specific document with a new fragment set
            </summary>
            <param name="document">The document to be completely updated</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.UpdateExistingDocumentAppendFragment(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment)">
            <summary>
            NOT Supported
            Inserts a fragment at the end of all the fragments 
            </summary>
            <param name="document">The document to be updated</param>
            /// <param name="fragment">The fragment to be added at the end</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.UpdateExistingDocumentInsertFragmentBefore(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment,System.Int32)">
            <summary>
            NOT Supported
            Inserts a fragment at a specified position (before) the next fragment
            e.g if a frag is inserted at position 3, the current fragment 3 will move down to 4 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updated</param>
            <param name="fragment">The fragment to be added</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.UpdateExistingDocumentDeleteFragAtPosition(Oculus.Storage.StorageDocument,System.Int32)">
            <summary>
            NOT Supported
            Deletes a fragment at position x 
            e.g if a frag is deleted at position 3, the current fragment 4 will move up to 3 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updateded</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.AddDocument(Oculus.Storage.StorageDocument,Oculus.Configuration.ProfileContext)">
            <summary>
             Adds a document to the plug-in. Returns a moniker object representing the 
             newly added item. The plug-in should try and use the document and fragment id's, if possible.
            </summary>
            <param name="document">The document to be added</param>
            <param name="profileContext">The context under which the document should be added</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.ChangeDocumentProfile(Oculus.Storage.ItemMoniker,Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
             Changes the profile under which a document is stored to a new profile.
             Returns the moniker representing the item under the new profile.
            </summary>
            <param name="documentMoniker">The document moniker</param>
            <param name="newProfile">The new profile context to use</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.DeleteDocument(Oculus.Storage.ItemMoniker)">
            <summary>
             Removes the document with the specified id from the plug-in.
            </summary>
            <param name="documentMoniker">The moniker of the document to delete.</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.GetDocument(Oculus.Storage.ItemMoniker)">
            <summary>
            Returns a document, including all metadata, available properties, and indexes.  Fragments should
            be attached, but need only contain their names and monikers.
            </summary>
            <param name="documentMoniker">The document to retrieve, this wil automatically be attached to any fragments</param>
            <returns>The storage document object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.GetProfileId(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the profile id for the specified document.
            </summary>
            <param name="documentMoniker">The document in question</param>
            <returns>The profile id for the document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.ReindexDocument(Oculus.Storage.ItemMoniker,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
             Changes the index values under which a document is stored.
            </summary>
            <param name="documentMoniker">The document moniker to reindex</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.UpdateDocumentDescription(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
             Changes the description on the document.
            </summary>
            <param name="documentMoniker">
             the moniker of the document to change.
            </param>
            <param name="newDescription">
             the new description for the document
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.UpdateDocumentName(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
             Changes the name on the document.
            </summary>
            <param name="documentMoniker">
             the moniker of the document to change
            </param>
            <param name="newName">
             the new name for the document
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.UpdateXmlMetadata(Oculus.Storage.ItemMoniker,System.Xml.XmlDocument)">
            <summary>
            Sets the metadata to the document. If no xml exists, it is added.  
            If it does exist, it is updated to the new version of the xml.
            If the value is null, deletes the xml.
            </summary>
            <param name="documentMoniker">the moniker for the document</param>
            <param name="metadataXml">
             The xml data to add as metadata for this document/document version
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.ConsolidatedWrite(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of ALL the fragments in the moniker. Obviously, this can only be 
            done with certain data types. This functionality will generally only be used in situations where
            the content is known ahead of time to be image data. All images within the document should be combined.
            
            The mime type will be used to handle conversions. Natively, we support application/pdf and 
            image/tiff for our 7 and 8 plug-ins. However, you could handle your own types and still call in through
            the main document API.
            </summary>
            <param name="documentMoniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
            <param name="mimeType">The mime type of the resulting document</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.Engine.PluginId">
            <summary>
            Gets the plug-in id after initialization. Each plug-in is required to store their id 
            for subsequent retrievals.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.Initialise(System.Xml.XmlElement,System.String)">
            <summary>
             Passes config information to the plugin at instantiation. This method
             is the first method called after object construction.  Also included is the plug-in
             id - this should be remembered and used by plug-ins to populate fields on documents,
             etc.
            </summary>
            <param name="configXml">
             The xml containing the config information.
            </param>
            <param name="pluginId">
             The id of the plug-in as defined within configuration (i.e. the plug-in name).
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.NotifyOfSystemConfigChange(System.Xml.XmlDocument)">
            <summary>
             Passes all configuration information to the plugin as it exists in the config
             xml.
            </summary>
            <param name="newConfigXml">
             The xml containing the new system-wide config information.
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.GetAuditDetail(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the collection of audit information for the moniker
            </summary>
            <param name="documentMoniker">The moniker of the document</param>
            <returns>The collection of audit information</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.WriteFragmentToStream(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
             Provided with the moniker, the plug-in must write the object's data to the specified stream.
            </summary>
            <param name="moniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.GetFragmentDataLength(Oculus.Storage.ItemMoniker)">
            <summary>
             Returns the size of the data represented by the moniker
            </summary>
            <param name="moniker">The moniker of the data to write</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.GetFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Returns a fragment. It must have its DocumentMoniker property set.
            </summary>
            <param name="fragmentMoniker">The fragment to retrieve</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.SetFragmentLocationMoniker(Oculus.Storage.ItemMoniker,Oculus.Storage.ItemMoniker)">
            <summary>
             These methods updates the fragment (file) pointer in the target plug-in for the 
             target fragment to instead point to the archive plug-in.  
             The plug-in will defer retrieval of the physical file to the storage plug-in as specified in 
             the moniker parameter.
            </summary>
            <param name="fragmentMoniker">
             the moniker for the particular fragment being archived
            </param>
            <param name="locationMoniker">
             the moniker that maps to the fragment in the archive system
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.DeleteLocalFragmentData(Oculus.Storage.ItemMoniker)">
            <summary>
            This method may be called after a document is successfully archived and native format(s) of 
            the document fragment no longer needs to be stored. NB this is not to be confused with 
            IDocumentHandler.DeleteFragment, which is meant to delete the entire fragment record from 
            the system.  This call should only remove the local storage of the file associated with the fragment.
            </summary>
            <param name="moniker">
             the moniker for the particular data whose local byte data should be deleted
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.DeleteFragment(Oculus.Storage.ItemMoniker)">
            <summary>
             Removes a fragment from the system.
            </summary>
            <param name="moniker">the moniker to delete</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.Search(Oculus.Searching.SearchCriteria)">
            <summary>
             Performs a search for documents using the xml schema format defined by SearchXmlDocument.xsd.
             
             Please note, this procedure does not return any results, as results are retrieved via FetchResults
            </summary>
            <param name="search">The search criteria.</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.FetchResults(System.Int32)">
            <summary>
             Returns the specified number of records from the search.
            </summary>
            <param name="numRecords">
             The target number of records to retrieve from the search results
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.ReleaseSearch">
            <summary>
             Called when the search is no longer needed and all associated resources with the search may be safely released.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Engine.Dispose">
            <summary>
            Releases resources for the object
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.SqlOperation">
            <summary>
            Helper enumeration for working with virtual profiles
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.SqlOperation.Select">
            <summary>Select SQL statement</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.SqlOperation.Update">
            <summary>Update SQL statement</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.SqlOperation.Delete">
            <summary>Delete SQL statement</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.SqlOperation.Insert">
            <summary>Insert SQL statement</summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.FragmentMonikerType">
            <summary>
            Helper enum for fragment monikers
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.FragmentMonikerType.Online">
            <summary>Indicates an online moniker.</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.FragmentMonikerType.Offline">
            <summary>Indicates an offline moniker. Deprecated</summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.LocalIndexType">
            <summary>
            Unfortunately, these are the values stored in the type field for indexes in the database
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.LocalIndexType.String">
            <summary>Indicates a string index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.LocalIndexType.Numeric">
            <summary>Indicates a numeric index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.LocalIndexType.DateTime">
            <summary>Indicates a date-time index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.LocalIndexType.Date">
            <summary>Indicates a date index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.LocalIndexType.Time">
            <summary>Indicates a time index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.LocalIndexType.Currency">
            <summary>Indicates a currency (decimal) index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.LocalIndexType.Boolean">
            <summary>Indicates a boolean index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.LocalIndexType.List">
            <summary>Indicates a list (text) index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus8.LocalIndexType.Custom">
            <summary>Indicates any other index type</summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.PluginManager">
            <summary>
            This class contains the plug-in settings information, as loaded by the engine.
            This class is the only class that deals with reading the XML configuration
            provided by the plug-in.
            
            Please note that the settings component is valid for the lifetime of the plug-in.
            All database requests should go through this component, as well as any transaction
            processing.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.PluginManager.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Initialize the settings object with the xml node received from the engine
            </summary>
            <param name="config">The config</param>
            <param name="pluginId">The unique plug-in id</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.PluginManager.PluginId">
            <summary>Gets the plug-in id</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.PluginManager.StoreFolder">
            <summary>Gets the plug-in id</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.PluginManager.Server">
            <summary>Gets the server</summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.PluginManager.LoadVirtualProfiles(System.Xml.XmlNode)">
            <summary>
            Reads through the plug-in configuration and creates virtual profile nodes
            for each virtual profile encountered
            </summary>
            <param name="config">The configuration node</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.PluginManager.GetVirtualProfileId(System.Guid)">
            <summary>
            Fetch the id to use in the virtual profile list
            </summary>
            <param name="profileId">The profileId</param>
            <returns>The id to use</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.PluginManager.GetVirtualProfileId(System.String)">
            <summary>
            Fetch the id to use in the virtual profile list
            </summary>
            <param name="name">The name of the profile</param>
            <returns>The id to use</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.PluginManager.NewConnection">
            <summary>
            For operations which are atomic and need not be transactioned, we can
            use this method to get access to a connection which will be used
            for the duration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.PluginManager.GetTableName(System.Guid,Oculus.Plugins.Oculus8.SqlOperation)">
            <summary>
            Retrieves the profile's table name for the specified operation
            </summary>
            <param name="profileId">The profile id</param>
            <param name="op">The operation to be performed</param>
            <returns>The table to use</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.PluginManager.GetIndexesForProfile(System.Guid)">
            <summary>
            Fetches the list of indexes for the profile - this is a cached operation
            </summary>
            <param name="profileId">The profile id</param>
            <returns>The list of indexes</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.PluginManager.GetFragmentPath(System.Guid,System.String)">
            <summary>
            Returns the full path to the fragment on the file system.
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <param name="fragmentName">The fragment name</param>
            <returns>The system path to the file</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.PluginManager.GetDocumentMoniker(System.Guid)">
            <summary>
            Generates an item moniker for the document
            </summary>
            <param name="docId">The id for the document</param>
            <returns>The moniker</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.PluginManager.GetFragmentMoniker(System.Guid)">
            <summary>
            Generates an item moniker for the fragment
            </summary>
            <param name="fragmentId">The id for the fragment</param>
            <returns>The moniker</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.PluginManager.IsVirtualProfile(System.Guid)">
            <summary>
            Determines if the profile is virtual or not.
            </summary>
            <param name="profileId">The id of the profile in question</param>
            <returns>True if it's a virtual profile, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.PluginManager.NewAuditHelper(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Creates a new instance of the audit helper and also ensures the audit tables have 
            been created
            </summary>
            <param name="connection">The connection to use</param>
            <returns>The helper</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.Search">
            <summary>
            This contains settings for a virtual profile
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Search.#ctor(Oculus.Searching.SearchCriteria,Oculus.Plugins.Oculus8.PluginManager)">
            <summary>
            Create a new search
            </summary>
            <param name="searchCriteria">The search</param>
            <param name="manager">The manager</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Search.RunSearch(Oculus.Searching.SearchCriteria)">
            <summary>
            Runs the specified search
            </summary>
            <param name="searchCriteria">the search criteria</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Search.FetchResults(System.Int32)">
            <summary>
            Retrieves the specified number of results of the specific search
            </summary>
            <param name="numResults">The number of results to fetch</param>
            <returns>The results in the standard format</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.Search.Dispose">
            <summary>
            Releases any resources for the object
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.VirtualProfile">
            <summary>
            This contains settings for a virtual profile
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.VirtualProfile.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name">The name of the profile</param>
            <param name="selectTable">The select table</param>
            <param name="insertTable">The insert table</param>
            <param name="updateTable">The update table</param>
            <param name="deleteTable">The delete table</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.VirtualProfile.Name">
            <summary>Get/Set the name of the profile associated with this virtual profile</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.VirtualProfile.DeleteTable">
            <summary>Get/Set the table used to delete</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.VirtualProfile.InsertTable">
            <summary>Get/Set the table used to insert</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.VirtualProfile.SelectTable">
            <summary>Get/Set the table used to select</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.VirtualProfile.UpdateTable">
            <summary>Get/Set the table used to update</summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus8.AuditHelper">
            <summary>
            The audit helper for the 7 plug-in
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.AuditHelper.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="connection">The connection to use</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.AuditHelper.IdType">
            <summary>
            Gets the data type for our ids
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus8.AuditHelper.EmptyValue">
            <summary>
            Gets the empty value for our type
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus8.AuditHelper.IsEmptyValue(System.Guid)">
            <summary>
            Determines if the value is empty or not
            </summary>
            <param name="value">The value</param>
            <returns>True if empty, false otherwise</returns>
        </member>
        <member name="T:Oculus.Plugins.Collections.PluginExceptionList">
            <summary>
            Collection of plugin exception objects
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Collections.PluginExceptionList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Plugins.Collections.PluginExceptionList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Plugins.Collections.PluginList">
            <summary>
            Collection of plug-ins
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Collections.SearchPluginList">
            <summary>
            Collection of search plug-ins
            </summary>
        </member>
        <member name="T:Oculus.Plugins.PluginException">
            <summary>
             Indicates the specified scheme is invalid. Used in moniker parsing.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.PluginException.#ctor">
            <summary>
            Creates a new instance of the object
            </summary>
        </member>
        <member name="M:Oculus.Plugins.PluginException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the object
            </summary>
            <param name="plugin">The plug-in where the error occurred, cannot be null</param>
            <param name="message">The message for the error, cannot be null</param>
        </member>
        <member name="M:Oculus.Plugins.PluginException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the object
            </summary>
            <param name="plugin">The plug-in where the error occurred, cannot be null</param>
            <param name="exception">The exception generated in the plug-in, cannot be null</param>
        </member>
        <member name="M:Oculus.Plugins.PluginException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Creates a new instance of the object
            </summary>
            <param name="plugin">The plug-in where the error occurred, cannot be null</param>
            <param name="message">The message for the error, cannot be null</param>
            <param name="exception">The exception generated in the plug-in, cannot be null</param>
        </member>
        <member name="M:Oculus.Plugins.PluginException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="P:Oculus.Plugins.PluginException.PluginId">
            <summary>
            Gets the plugin id for the exception
            </summary>
        </member>
        <member name="P:Oculus.Plugins.PluginException.Exception">
            <summary>
            Gets the exception object
            </summary>
        </member>
        <member name="P:Oculus.Plugins.PluginException.Message">
            <summary>
            Gets the message for the exception
            </summary>
        </member>
        <member name="M:Oculus.Plugins.PluginException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Performs serialization
            </summary>
            <param name="info">serialization info</param>
            <param name="context">serialization context</param>
        </member>
        <member name="T:Oculus.Plugins.Interfaces.IDocumentHandler">
            <summary>
             This DMS interface deals strictly with documents in the system.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.AddDocument(Oculus.Storage.StorageDocument,Oculus.Configuration.ProfileContext)">
            <summary>
             Adds a document to the plug-in. Returns a moniker object representing the 
             newly added item. The plug-in should try and use the document and fragment id's, if possible.
            </summary>
            <param name="document">The document to be added</param>
            <param name="profileContext">The context under which the document should be added</param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.UpdateExistingDocumentFragments(Oculus.Storage.StorageDocument)">
            <summary>
            Updates the fragments of a specific document with a new fragment set
            </summary>
            <param name="document">The document to be completely updated</param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.UpdateExistingDocumentAppendFragment(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment)">
            <summary>
            Inserts a fragment at the end of all the fragments 
            </summary>
            <param name="document">The document to be updated</param>
            /// <param name="fragment">The fragment to be added at the end</param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.UpdateExistingDocumentInsertFragmentBefore(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment,System.Int32)">
            <summary>
            Inserts a fragment at a specified position (before) the next fragment
            e.g if a frag is inserted at position 3, the current fragment 3 will move down to 4 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updated</param>
            <param name="fragment">The fragment to be added</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.UpdateExistingDocumentDeleteFragAtPosition(Oculus.Storage.StorageDocument,System.Int32)">
            <summary>
            Deletes a fragment at position x 
            e.g if a frag is deleted at position 3, the current fragment 4 will move up to 3 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updateded</param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.ChangeDocumentProfile(Oculus.Storage.ItemMoniker,Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
             Changes the profile under which a document is stored to a new profile.
             Returns the moniker representing the item under the new profile.
            </summary>
            <param name="documentMoniker">The document moniker</param>
            <param name="newProfile">The new profile context to use</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.DeleteDocument(Oculus.Storage.ItemMoniker)">
            <summary>
             Removes the document with the specified id from the plug-in.
            </summary>
            <param name="documentMoniker">The moniker of the document to delete.</param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.GetDocument(Oculus.Storage.ItemMoniker)">
            <summary>
            Returns a document, including all metadata, available properties, and indexes.  Fragments should
            be attached, but need only contain their names and monikers.
            </summary>
            <param name="documentMoniker">The document to retrieve, this wil automatically be attached to any fragments</param>
            <returns>The storage document object</returns>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.GetProfileId(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the profile id for the specified document.
            </summary>
            <param name="documentMoniker">The document in question</param>
            <returns>The profile id for the document</returns>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.ReindexDocument(Oculus.Storage.ItemMoniker,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
             Changes the index values under which a document is stored.
            </summary>
            <param name="documentMoniker">The document to reindex</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.UpdateDocumentDescription(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
             Changes the description on the document.
            </summary>
            <param name="documentMoniker">
             the document to change.
            </param>
            <param name="newDescription">
             the new description for the document
            </param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.UpdateDocumentName(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
             Changes the name on the document.
            </summary>
            <param name="documentMoniker">
             the document to change
            </param>
            <param name="newName">
             the new name for the document
            </param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.UpdateXmlMetadata(Oculus.Storage.ItemMoniker,System.Xml.XmlDocument)">
            <summary>
            Sets the metadata to the document. If no xml exists, it is added.  
            If it does exist, it is updated to the new version of the xml.
            If the value is null, deletes the xml.
            </summary>
            <param name="documentMoniker">the document</param>
            <param name="metadataXml">
             The xml data to add as metadata for this document/document version
            </param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.ConsolidatedWrite(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of ALL the fragments in the moniker. Obviously, this can only be 
            done with certain data types. This functionality will generally only be used in situations where
            the content is known ahead of time to be image data. All images within the document should be combined.
            
            The mime type will be used to handle conversions. Natively, we support application/pdf and 
            image/tiff for our 7 and 8 plug-ins. However, you could handle your own types and still call in through
            the main document API.
            </summary>
            <param name="documentMoniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
            <param name="mimeType">The mime type of the resulting document</param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IDocumentHandler.GetAuditDetail(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the collection of audit information for the moniker
            </summary>
            <param name="documentMoniker">The moniker of the document</param>
            <returns>The collection of audit information</returns>
        </member>
        <member name="T:Oculus.Plugins.Interfaces.IFragmentHandler">
            <summary>
             This interface contains methods for handling fragment data.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IFragmentHandler.WriteFragmentToStream(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
             Provided with the moniker, the plug-in must write the object's data to the specified stream.
            </summary>
            <param name="moniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IFragmentHandler.GetFragmentDataLength(Oculus.Storage.ItemMoniker)">
            <summary>
             Returns the size of the data represented by the moniker
            </summary>
            <param name="moniker">The moniker of the data to write</param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IFragmentHandler.GetFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Returns a fragment. It must have its DocumentMoniker property set.
            </summary>
            <param name="moniker">The fragment to retrieve</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IFragmentHandler.SetFragmentLocationMoniker(Oculus.Storage.ItemMoniker,Oculus.Storage.ItemMoniker)">
            <summary>
             These methods updates the fragment (file) pointer in the target plug-in for the 
             target fragment to instead point to the archive plug-in.  
             The plug-in will defer retrieval of the physical file to the storage plug-in as specified in 
             the moniker parameter.
            </summary>
            <param name="moniker">
             the moniker for the particular fragment being archived
            </param>
            <param name="locationMoniker">
             the moniker that maps to the fragment in the archive system
            </param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IFragmentHandler.DeleteLocalFragmentData(Oculus.Storage.ItemMoniker)">
            <summary>
            This method may be called after a document is successfully archived and native format(s) of 
            the document fragment no longer needs to be stored. NB this is not to be confused with 
            IDocumentHandler.DeleteFragment, which is meant to delete the entire fragment record from 
            the system.  This call should only remove the local storage of the file associated with the fragment.
            </summary>
            <param name="moniker">
             the moniker for the particular data whose local byte data should be deleted
            </param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IFragmentHandler.DeleteFragment(Oculus.Storage.ItemMoniker)">
            <summary>
             Removes data from the system.
            </summary>
            <param name="moniker">the moniker to delete</param>
        </member>
        <member name="T:Oculus.Plugins.Interfaces.IPlugin">
            <summary>
            This interface is a standalone item used when negotiating storage or archive plug-ins. 
            This means that, to implement a storage item, one must only implement the methods contained 
            in this interface.
            
            Please note ALL plug-ins have to support IDisposable, even if they do nothing on the call
            to Dispose.
            </summary>    
        </member>
        <member name="P:Oculus.Plugins.Interfaces.IPlugin.PluginId">
            <summary>
            Gets the plug-in id after initialization. Each plug-in is required to store their id 
            for subsequent retrievals.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IPlugin.Initialise(System.Xml.XmlElement,System.String)">
            <summary>
             Passes config information to the plugin at instantiation. This method
             is the first method called after object construction.  Also included is the plug-in
             id - this should be remembered and used by plug-ins to populate fields on documents,
             etc.
            </summary>
            <param name="configXml">
             The xml containing the config information.
            </param>
            <param name="pluginId">
             The id of the plug-in as defined within configuration (i.e. the plug-in name).
            </param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.IPlugin.NotifyOfSystemConfigChange(System.Xml.XmlDocument)">
            <summary>
             Passes all configuration information to the plugin as it exists in the config
             xml.
            </summary>
            <param name="newConfigXml">
             The xml containing the new system-wide config information.
            </param>
        </member>
        <member name="T:Oculus.Plugins.Interfaces.ISearchPlugin">
            <summary>
            Represents a searchable plug-in within the system. A plug-in will only have one active search
            at a time.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.ISearchPlugin.Search(Oculus.Searching.SearchCriteria)">
            <summary>
             Performs a search for documents using the xml schema format defined by SearchXmlDocument.xsd.
             
             Please note, this procedure does not return any results, as results are retrieved via FetchResults
            </summary>
            <param name="search">The search criteria.</param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.ISearchPlugin.FetchResults(System.Int32)">
            <summary>
             Returns the specified number of records from the search.
            </summary>
            <param name="numRecords">
             The target number of records to retrieve from the search results
            </param>
        </member>
        <member name="M:Oculus.Plugins.Interfaces.ISearchPlugin.ReleaseSearch">
            <summary>
             Called when the search is no longer needed and all associated resources with the search may be safely released.
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Helper">
            <summary>
            Helper class for working with plug-ins
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Helper.GetPlugin``1(System.String,System.Guid,System.String)">
            <summary>
            Retrieves an instance of the specified plug-in, cast using "as" to the type argument,
            being one of the interfaces. Will automatically verify the plug-in supports the interface,
            and that the current user possesses the required permission against the context id.
            
            If context is Guid.Empty or permission is null, no permission will be verified.
            </summary>
            <typeparam name="T">The type for the plug-in to return</typeparam>
            <param name="pluginId">The id of the plug-in on the local machine</param>
            <param name="contextId">The context id, use Guid.Empty for none</param>
            <param name="requiredPermission">The permission to demand, use null for none.</param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.Helper.DeployNewConfiguration">
            <summary>
            Notifies all plug-ins on the machine of new configuration
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Acquisition.AcquisitionMoniker">
            <summary>
            A customized moniker used within the acquisition plug-in
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.AcquisitionMoniker.#ctor">
            <summary>
            Create an empty moniker
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.AcquisitionMoniker.#ctor(Oculus.Storage.ItemMoniker.ItemType,System.String,System.Guid)">
            <summary>
            Create an initialized instance of the moniker
            </summary>
            <param name="type">The type</param>
            <param name="server">The server</param>
            <param name="itemId">The item unique id</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.AcquisitionMoniker.#ctor(Oculus.Storage.ItemMoniker)">
            <summary>
            Creates an acquisition moniker instance from a base item moniker
            </summary>
            <param name="baseMoniker">The base moniker</param>
        </member>
        <member name="P:Oculus.Plugins.Acquisition.AcquisitionMoniker.Queue">
            <summary>
            Get/set the queue associated with the moniker
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Acquisition.AcquisitionMoniker.Server">
            <summary>
            Get/set the server for the moniker
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Acquisition.AcquisitionMoniker.ItemInternalId">
            <summary>
            Get/set the internal item id for the moniker
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.AcquisitionMoniker.GetDocumentMoniker(System.String,System.Guid,System.Guid)">
            <summary>
            Helper
            </summary>
            <param name="machine">the active michine</param>
            <param name="documentUniqueId">the document id</param>
            <param name="profileContextID">the profile context</param>
            <returns></returns>
        </member>
        <member name="T:Oculus.Plugins.Acquisition.Engine">
            <summary>
            This class is used as a standard interface to documents while they are still
            in the acquisition phase. This allows different components to interact with
            acquisition documents the same as they would storage documents.
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Acquisition.Engine.AcquisitionPluginId">
            <summary>
            The acquisition plug-in id always has the same name. Which machine it connects
            to depends on the moniker sent through.
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Acquisition.Engine.PluginId">
            <summary>
            Gets the constant plugin id value
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.Initialise(System.Xml.XmlElement,System.String)">
            <summary>
            Not used
            </summary>
            <param name="configXml">Not used</param>
            <param name="pluginId">Not used</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.NotifyOfSystemConfigChange(System.Xml.XmlDocument)">
            <summary>
            Not used
            </summary>
            <param name="newConfigXml">Not used</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.Dispose">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.UpdateExistingDocumentFragments(Oculus.Storage.StorageDocument)">
            <summary>
            NOT Supported
            Updates the fragments of a specific document with a new fragment set
            </summary>
            <param name="document">The document to be completely updated</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.UpdateExistingDocumentAppendFragment(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment)">
            <summary>
            NOT Supported
            Inserts a fragment at the end of all the fragments 
            </summary>
            <param name="document">The document to be updated</param>
            /// <param name="fragment">The fragment to be added at the end</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.UpdateExistingDocumentInsertFragmentBefore(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment,System.Int32)">
            <summary>
            NOT Supported
            Inserts a fragment at a specified position (before) the next fragment
            e.g if a frag is inserted at position 3, the current fragment 3 will move down to 4 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updated</param>
            <param name="fragment">The fragment to be added</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.UpdateExistingDocumentDeleteFragAtPosition(Oculus.Storage.StorageDocument,System.Int32)">
            <summary>
            NOT Supported
            Deletes a fragment at position x 
            e.g if a frag is deleted at position 3, the current fragment 4 will move up to 3 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updateded</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.AddDocument(Oculus.Storage.StorageDocument,Oculus.Configuration.ProfileContext)">
            <summary>
            Unsupported, use the AcuisitionDocument object
            </summary>
            <param name="document">Unsupported</param>
            <param name="profileContext">Unsupported</param>
            <returns>Unsupported</returns>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.ChangeDocumentProfile(Oculus.Storage.ItemMoniker,Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Changes the document profile
            </summary>
            <param name="documentMoniker">The document moniker</param>
            <param name="newProfile">The new profile</param>
            <param name="newIndexes">The new set of indexes</param>
            <returns>A new moniker representing the document</returns>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.DeleteDocument(Oculus.Storage.ItemMoniker)">
            <summary>
            Deletes the specified document
            </summary>
            <param name="documentMoniker">The document to delete</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.GetDocument(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the specified document
            </summary>
            <param name="documentMoniker">The document to retrieve</param>
            <returns>The document object</returns>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.GetProfileId(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the profile id for the specified document
            </summary>
            <param name="documentMoniker">The document</param>
            <returns>The profile id</returns>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.ReindexDocument(Oculus.Storage.ItemMoniker,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Changes the set of indexes on the specified document
            </summary>
            <param name="documentMoniker">The document to reindex</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.UpdateDocumentDescription(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
            Unsupported
            </summary>
            <param name="documentMoniker">Unsupported</param>
            <param name="newDescription">Unsupported</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.UpdateDocumentName(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
            Unsupported
            </summary>
            <param name="documentMoniker">Unsupported</param>
            <param name="newName">Unsupported</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.UpdateXmlMetadata(Oculus.Storage.ItemMoniker,System.Xml.XmlDocument)">
            <summary>
            Updates the annotations for the document while it is in process
            </summary>
            <param name="documentMoniker">The document moniker</param>
            <param name="metadataXml">The xml to use</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.ConsolidatedWrite(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Unsupported
            </summary>
            <param name="documentMoniker">Unsupported</param>
            <param name="outputStream">Unsupported</param>
            <param name="mimeType">Unsupported</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.GetAuditDetail(Oculus.Storage.ItemMoniker)">
            <summary>
            Unsupported
            </summary>
            <param name="documentMoniker">Unsupported</param>
            <returns>Unsupported</returns>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.WriteFragmentToStream(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Write the fragment data to the stream
            </summary>
            <param name="moniker">The fragment moniker</param>
            <param name="outputStream">The output stream</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.GetFragmentDataLength(Oculus.Storage.ItemMoniker)">
            <summary>
            Get the length of the fragment data
            </summary>
            <param name="moniker">The fragment moniker</param>
            <returns>The length of the data</returns>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.GetFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves a fragment for the specified moniker
            </summary>
            <param name="fragmentMoniker">The fragment moniker</param>
            <returns>The fragment</returns>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.SetFragmentLocationMoniker(Oculus.Storage.ItemMoniker,Oculus.Storage.ItemMoniker)">
            <summary>
            Unsupported
            </summary>
            <param name="fragmentMoniker">Unsupported</param>
            <param name="locationMoniker">Unsupported</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.DeleteLocalFragmentData(Oculus.Storage.ItemMoniker)">
            <summary>
            Unsupported
            </summary>
            <param name="moniker">Unsupported</param>
        </member>
        <member name="M:Oculus.Plugins.Acquisition.Engine.DeleteFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Deletes the fragment from the system
            </summary>
            <param name="moniker">The fragment moniker</param>
        </member>
        <member name="T:Oculus.Plugins.Auditing.Helper`1">
            <summary>
            Handles auditing automatically for a plug-in.  This class DOES NOT do any checking for tables, and
            will fail on retrieve or create of records if the tables have not been verified.
            </summary>
            <typeparam name="T">The type to use for the </typeparam>
        </member>
        <member name="M:Oculus.Plugins.Auditing.Helper`1.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor.
            </summary>
            <param name="connection">The connection</param>
        </member>
        <member name="P:Oculus.Plugins.Auditing.Helper`1.IdType">
            <summary>
            Gets the db type for our ids
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Auditing.Helper`1.EmptyValue">
            <summary>
            Gets the empty value for the type
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Auditing.Helper`1.IsEmptyValue(`0)">
            <summary>
            Determines if the value is empty or not
            </summary>
            <param name="value">The value</param>
            <returns>True if empty, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.Auditing.Helper`1.EnsureTables(System.String,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Ensures the tables for auditing have been added to the database. Tables must be committed
            prior to any data being added.
            </summary>
            <param name="connectionString">Used to keep track of which databases have already been checked</param>
            <param name="connection">The connection to use, should generally be different than the main one</param>
        </member>
        <member name="M:Oculus.Plugins.Auditing.Helper`1.SubmitOperation(Oculus.Storage.AuditOperation,`0,System.String)">
            <summary>
            Submits an audit record to the system
            </summary>
            <param name="operation">The operation</param>
            <param name="documentId">The document id</param>
            <param name="comment">The comment</param>
        </member>
        <member name="M:Oculus.Plugins.Auditing.Helper`1.SubmitOperation(Oculus.Storage.AuditOperation,`0,`0,System.String)">
            <summary>
            Submits an audit record to the system
            </summary>
            <param name="operation">The operation</param>
            <param name="documentId">The document id</param>
            <param name="fragmentId">The fragment id</param>
            <param name="comment">The comment</param>
        </member>
        <member name="M:Oculus.Plugins.Auditing.Helper`1.GetAuditDetail(`0,System.String,System.Guid)">
            <summary>
            Gets the list of audit records for the document
            </summary>
            <param name="documentId">The document id to search for</param>
            <param name="pluginId">The plug-in id to use in the return monikers</param>
            <param name="profileContextId">The profile context id to use in the return monikers</param>
            <returns>The list of associated audit records</returns>
        </member>
        <member name="T:Oculus.Plugins.COLD.AuditHelper">
            <summary>
            The audit helper for the 7 plug-in
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.AuditHelper.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="connection">The connection to use</param>
        </member>
        <member name="P:Oculus.Plugins.COLD.AuditHelper.IdType">
            <summary>
            Gets the data type for our ids
            </summary>
        </member>
        <member name="P:Oculus.Plugins.COLD.AuditHelper.EmptyValue">
            <summary>
            Gets the empty value for our type
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.AuditHelper.IsEmptyValue(System.Guid)">
            <summary>
            Determines if the value is empty or not
            </summary>
            <param name="value">The value</param>
            <returns>True if empty, false otherwise</returns>
        </member>
        <member name="T:Oculus.Plugins.COLD.Collections.ParamDictionary">
            <summary>
            Class which contains a parameter-name indexed list of search criteria items
            </summary>
        </member>
        <member name="T:Oculus.Plugins.COLD.Data.Collections.DocProfileRecordList">
            <summary>
            List of DocProfileRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.COLD.Data.Collections.DocRecordList">
            <summary>
            List of DocRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.COLD.Data.Collections.FragRecordList">
            <summary>
            List of FragRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.COLD.Data.Collections.IndexRecordList">
            <summary>
            List of IndexRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.COLD.Data.Collections.MonikerRecordList">
            <summary>
            List of MonikerRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.COLD.Data.Collections.IndexDictionary">
            <summary>
            A dictionary of index records, indexed by index name
            </summary>
        </member>
        <member name="T:Oculus.Plugins.COLD.Data.DocProfileRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.DocProfileRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.DocProfileRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.COLD.Data.Collections.IndexDictionary)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
            <param name="indexes">The indexes to add to the record</param>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.DocProfileRecord.DocId">
            <summary>
            The document id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.DocProfileRecord.Indexes">
            <summary>
            The set of indexes
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.DocProfileRecord.LoadRecord(System.Guid,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.COLD.PluginManager)">
            <summary>
            Loads a DOC_DOCUMENT record based on the id provided.
            </summary>
            <param name="docId">The document id</param>
            <param name="profileId">The profile id for the document</param>
            <param name="connection">The connection</param>
            <param name="manager">The manager to use</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.DocProfileRecord.AddRecord(Oculus.Plugins.COLD.Data.DocProfileRecord,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.COLD.PluginManager)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="profileId">The profile id to use</param>
            <param name="connection">The connection to use</param>
            <param name="manager">Our manager</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.DocProfileRecord.UpdateRecord(Oculus.Plugins.COLD.Data.DocProfileRecord,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.COLD.PluginManager)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="profileId">The profile id to use</param>
            <param name="connection">The connection to use</param>
            <param name="manager">Our manager</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.DocProfileRecord.DeleteRecord(System.Guid,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.COLD.PluginManager)">
            <summary>
            Deletes the specified record from the profile table
            </summary>
            <param name="docId">The document id</param>
            <param name="profileId">The profile id</param>
            <param name="connection">The connection</param>
            <param name="manager">The manager</param>
        </member>
        <member name="T:Oculus.Plugins.COLD.Data.DocRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.DocRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.DocRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.DocRecord.Id">
            <summary>
            The document id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.DocRecord.ProfileId">
            <summary>
            The profile id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.DocRecord.Name">
            <summary>
            The document name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.DocRecord.Description">
            <summary>
            The document description
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.DocRecord.MetaData">
            <summary>
            The document metadata xml
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.DocRecord.SqlInsertRecord">
            <summary>
            1:ID, 2:PROFILE_ID, 3:NAME, 4:DESCRIPTION, 5:SECURED, 6:METADATA
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.DocRecord.AddRecord(Oculus.Plugins.COLD.Data.DocRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.DocRecord.LoadRecord(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads a DOC_DOCUMENT record based on the id provided.
            </summary>
            <param name="id">The id</param>
            <param name="connection">The connection</param>
            <returns>The record</returns>
        </member>
        <member name="T:Oculus.Plugins.COLD.Data.FragRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.FragRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.FragRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.FragRecord.Id">
            <summary>
            The fragment id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.FragRecord.VersionId">
            <summary>
            The version id for the fragment
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.FragRecord.FileName">
            <summary>
            The fragment file name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.FragRecord.Sequence">
            <summary>
            The sequence of the fragment within the version
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.FragRecord.PageCount">
            <summary>
            The total number of pages. Deprecated
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.FragRecord.ContentType">
            <summary>
            The MIME type for the document
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.FragRecord.SqlInsertRecord">
            <summary>
            1:ID, 2:VERSION_ID, 3:FILE_NAME, 4:PAGE_COUNT, 5:SEQUENCE, 6:SECURED
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.FragRecord.LoadFromCommand(System.Data.Common.DbCommand,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves a list of fragment records from the specified command
            </summary>
            <param name="cmd">The command</param>
            <param name="connection">The connection</param>
            <returns>The set of records</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.FragRecord.AddRecord(Oculus.Plugins.COLD.Data.FragRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.FragRecord.GetAllRecordsForDoc(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads all DOC_FRAGMENT record based on the doc id provided.
            </summary>
            <param name="docId">The document id</param>
            <param name="connection">The connection</param>
            <returns>The fragment records, sorted in sequence</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.FragRecord.LoadRecord(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads a DOC_FRAGMENT record based on the id provided.
            </summary>
            <param name="id">The id</param>
            <param name="connection">The connection</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.FragRecord.GetConsolidationFragmentSequence(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves out the list of fragments that, in consolidation mode, would comprise the document
            </summary>
            <param name="documentId">the document id</param>
            <param name="connection">The connection</param>
            <returns>The list of items</returns>
        </member>
        <member name="T:Oculus.Plugins.COLD.Data.IndexRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.IndexRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.IndexRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.IndexRecord.Id">
            <summary>
            The index unique id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.IndexRecord.ProfileId">
            <summary>
            The profile id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.IndexRecord.Name">
            <summary>
            The index name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.IndexRecord.IndexType">
            <summary>
            The index type
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.IndexRecord.Length">
            <summary>
            The index length
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.IndexRecord.Attributes">
            <summary>
            The index attributes
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.IndexRecord.Active">
            <summary>
            Whether or not the index is active
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.IndexRecord.DbType">
            <summary>
            The database type for the index
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.IndexRecord.SqlInsertRecord">
            <summary>
            inserts an index record. 0:id, 1:profile id, 2:name, 3:type, 4:length, 5:attributes, 6:active
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.IndexRecord.SqlUpdateRecord">
            <summary>
            updates an index record. 0:length, 1:active, 2:profile id, 3:name
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.IndexRecord.SetDbType">
            <summary>
            Automatically sets the DbType value based on the Type
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.IndexRecord.GetIndexes(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves the set of indexes for the specified profile
            </summary>
            <param name="profileId">The id</param>
            <param name="connection">The connection</param>
            <returns>The string-indexed list of records</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.IndexRecord.AddRecord(Oculus.Plugins.COLD.Data.IndexRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.IndexRecord.UpdateRecord(Oculus.Plugins.COLD.Data.IndexRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Updates the LENGTH and ACTIVE status for the specified record - nothing else can change
            </summary>
            <param name="record">The record to update</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="T:Oculus.Plugins.COLD.Data.MonikerRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.MonikerRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.MonikerRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.MonikerRecord.Moniker">
            <summary>
            The moniker for the record
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.MonikerRecord.FragmentId">
            <summary>
            The fragment id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.MonikerRecord.MonikerType">
            <summary>
            The type of moniker for the fragment. NB from v9 this will only be online
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Data.MonikerRecord.SqlInsertRecord">
            <summary>
            1:FRAGMENT_ID, 2:LIBRARY_ID, 3:PATH
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.MonikerRecord.GetAllRecords(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,System.String,System.String)">
            <summary>
            Gets all the records for the specified id and sql
            </summary>
            <param name="id">The id to use</param>
            <param name="connection">The connection to use</param>
            <param name="sql">The sql to use</param>
            <param name="paramName">The parameter name to use</param>
            <returns>The set of records for the query</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.MonikerRecord.AddRecord(Oculus.Plugins.COLD.Data.MonikerRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.MonikerRecord.GetAllRecordsForDoc(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads all DOC_MONIKER records based on the doc id provided.
            </summary>
            <param name="docId">The document id</param>
            <param name="connection">The connection</param>
            <returns>The fragment records, sorted in sequence</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.MonikerRecord.GetAllRecordsForFrag(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads all DOC_MONIKER records based on the fragment id provided.
            </summary>
            <param name="fragmentId">The fragment id</param>
            <param name="connection">The connection</param>
            <returns>The fragment records, sorted in sequence</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Data.MonikerRecord.GetOrCreateLibrary(System.String,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves the id for an existing library, or inserts a new library and returns the id.
            </summary>
            <param name="libraryText">The text for the library</param>
            <param name="connection">The connection</param>
            <returns>The id to use for the library</returns>
        </member>
        <member name="T:Oculus.Plugins.COLD.Engine">
            <summary>
            Oculus 8 native implementation of a plug-in.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.#ctor">
            <summary>
            Creates a default instance of the object - this is the constructor
            always activated by the engine
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Engine.m_manager">
            <summary>
            Contains all settings and access to most things we need to do
            - created on initialize
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Engine.m_search">
            <summary>
            Handles a search, etc - created on initialize
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.UpdateExistingDocumentFragments(Oculus.Storage.StorageDocument)">
            <summary>
            NOT Supported
            Updates the fragments of a specific document with a new fragment set
            </summary>
            <param name="document">The document to be completely updated</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.UpdateExistingDocumentAppendFragment(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment)">
            <summary>
            NOT Supported
            Inserts a fragment at the end of all the fragments 
            </summary>
            <param name="document">The document to be updated</param>
            /// <param name="fragment">The fragment to be added at the end</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.UpdateExistingDocumentInsertFragmentBefore(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment,System.Int32)">
            <summary>
            NOT Supported
            Inserts a fragment at a specified position (before) the next fragment
            e.g if a frag is inserted at position 3, the current fragment 3 will move down to 4 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updated</param>
            <param name="fragment">The fragment to be added</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.UpdateExistingDocumentDeleteFragAtPosition(Oculus.Storage.StorageDocument,System.Int32)">
            <summary>
            NOT Supported
            Deletes a fragment at position x 
            e.g if a frag is deleted at position 3, the current fragment 4 will move up to 3 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updateded</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.AddDocument(Oculus.Storage.StorageDocument,Oculus.Configuration.ProfileContext)">
            <summary>
             Adds a document to the plug-in. Returns a moniker object representing the 
             newly added item. The plug-in should try and use the document and fragment id's, if possible.
            </summary>
            <param name="document">The document to be added</param>
            <param name="profileContext">The context under which the document should be added</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.ChangeDocumentProfile(Oculus.Storage.ItemMoniker,Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
             Changes the profile under which a document is stored to a new profile.
             Returns the moniker representing the item under the new profile.
            </summary>
            <param name="documentMoniker">The document moniker</param>
            <param name="newProfile">The new profile context to use</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.DeleteDocument(Oculus.Storage.ItemMoniker)">
            <summary>
             Removes the document with the specified id from the plug-in.
            </summary>
            <param name="documentMoniker">The moniker of the document to delete.</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.GetDocument(Oculus.Storage.ItemMoniker)">
            <summary>
            Returns a document, including all metadata, available properties, and indexes.  Fragments should
            be attached, but need only contain their names and monikers.
            </summary>
            <param name="documentMoniker">The document to retrieve, this wil automatically be attached to any fragments</param>
            <returns>The storage document object</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.GetProfileId(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the profile id for the specified document.
            </summary>
            <param name="documentMoniker">The document in question</param>
            <returns>The profile id for the document</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.ReindexDocument(Oculus.Storage.ItemMoniker,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
             Changes the index values under which a document is stored.
            </summary>
            <param name="documentMoniker">The document moniker to reindex</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.UpdateDocumentDescription(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
             Changes the description on the document.
            </summary>
            <param name="documentMoniker">
             the moniker of the document to change.
            </param>
            <param name="newDescription">
             the new description for the document
            </param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.UpdateDocumentName(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
             Changes the name on the document.
            </summary>
            <param name="documentMoniker">
             the moniker of the document to change
            </param>
            <param name="newName">
             the new name for the document
            </param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.UpdateXmlMetadata(Oculus.Storage.ItemMoniker,System.Xml.XmlDocument)">
            <summary>
            Sets the metadata to the document. If no xml exists, it is added.  
            If it does exist, it is updated to the new version of the xml.
            If the value is null, deletes the xml.
            </summary>
            <param name="documentMoniker">the moniker for the document</param>
            <param name="metadataXml">
             The xml data to add as metadata for this document/document version
            </param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.ConsolidatedWrite(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of ALL the fragments in the moniker. Obviously, this can only be 
            done with certain data types. This functionality will generally only be used in situations where
            the content is known ahead of time to be image data. All images within the document should be combined.
            
            The mime type will be used to handle conversions. Natively, we support application/pdf and 
            image/tiff for our 7 and 8 plug-ins. However, you could handle your own types and still call in through
            the main document API.
            </summary>
            <param name="documentMoniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
            <param name="mimeType">The mime type of the resulting document</param>
        </member>
        <member name="P:Oculus.Plugins.COLD.Engine.PluginId">
            <summary>
            Gets the plug-in id after initialization. Each plug-in is required to store their id 
            for subsequent retrievals.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.Initialise(System.Xml.XmlElement,System.String)">
            <summary>
             Passes config information to the plugin at instantiation. This method
             is the first method called after object construction.  Also included is the plug-in
             id - this should be remembered and used by plug-ins to populate fields on documents,
             etc.
            </summary>
            <param name="configXml">
             The xml containing the config information.
            </param>
            <param name="pluginId">
             The id of the plug-in as defined within configuration (i.e. the plug-in name).
            </param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.NotifyOfSystemConfigChange(System.Xml.XmlDocument)">
            <summary>
             Passes all configuration information to the plugin as it exists in the config
             xml.
            </summary>
            <param name="newConfigXml">
             The xml containing the new system-wide config information.
            </param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.GetAuditDetail(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the collection of audit information for the moniker
            </summary>
            <param name="documentMoniker">The moniker of the document</param>
            <returns>The collection of audit information</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.WriteFragmentToStream(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
             Provided with the moniker, the plug-in must write the object's data to the specified stream.
            </summary>
            <param name="moniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.GetFragmentDataLength(Oculus.Storage.ItemMoniker)">
            <summary>
             Returns the size of the data represented by the moniker
            </summary>
            <param name="moniker">The moniker of the data to write</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.GetFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Returns a fragment. It must have its DocumentMoniker property set.
            </summary>
            <param name="fragmentMoniker">The fragment to retrieve</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.SetFragmentLocationMoniker(Oculus.Storage.ItemMoniker,Oculus.Storage.ItemMoniker)">
            <summary>
             These methods updates the fragment (file) pointer in the target plug-in for the 
             target fragment to instead point to the archive plug-in.  
             The plug-in will defer retrieval of the physical file to the storage plug-in as specified in 
             the moniker parameter.
            </summary>
            <param name="fragmentMoniker">
             the moniker for the particular fragment being archived
            </param>
            <param name="locationMoniker">
             the moniker that maps to the fragment in the archive system
            </param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.DeleteLocalFragmentData(Oculus.Storage.ItemMoniker)">
            <summary>
            This method may be called after a document is successfully archived and native format(s) of 
            the document fragment no longer needs to be stored. NB this is not to be confused with 
            IDocumentHandler.DeleteFragment, which is meant to delete the entire fragment record from 
            the system.  This call should only remove the local storage of the file associated with the fragment.
            </summary>
            <param name="moniker">
             the moniker for the particular data whose local byte data should be deleted
            </param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.DeleteFragment(Oculus.Storage.ItemMoniker)">
            <summary>
             Removes a fragment from the system.
            </summary>
            <param name="moniker">the moniker to delete</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.Search(Oculus.Searching.SearchCriteria)">
            <summary>
             Performs a search for documents using the xml schema format defined by SearchXmlDocument.xsd.
             
             Please note, this procedure does not return any results, as results are retrieved via FetchResults
            </summary>
            <param name="search">The search criteria.</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.FetchResults(System.Int32)">
            <summary>
             Returns the specified number of records from the search.
            </summary>
            <param name="numRecords">
             The target number of records to retrieve from the search results
            </param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.ReleaseSearch">
            <summary>
             Called when the search is no longer needed and all associated resources with the search may be safely released.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Engine.Dispose">
            <summary>
            Releases resources for the object
            </summary>
        </member>
        <member name="T:Oculus.Plugins.COLD.SqlOperation">
            <summary>
            Helper enumeration for working with virtual profiles
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.SqlOperation.Select">
            <summary>Select SQL statement</summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.SqlOperation.Update">
            <summary>Update SQL statement</summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.SqlOperation.Delete">
            <summary>Delete SQL statement</summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.SqlOperation.Insert">
            <summary>Insert SQL statement</summary>
        </member>
        <member name="T:Oculus.Plugins.COLD.FragmentMonikerType">
            <summary>
            Helper enum for fragment monikers
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.FragmentMonikerType.Online">
            <summary>Indicates an online moniker.</summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.FragmentMonikerType.Offline">
            <summary>Indicates an offline moniker. Deprecated</summary>
        </member>
        <member name="T:Oculus.Plugins.COLD.LocalIndexType">
            <summary>
            Unfortunately, these are the values stored in the type field for indexes in the database
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.LocalIndexType.String">
            <summary>Indicates a string index</summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.LocalIndexType.Numeric">
            <summary>Indicates a numeric index</summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.LocalIndexType.DateTime">
            <summary>Indicates a date-time index</summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.LocalIndexType.Date">
            <summary>Indicates a date index</summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.LocalIndexType.Time">
            <summary>Indicates a time index</summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.LocalIndexType.Currency">
            <summary>Indicates a currency (decimal) index</summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.LocalIndexType.Boolean">
            <summary>Indicates a boolean index</summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.LocalIndexType.List">
            <summary>Indicates a list (text) index</summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.LocalIndexType.Custom">
            <summary>Indicates any other index type</summary>
        </member>
        <member name="T:Oculus.Plugins.COLD.Helpers.Config">
            <summary>
            Contains utility methods for interfacing with configuration, namely changing
            our schema based on new configuration.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.COLD.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="F:Oculus.Plugins.COLD.Helpers.Config.SqlInvalidateIndex">
            <summary>
            Sets index record inactive. 0:false, 1:profile id, 2:index name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Helpers.Config.SqlDropView">
            <summary>
            Drop the view. Format 0:view name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.COLD.Helpers.Config.SqlCreateView">
            <summary>
            Create the view. Format 0:view name, 1:base table
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.AddProfileEntry(System.Guid,System.String)">
            <summary>
            Adds the profile entry to the profiles table
            </summary>
            <param name="profileId">The id</param>
            <param name="profileName">the name</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.UpdateProfileEntry(System.Guid,System.String)">
            <summary>
            Updates the existing profile entry in the profiles table
            </summary>
            <param name="profileId">The id</param>
            <param name="profileName">the name</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.ReCreateProfileView(System.Guid,System.String,System.String)">
            <summary>
            Drops and creates the view on the profile, but only if the new name is different from the
            new name.
            </summary>
            <param name="profileId">The profile id</param>
            <param name="oldProfileName">The old name of the profile, string.empty if no old name</param>
            <param name="newProfileName">The new name of the profile (may be the same)</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.CreateProfileView(System.Guid,System.String,System.Boolean)">
            <summary>
            Create the profile view
            </summary>
            <param name="profileId">The id</param>
            <param name="profileName">The name for the view</param>
            <param name="useSeparateConnection">If we need to use a separate connection to do the drop</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.DropProfileView(System.String,System.Boolean)">
            <summary>
            Drops the profile view from the system
            </summary>
            <param name="oldProfileName">The old profile name</param>
            <param name="useSeparateConnection">If we need to use a separate connection to do the drop</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.ExpansionRequired(Oculus.Data.Schema.Column,Oculus.Data.Schema.Column)">
            <summary>
            Determines if the base column needs to be expanded to accommodate the new column
            </summary>
            <param name="baseColumn">the current column</param>
            <param name="newColumn">the column to compare to</param>
            <returns>True if expansion is necessary, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.ModifyExistingProfileTable(System.Guid,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Modifies an existing profile table for the particular profile
            </summary>
            <param name="profileId">The id of the profile</param>
            <param name="profileNode">The node for the profile</param>
            <param name="doTableUpdates">True if we need to do schema changes, false if not (e.g. false for virtual profiles)</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.CreateNewProfileTable(System.Guid,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Creates a new profile table for the particular profile
            </summary>
            <param name="profileId">The id of the profile</param>
            <param name="profileNode">The node for the profile</param>
            <param name="doTableUpdates">True if we need to do schema changes, false if not (e.g. false for virtual profiles)</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.ToIndexRecord(System.Guid,Oculus.Data.Schema.Column)">
            <summary>
            Creates an index record object based on the column data
            </summary>
            <param name="profileId">The profile id</param>
            <param name="column">The column</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.UpdateIndexTable(System.Guid,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Plugins.COLD.Collections.LocalIndexTypeDictionary)">
            <summary>
            Updates the INDEX table entries for each profile
            </summary>
            <param name="profileId">The profile id</param>
            <param name="indexesToAdd">The indexes to add</param>
            <param name="indexesToModify">The indexes to modify</param>
            <param name="indexesToInactivate">The indexes to inactivate (have been removed)</param>
            <param name="indexTypes">A dictionary of index types which links the column names to a data type</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.GetCurrentProfiles">
            <summary>
            Returns an id-indexed list of the profiles currently in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Config.NotifyOfNewConfiguration(System.Xml.XmlDocument)">
            <summary>
            Obtains a new copy of configuration
            </summary>
            <param name="newConfigXml">The new configuration</param>
        </member>
        <member name="T:Oculus.Plugins.COLD.Helpers.Document">
            <summary>
            Contains utility methods for interfacing with Documents.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.COLD.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="F:Oculus.Plugins.COLD.Helpers.Document.SqlInsertVersion">
            <summary>
            1:ID, 2:DOCUMENT_ID, 3:VERSION, 4:CREATED, 5:CREATED_BY, 6:STATUS, 7:SECURED
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.GetDocument(System.Guid)">
            <summary>
            Retrieves an engine document based on the id
            </summary>
            <param name="docId">The id of the document to retrieve</param>
            <returns>The document</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.GetProfileId(System.Guid)">
            <summary>
            Retrieves the document profile based on the id
            </summary>
            <param name="docId">The id of the document to retrieve</param>
            <returns>The profile id</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.GetNewestVersionId(System.Guid)">
            <summary>
            Retrieves the newest version id for the document (generally only one)
            </summary>
            <param name="docId">The id of the document</param>
            <returns>The active version id</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.DocumentExists(System.Guid)">
            <summary>
            Returns true if the document exists in the system, false if not. This is a cached operation
            for the lifetime of the object.
            </summary>
            <param name="docId">The document id</param>
            <returns>True if we've got it, false if not</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.VerifyDocumentExists(System.Guid)">
            <summary>
            Throws an exception if the document doesn't exist. This is a cached operation.
            </summary>
            <param name="docId">The document id</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.ChangeProfile(System.Guid,System.Guid,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Reprofiles the document specified
            </summary>
            <param name="docId">The id of our document</param>
            <param name="profileId">The new profile id</param>
            <param name="newIndexes">The new indexes</param>
            <returns>The new moniker for the item</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.UpdateDescription(System.Guid,System.String)">
            <summary>
            Updates the document description for the id - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="newDescription">The new description to use</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.AddDocument(Oculus.Storage.StorageDocument,Oculus.Configuration.ProfileContext)">
            <summary>
            Adds a document to the system
            </summary>
            <param name="document">The document to add</param>
            <param name="profileContext">The profile context to use</param>
            <returns>The id of the document</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.AddDocumentVersion(System.Guid,System.Guid,System.Int32)">
            <summary>
            Adds a version record for the specified document - does not check if it exists
            </summary>
            <param name="docId">The doc id</param>
            <param name="versionId">The id for the new version</param>
            <param name="versionNumber">The number for the new version</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.UpdateName(System.Guid,System.String)">
            <summary>
            Updates the document name for the id - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="newName">The new name to use</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.Reindex(System.Guid,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Applies a new set of indexes to a document
            </summary>
            <param name="docId">The id of our document</param>
            <param name="indexes">The new index values</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.Delete(System.Guid)">
            <summary>
            Deletes the specified document from the archive. HEAP of commands
            </summary>
            <param name="docId">The id of our document</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.DeleteXmlMetadata(System.Guid)">
            <summary>
            Deletes the xml metadata for the specified document - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Document.SetXmlMetadata(System.Guid,System.Xml.XmlDocument)">
            <summary>
            Sets the xml associated with a document - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="xml">The xml for the metadata</param>
        </member>
        <member name="T:Oculus.Plugins.COLD.Helpers.DocumentFragment">
            <summary>
            Contains utility methods for interfacing with Document Fragments
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.COLD.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.ApplyMoniker(Oculus.Storage.StorageFragment,Oculus.Plugins.COLD.Data.MonikerRecord)">
            <summary>
            Adds the moniker to the fragment
            </summary>
            <param name="fragment">The fragment</param>
            <param name="monikerRecord">The moniker</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.GetBasicFragmentFromRecord(System.Guid)">
            <summary>
            Retrieves a basic fragment from the default record. All that remains is to populate
            the online/offline monikers and document moniker
            </summary>
            <param name="fragmentId">The fragment id</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.GetBasicFragmentFromRecord(Oculus.Plugins.COLD.Data.FragRecord)">
            <summary>
            Retrieves a basic fragment from the default record. All that remains is to populate
            the data moniker and document moniker
            </summary>
            <param name="record">The base record</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.WriteStreamToFile(Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Writes the contents of the oculus stream to the specified location
            </summary>
            <param name="stream">The stream (will not be closed)</param>
            <param name="path">The path to write to</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.WriteConsolidated(System.Guid,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Writes the consolidated content of the entire fragment to the output stream
            </summary>
            <param name="documentId">The id of our DOCUMENT</param>
            <param name="stream">The stream to write to</param>
            <param name="mimeType">The target mime type, default is tiff</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.WriteFragmentData(System.Guid,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the simple content of the specified fragment to the output stream
            </summary>
            <param name="fragmentId">The id of our fragment</param>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.WriteFileToStream(System.String,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the simple content of the specified file to the output stream
            </summary>
            <param name="fragFilePath">The path of our fragment</param>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.FragmentExists(System.Guid)">
            <summary>
            Checks to see if the fragment with the specifid id exists. This is a cached operation.
            </summary>
            <param name="fragmentId">The id of the fragment to check</param>
            <returns>True if it exists, false if not</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.VerifyFragmentExists(System.Guid)">
            <summary>
            Ensures the fragment exists in the archive. Throws an exception if it does not.
            This is a cached operation
            </summary>
            <param name="fragmentId">The id of the fragment to verify</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.GetMaxSequenceNumber(System.Guid)">
            <summary>
            Retrieves the max sequence number for a specific version
            </summary>
            <param name="versionId">The id of the version</param>
            <returns>The highest sequence number in a version</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.GetDocumentIdForFragment(System.Guid)">
            <summary>
            Retrieves the document id for the specified fragment
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <returns>The id of the owner document</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.GetDocumentFragment(System.Guid)">
            <summary>
            Retrieves an engine fragment for the specified id
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.GetDocumentFragments(System.Guid)">
            <summary>
            Retrieves all fragment records for a specific document.
            </summary>
            <param name="docId">The document id</param>
            <returns>The list of fragments, consolidated as necessary</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.GetFragmentPath(System.Guid)">
            <summary>
            Retrieves the path for a specific fragment
            </summary>
            <param name="fragmentId">The fragment id</param>
            <returns>The path</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.GetDocumentFragmentPaths(System.Guid)">
            <summary>
            Retrieves the paths for all fragments of a document
            </summary>
            <param name="docId">The doc id</param>
            <returns>The list of ids</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.Append(System.Guid,Oculus.Storage.StorageFragment)">
            <summary>
            Appends the fragment to the specified document
            </summary>
            <param name="docId">The id of our document</param>
            <param name="fragment">The fragment to append</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.Append(System.Guid,Oculus.Storage.StorageFragment,System.Int32)">
            <summary>
            Appends the fragment to the specified document version
            </summary>
            <param name="versionId">The version id to append to</param>
            <param name="fragment">The fragment to append</param>
            <param name="sequenceNo">The sequence number to use - should be last in list - does not check!</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.Delete(System.Guid)">
            <summary>
            Deletes the fragment with the specified id
            </summary>
            <param name="fragmentId">The id of the fragment to delete</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.GetLength(System.Guid)">
            <summary>
            Gets the length of a particular fragment.
            </summary>
            <param name="fragmentId">The id of the fragment we're interested in</param>
            <returns>The fragment length</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.GetLocalByteLength(System.Guid)">
            <summary>
            Retrieves the byte length of a particular fragment
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <returns>The number of bytes in the local data</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.GetLocalByteLength(System.String)">
            <summary>
            Retrieves the byte length of a particular fragment file.
            </summary>
            <param name="fragmentPath">The path of the fragment</param>
            <returns>The number of bytes in the local data</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.Write(System.Guid,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the fragment data to the specified stream.
            </summary>
            <param name="fragmentId">The id of our fragment</param>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.DeleteLocalData(System.Guid)">
            <summary>
            Removes the physical file for a fragment.
            </summary>
            <param name="fragmentId">The id of our fragment</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.SetMoniker(System.Guid,Oculus.Storage.ItemMoniker)">
            <summary>
            Sets the online moniker for a fragment
            </summary>
            <param name="fragmentId">The id of our fragment</param>
            <param name="moniker">The moniker</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.DocumentFragment.ConsolidatedWrite(System.Guid,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of the specified document
            </summary>
            <param name="documentId">The document id</param>
            <param name="stream">The stream to write to</param>
            <param name="mimeType">The target mime type</param>
        </member>
        <member name="T:Oculus.Plugins.COLD.Helpers.Util">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Util.GetId(System.String)">
            <summary>
            Retrieves a guid id from the string
            </summary>
            <param name="id">The id</param>
            <returns>The guid</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Util.IsImageType(System.String)">
            <summary>
            Determines if the mime type is an image
            </summary>
            <param name="mimeType">The mime type</param>
            <returns>True if it's tiff, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Helpers.Util.GetDbTypeForIndexType(Oculus.Plugins.COLD.LocalIndexType)">
            <summary>
            Gets a db type for the specified index type
            </summary>
            <param name="iType">The index type</param>
            <returns>The db type</returns>
        </member>
        <member name="T:Oculus.Plugins.COLD.PluginManager">
            <summary>
            This class contains the plug-in settings information, as loaded by the engine.
            This class is the only class that deals with reading the XML configuration
            provided by the plug-in.
            
            Please note that the settings component is valid for the lifetime of the plug-in.
            All database requests should go through this component, as well as any transaction
            processing.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.PluginManager.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Initialize the settings object with the xml node received from the engine
            </summary>
            <param name="config">The config</param>
            <param name="pluginId">The unique plug-in id</param>
        </member>
        <member name="P:Oculus.Plugins.COLD.PluginManager.PluginId">
            <summary>Gets the plug-in id</summary>
        </member>
        <member name="P:Oculus.Plugins.COLD.PluginManager.StoreFolder">
            <summary>Gets the plug-in id</summary>
        </member>
        <member name="P:Oculus.Plugins.COLD.PluginManager.Server">
            <summary>Gets the server</summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.PluginManager.LoadVirtualProfiles(System.Xml.XmlNode)">
            <summary>
            Reads through the plug-in configuration and creates virtual profile nodes
            for each virtual profile encountered
            </summary>
            <param name="config">The configuration node</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.PluginManager.GetVirtualProfileId(System.Guid)">
            <summary>
            Fetch the id to use in the virtual profile list
            </summary>
            <param name="profileId">The profileId</param>
            <returns>The id to use</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.PluginManager.GetVirtualProfileId(System.String)">
            <summary>
            Fetch the id to use in the virtual profile list
            </summary>
            <param name="name">The name of the profile</param>
            <returns>The id to use</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.PluginManager.NewConnection">
            <summary>
            For operations which are atomic and need not be transactioned, we can
            use this method to get access to a connection which will be used
            for the duration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.PluginManager.GetTableName(System.Guid,Oculus.Plugins.COLD.SqlOperation)">
            <summary>
            Retrieves the profile's table name for the specified operation
            </summary>
            <param name="profileId">The profile id</param>
            <param name="op">The operation to be performed</param>
            <returns>The table to use</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.PluginManager.GetIndexesForProfile(System.Guid)">
            <summary>
            Fetches the list of indexes for the profile - this is a cached operation
            </summary>
            <param name="profileId">The profile id</param>
            <returns>The list of indexes</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.PluginManager.GetFragmentPath(System.Guid,System.String)">
            <summary>
            Returns the full path to the fragment on the file system.
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <param name="fragmentName">The fragment name</param>
            <returns>The system path to the file</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.PluginManager.GetDocumentMoniker(System.Guid)">
            <summary>
            Generates an item moniker for the document
            </summary>
            <param name="docId">The id for the document</param>
            <returns>The moniker</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.PluginManager.GetFragmentMoniker(System.Guid)">
            <summary>
            Generates an item moniker for the fragment
            </summary>
            <param name="fragmentId">The id for the fragment</param>
            <returns>The moniker</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.PluginManager.IsVirtualProfile(System.Guid)">
            <summary>
            Determines if the profile is virtual or not.
            </summary>
            <param name="profileId">The id of the profile in question</param>
            <returns>True if it's a virtual profile, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.PluginManager.NewAuditHelper(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Creates a new instance of the audit helper and also ensures the audit tables have 
            been created
            </summary>
            <param name="connection">The connection to use</param>
            <returns>The helper</returns>
        </member>
        <member name="T:Oculus.Plugins.COLD.Search">
            <summary>
            This contains settings for a virtual profile
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.Search.#ctor(Oculus.Searching.SearchCriteria,Oculus.Plugins.COLD.PluginManager)">
            <summary>
            Create a new search
            </summary>
            <param name="searchCriteria">The search</param>
            <param name="manager">The manager</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Search.RunSearch(Oculus.Searching.SearchCriteria)">
            <summary>
            Runs the specified search
            </summary>
            <param name="searchCriteria">the search criteria</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.Search.FetchResults(System.Int32)">
            <summary>
            Retrieves the specified number of results of the specific search
            </summary>
            <param name="numResults">The number of results to fetch</param>
            <returns>The results in the standard format</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.Search.Dispose">
            <summary>
            Releases any resources for the object
            </summary>
        </member>
        <member name="T:Oculus.Plugins.COLD.SearchSqlGenerator">
            <summary>
            This class contains an implementation of the ISearchSqlGenerator interface and is responsible
            for generating the SQL used in search operations.
            </summary>
        </member>
        <member name="P:Oculus.Plugins.COLD.SearchSqlGenerator.IndexesToRetrieve">
            <summary>
            Get the set of indexes we need to retrieve
            </summary>
        </member>
        <member name="P:Oculus.Plugins.COLD.SearchSqlGenerator.Parameters">
            <summary>
            Get the set of parameters we're going to be using
            </summary>
        </member>
        <member name="P:Oculus.Plugins.COLD.SearchSqlGenerator.Indexes">
            <summary>
            Get the set of indexes we're going to be using
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.SearchSqlGenerator.Initialize(Oculus.Searching.SearchCriteria)">
            <summary>
            Initialize the generator with the specified search criteria. Called before any other
            methods.
            </summary>
            <param name="searchCriteria">The criteria we'll be generating sql against</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.SearchSqlGenerator.GetSortFieldReference(System.String)">
            <summary>
            For the specified field, return the column reference (e.g. Table1.FieldX)
            </summary>
            <param name="fieldName">
            The field to sort against, doc qualifiers will be of the form [NAME] in brackets, otherwise it will be an index name
            </param>
            <returns>The column reference to sort against, or null if it should be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.SearchSqlGenerator.AddStandardColumns(Oculus.Util.Collections.StringList)">
            <summary>
            Add any standard columns to retrieve, these will be included in the list of columns
            we select
            </summary>
            <param name="columns">The list of columns to add to</param>
        </member>
        <member name="M:Oculus.Plugins.COLD.SearchSqlGenerator.GetIndexColumnReference(System.String)">
            <summary>
            Get the fully qualified column reference for the specified index.
            </summary>
            <param name="indexName">The name of the index we're going to retrieve</param>
            <returns>The column reference, or null if it should be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.SearchSqlGenerator.GetSelectTables">
            <summary>
            Gets the COMPLETE set of tables we're going to be selecting against. Include any aliases.
            </summary>
            <returns>The list of tables to select from</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.SearchSqlGenerator.GetDefaultWhereClause">
            <summary>
            Gets any default where clause. DO NOT include the WHERE keyword.
            </summary>
            <returns>The default where clause, or null if there is none</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.SearchSqlGenerator.GetColumnReference(System.String)">
            <summary>
            Get the fully qualified column reference for the field. Can be index or document field.
            </summary>
            <param name="fieldName">The field name</param>
            <returns>The column name. If null is returned, this field will be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.SearchSqlGenerator.GetParameterName(Oculus.Searching.SearchCriteriaItem)">
            <summary>
            Get the parameter name for the field. Can be index or document field.
            </summary>
            <param name="item">The criteria item</param>
            <returns>The parameter name. Cannot be null, as GetColumnReference will be called first</returns>
        </member>
        <member name="M:Oculus.Plugins.COLD.SearchSqlGenerator.GetArchiveWhereClause(Oculus.Searching.ArchiveState)">
            <summary>
            Gets the relevant where clause for the archive state
            </summary>
            <param name="archiveState">The state requested, will never be "Any"</param>
            <returns>The where clause to use</returns>
        </member>
        <member name="T:Oculus.Plugins.COLD.VirtualProfile">
            <summary>
            This contains settings for a virtual profile
            </summary>
        </member>
        <member name="M:Oculus.Plugins.COLD.VirtualProfile.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name">The name of the profile</param>
            <param name="selectTable">The select table</param>
            <param name="insertTable">The insert table</param>
            <param name="updateTable">The update table</param>
            <param name="deleteTable">The delete table</param>
        </member>
        <member name="P:Oculus.Plugins.COLD.VirtualProfile.Name">
            <summary>Get/Set the name of the profile associated with this virtual profile</summary>
        </member>
        <member name="P:Oculus.Plugins.COLD.VirtualProfile.DeleteTable">
            <summary>Get/Set the table used to delete</summary>
        </member>
        <member name="P:Oculus.Plugins.COLD.VirtualProfile.InsertTable">
            <summary>Get/Set the table used to insert</summary>
        </member>
        <member name="P:Oculus.Plugins.COLD.VirtualProfile.SelectTable">
            <summary>Get/Set the table used to select</summary>
        </member>
        <member name="P:Oculus.Plugins.COLD.VirtualProfile.UpdateTable">
            <summary>Get/Set the table used to update</summary>
        </member>
        <member name="T:Oculus.Plugins.Factory">
            <summary>
            Helper class for working with plug-ins
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Factory.CreatePlugin(System.String)">
            <summary>
            Creates and initializes an instance of the specified plug-in on the current machine.
            </summary>
            <param name="pluginId">The id of the plug-in to create</param>
            <returns>The instance of the plug-in</returns>
            <exception cref="T:Oculus.Plugins.PluginException">If the created object doesn't support IPlugin</exception>
        </member>
        <member name="T:Oculus.Plugins.Jukebox.Data.OfflineFileRecord">
            <summary>
            Contains utility methods for interfacing with Documents.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineFileRecord.#ctor">
            <summary>
            Create a default instance
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineFileRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Reads an entry from a select * query
            </summary>
            <param name="reader">The reader, cannot be null</param>
            <param name="conn">The connection, cannot be null</param>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.Data.OfflineFileRecord.Id">
            <summary>
            The unique id for the record
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.Data.OfflineFileRecord.SourceMoniker">
            <summary>
            The source fragment moniker
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.Data.OfflineFileRecord.VolumeName">
            <summary>
            The name for the volume
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.Data.OfflineFileRecord.Size">
            <summary>
            The size of the file
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.Data.OfflineFileRecord.DateAdded">
            <summary>
            The date the file was added
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineFileRecord.AddItem(Oculus.Data.Connections.Interfaces.IOcuConnection,System.String,System.Guid,System.Int64,System.String)">
            <summary>
            Adds the item to the archive
            </summary>
            <param name="conn">The connection to use</param>
            <param name="volumeName">The volume to use</param>
            <param name="fileId">The id of the file</param>
            <param name="itemSize">The size of the item in BYTES</param>
            <param name="source">The source moniker</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineFileRecord.DeleteItem(Oculus.Data.Connections.Interfaces.IOcuConnection,System.Guid)">
            <summary>
            Deletes the item from the database
            </summary>
            <param name="conn">The connection</param>
            <param name="fileId">The file id</param>
        </member>
        <member name="T:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord">
            <summary>
            Contains utility methods for interfacing with Volumes.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.#ctor">
            <summary>
            Create a default instance
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Reads an entry from a select * query
            </summary>
            <param name="reader">The reader</param>
            <param name="conn">The connection</param>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.Name">
            <summary>
            The name for the volume
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.Status">
            <summary>
            The volume status
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.Size">
            <summary>
            The current size of the volume
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.OfflineVolumeName">
            <summary>
            The name of the offline volume, if it exists
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.OfflineVolumePath">
            <summary>
            The offline volume path, if it exists
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.DateCreated">
            <summary>
            The date the volume was created
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.CalculateNextVolumeName(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Creates a volume name based on todays date
            </summary>
            <param name="conn">The connection</param>
            <returns>The volume name to use</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.GetActiveVolumeInternal(Oculus.Data.Connections.Interfaces.IOcuConnection,System.Int64,System.Int64)">
            <summary>
            Retrieves the current active volume.  If the new file will push the volume size over the
            limit, the volume is closed and a new one created/returned to house the new file
            </summary>
            <param name="conn">The connection</param>
            <param name="newFileSize">The size of the file being added, in BYTES</param>
            <param name="maxArchiveSize">The max size of a volume, in KB</param>
            <returns>The volume to use for the new file</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.GetActiveVolume(Oculus.Data.Connections.Interfaces.IOcuConnection,System.Int64,System.Int64)">
            <summary>
            Retrieves the current active volume.  If the new file will push the volume size over the
            limit, the volume is closed and a new one created/returned to house the new file
            </summary>
            <param name="conn">The connection</param>
            <param name="newFileSize">The size of the file being added, in BYTES</param>
            <param name="maxArchiveSize">The max size of a volume, in KB</param>
            <returns>The volume to use for the new file</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.GetVolumeForDocId(Oculus.Data.Connections.Interfaces.IOcuConnection,System.Guid)">
            <summary>
            Retrives a volume based on an offline document id.
            </summary>
            <param name="connection">The connection</param>
            <param name="docId">The id of the offline document</param>
            <returns>The volume for the document</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.GetOfflineVolumes(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Jukebox.VolumeStatus)">
            <summary>
            Retrieves a list of offline volumes, sorted by date created according 
            to the status.
            </summary>
            <param name="connection">The connection</param>
            <param name="status">The status to retrieve</param>
            <returns>The list of volumes</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.ChangeVolumeStatus(Oculus.Data.Connections.Interfaces.IOcuConnection,System.String,Oculus.Plugins.Jukebox.VolumeStatus)">
            <summary>
            Changes the status of the specified volume
            </summary>
            <param name="connection">The connection</param>
            <param name="volume">the volume</param>
            <param name="status">the new status</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord.MoveVolumeOffline(Oculus.Data.Connections.Interfaces.IOcuConnection,System.String,System.String,System.String)">
            <summary>
            Moves the specified volume offline. This will mark the volume as offline,
            and include the location in the record. This can be used to offline somewhere
            on disk or to a subfolder of an offline media volume.
            </summary>
            <param name="connection">The connection</param>
            <param name="volume">The volume to offline</param>
            <param name="offlineVolume">The name of the offline volume</param>
            <param name="offlinePath">The location to use</param>
        </member>
        <member name="T:Oculus.Plugins.Jukebox.Engine">
            <summary>
            Entry interface to the plug-in - handles all engine interaction.
            
            Please note, validation is NOT supported
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Creates an instance of the plug-in with config and id
            </summary>
            <param name="config">The configuration xml</param>
            <param name="pluginId">The plug-in id</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.ArchiveItem(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Archives the specified item to the data store
            </summary>
            <param name="sourceItem">The source moniker</param>
            <param name="sourceData">The source data</param>
            <returns>The moniker representing the item in the jukebox plug-in</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.GetOfflineVolumes(Oculus.Plugins.Jukebox.VolumeStatus)">
            <summary>
            Retrieves a list of offline volumes, sorted by date created according 
            to the status.
            </summary>
            <param name="status">The status to retrieve</param>
            <returns>The list of volumes</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.ChangeVolumeStatus(System.String,Oculus.Plugins.Jukebox.VolumeStatus)">
            <summary>
            Changes the status of the specified volume
            </summary>
            <param name="volume">the volume</param>
            <param name="status">the new status</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.MoveVolumeOffline(System.String,System.String,System.String)">
            <summary>
            Moves the specified volume offline. This will mark the volume as offline,
            and include the location in the record. This can be used to offline somewhere
            on disk or to a subfolder of an offline media volume.
            </summary>
            <param name="volume">The volume to offline</param>
            <param name="offlineVolume">The name of the offline volume</param>
            <param name="offlinePath">The path to use</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.WriteFragmentToStream(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
             Provided with the moniker, the plug-in must write the object's data to the specified stream.
            </summary>
            <param name="moniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.GetFragmentDataLength(Oculus.Storage.ItemMoniker)">
            <summary>
             Returns the size of the data represented by the moniker
            </summary>
            <param name="moniker">The moniker of the data to write</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.GetFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Unsupported
            </summary>
            <param name="fragmentMoniker">Ignored</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.SetFragmentLocationMoniker(Oculus.Storage.ItemMoniker,Oculus.Storage.ItemMoniker)">
            <summary>
            Unsupported
            </summary>
            <param name="fragmentMoniker">Unsupported</param>
            <param name="locationMoniker">Unsupported</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.DeleteLocalFragmentData(Oculus.Storage.ItemMoniker)">
            <summary>
            Deletes the moniker from the archive
            </summary>
            <param name="moniker">The moniker to delete</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.DeleteFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Deletes the moniker from the archive
            </summary>
            <param name="moniker">The moniker to delete</param>
        </member>
        <member name="P:Oculus.Plugins.Jukebox.Engine.PluginId">
            <summary>
            Gets the plug-in id after initialization. Each plug-in is required to store their id 
            for subsequent retrievals.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.Initialise(System.Xml.XmlElement,System.String)">
            <summary>
             Passes config information to the plugin at instantiation. This method
             is the first method called after object construction.  Also included is the plug-in
             id - this should be remembered and used by plug-ins to populate fields on documents,
             etc.
            </summary>
            <param name="configXml">
             The xml containing the config information.
            </param>
            <param name="pluginId">
             The id of the plug-in as defined within configuration (i.e. the plug-in name).
            </param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.NotifyOfSystemConfigChange(System.Xml.XmlDocument)">
            <summary>
             Passes all configuration information to the plugin as it exists in the config
             xml.
            </summary>
            <param name="newConfigXml">
             The xml containing the new system-wide config information.
            </param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Engine.Dispose">
            <summary>
            Releases any resources held by this object
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Jukebox.VolumeStatus">
            <summary>
            Helper enum for fragment monikers
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.VolumeStatus.Active">
            <summary>Indicates the volume is currently receiving documents</summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.VolumeStatus.Closed">
            <summary>Indicates the volume is closed</summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.VolumeStatus.TempOffline">
            <summary>Indicates the volume is in the process of being moved offline</summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.VolumeStatus.Offline">
            <summary>Indicates the volume has been moved offline</summary>
        </member>
        <member name="T:Oculus.Plugins.Jukebox.Helpers.Document">
            <summary>
            Contains utility methods for interfacing with Documents.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Helpers.Document.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Jukebox.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Helpers.Document.SaveStreamToPath(System.String,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Saves the stream to the specified path
            </summary>
            <param name="path">The path on disk</param>
            <param name="sourceData">The source stream</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Helpers.Document.GetExistingFilePath(System.Guid,Oculus.Plugins.Jukebox.Data.OfflineVolumeRecord)">
            <summary>
            Retrieves a file's path from the specified volume. Exception will be raised for unavailable volumes.
            </summary>
            <param name="fileId">The id of the file</param>
            <param name="volume">The associated volume</param>
            <returns>The path</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Helpers.Document.WriteDataToStream(System.Guid,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the file with the specified id to the open stream
            </summary>
            <param name="fileId">The file id</param>
            <param name="stream">The stream</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Helpers.Document.GetFileLength(System.Guid)">
            <summary>
            Retrieves the length of the specified file
            </summary>
            <param name="fileId">The file id</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Helpers.Document.DeleteItem(System.Guid)">
            <summary>
            Deletes the file from disk, the record from the database, and decreases the size on the associated volume.
            </summary>
            <param name="fileId">The file id</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Helpers.Document.ArchiveItem(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Adds an item to the archive
            </summary>
            <param name="sourceItem">The source item moniker</param>
            <param name="sourceData">The data to be archived</param>
        </member>
        <member name="T:Oculus.Plugins.Jukebox.Helpers.OfflineImage">
            <summary>
            Summary description for ImageProcessing.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Helpers.OfflineImage.#ctor">
            <summary>
            Create a default instance of the object
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Jukebox.Helpers.OfflineImage.TiffType">
            <summary>
            The tiff codec name
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Helpers.OfflineImage.ConvertToBitonal(System.Drawing.Bitmap)">
            <summary>
            Converts an image to a bitonal tiff. NB this uses bit-by-bit conversion,
            so use with care.
            </summary>
            <param name="original">The original image</param>
            <returns>The bitonal image</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Helpers.OfflineImage.SaveImageAsBitonalTiff(System.Drawing.Bitmap,System.IO.Stream)">
            <summary>
            Saves the specified image to a stream as a bitonal tiff
            </summary>
            <param name="bmp">The image to save</param>
            <param name="output">The stream to save to</param>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Helpers.OfflineImage.GenerateOfflineImage(System.String,System.String,System.String)">
            <summary>
            Generates the bytes for a standard offline image which is used as a placeholder
            for any offline data.
            </summary>
            <param name="offlineVolumeName">The offline volume name</param>
            <param name="volume">The sub volume within the offline archive</param>
            <param name="customMessage">The custom message</param>
            <returns>The byte array containing the image</returns>
        </member>
        <member name="T:Oculus.Plugins.Jukebox.PluginManager">
            <summary>
            This class contains the plug-in settings information, as loaded by the engine.
            This class is the only class that deals with reading the XML configuration
            provided by the plug-in.
            
            Please note that the settings component is valid for the lifetime of the plug-in.
            All database requests should go through this component, as well as any transaction
            processing.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.PluginManager.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Initialize the settings object with the xml node received from the engine
            </summary>
            <param name="config">The config</param>
            <param name="pluginId">The unique plug-in id</param>
        </member>
        <member name="P:Oculus.Plugins.Jukebox.PluginManager.PluginId">
            <summary>Gets the plug-in id</summary>
        </member>
        <member name="P:Oculus.Plugins.Jukebox.PluginManager.VolumesPath">
            <summary>Gets the volume path</summary>
        </member>
        <member name="P:Oculus.Plugins.Jukebox.PluginManager.VolumeSize">
            <summary>Gets the volume size</summary>
        </member>
        <member name="P:Oculus.Plugins.Jukebox.PluginManager.OfflineMessage">
            <summary>Gets the offline message</summary>
        </member>
        <member name="P:Oculus.Plugins.Jukebox.PluginManager.OfflineLocations">
            <summary>Gets the offline location paths</summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.PluginManager.GetFileSubPath(System.Guid)">
            <summary>
            Retrieves the subpath to a file in a volume, regardless of where it might be stored
            </summary>
            <param name="fileId">The file id</param>
            <returns>The sub path</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.PluginManager.NewConnection">
            <summary>
            For operations which are atomic and need not be transactioned, we can
            use this method to get access to a connection which will be used
            for the duration
            </summary>
            <returns>The new connection</returns>
        </member>
        <member name="T:Oculus.Plugins.Jukebox.Util">
            <summary>
            Helper class utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Util.CalcKB(System.Int64)">
            <summary>
            Calculates the kilobytes for the number of bytes
            </summary>
            <param name="numBytes">The number of bytes</param>
            <returns>The calculated total KB</returns>
        </member>
        <member name="M:Oculus.Plugins.Jukebox.Util.AddTrailingSlash(System.String)">
            <summary>
            Adds a trailing slash to the path
            </summary>
            <param name="path">The path</param>
            <returns>The path with a slash</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.Collections.FragmentList">
            <summary>
            Represents a collection of fragments
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.Configuration.Collections.DatabaseList">
            <summary>
            Represents a collection of profiles
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.Configuration.Collections.IndexList">
            <summary>
            Represents a collection of profiles
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Configuration.Collections.IndexList.GetIndex(System.String)">
            <summary>
            Retrieves the index with the specified name, or null if not present
            </summary>
            <param name="indexName">The name to retrieve</param>
            <returns>The index, or null if not found</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.Configuration.Collections.ProfileList">
            <summary>
            Represents a collection of profiles
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Configuration.Collections.ProfileList.GetProfileFromContext(System.Guid)">
            <summary>
            Retrieves the profile from the collection with the specifed context id
            </summary>
            <param name="contextId">The context of the profile to find</param>
            <returns>The profile</returns>
            <exception cref="T:Oculus.Plugins.PluginException">If the profile cannot be found</exception>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.Configuration.Index">
            <summary>
            Represents profiles as configured within the XML for this plug-in
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Configuration.Index.IndexName">
            <summary>
            Get/set the profile name
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Configuration.Index.ColumnName">
            <summary>
            Get/set the table name
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.Configuration.Database">
            <summary>
            Represents profiles as configured within the XML for this plug-in
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Configuration.Database.DatabaseName">
            <summary>
            Get/set the table name
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Configuration.Database.ConnectionString">
            <summary>
            Get the connections tring for the database
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Configuration.Database.NewConnection">
            <summary>
            Creates a new connection object for the underlying connection string
            </summary>
            <returns>The unopened connection</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Configuration.Database.NewAuditHelper(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Creates an audit helper against the connection, automatically checks for necessary tables
            </summary>
            <param name="connection">The connection to use with the helper - must be open</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.Configuration.Profile">
            <summary>
            Represents profiles as configured within the XML for this plug-in
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Configuration.Profile.ProfileName">
            <summary>
            Get/set the profile name
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Configuration.Profile.TableName">
            <summary>
            Get/set the table name
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Configuration.Profile.DataLocation">
            <summary>
            Get/set the data location
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Configuration.Profile.Indexes">
            <summary>
            Get/set the set of indexes
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Configuration.Profile.Databases">
            <summary>
            Get/set the set of databases
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.AuditHelper">
            <summary>
            The audit helper for the 7 plug-in
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.AuditHelper.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="connection">The connection to use</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.AuditHelper.IdType">
            <summary>
            Gets the data type for our ids
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.AuditHelper.EmptyValue">
            <summary>
            Gets the empty value for our type
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.AuditHelper.IsEmptyValue(System.String)">
            <summary>
            Determines if the value is empty or not
            </summary>
            <param name="value">The value</param>
            <returns>True if empty, false otherwise</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.FragmentPathNotFoundException">
            <summary>
            Indicates a fragment's path could not be found on disk or on any jukeboxes,
            or the standalone drive
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.FragmentPathNotFoundException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.FragmentPathNotFoundException.#ctor(System.String)">
            <summary>
            Initialize with a message
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.Fragment">
            <summary>
            Represents a fragment within the plug-in
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus7.Fragment.SqlSelectForDocument">
            <summary>
            Format with document unique num
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus7.Fragment.SqlDeleteFragment">
            <summary>
            Format with unique num, filename
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus7.Fragment.SqlUpdateSequence">
            <summary>
            Format with unique num, pagenum
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus7.Fragment.SqlSelectFragment">
            <summary>
            Format with unique num, filename
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus7.Fragment.SqlUpdateMoniker">
            <summary>
            Format with unique num, filename
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Fragment.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,System.Data.Common.DbDataReader,Oculus.Plugins.Oculus7.PluginManager,Oculus.Plugins.Oculus7.Configuration.Database,Oculus.Storage.ItemMoniker,Oculus.Storage.ItemMoniker)">
            <summary>
            Initialize the fragment from the reader
            </summary>
            <param name="connection">The connection to use</param>
            <param name="reader">The reader containing data for our fragment</param>
            <param name="database">The database to use</param>
            <param name="manager">The manager to use</param>
            <param name="moniker">The moniker for our fragment, can be null</param>
            <param name="documentMoniker">The base document moniker, either this or the moniker must be specified</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Fragment.Directory">
            <summary>Gets the directory associated with the fragment</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Fragment.UniqueNum">
            <summary>Gets the unique num associated with the fragment</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Fragment.Filename">
            <summary>Gets the filename associated with the fragment</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Fragment.DocType">
            <summary>Gets the doc type associated with the fragment</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Fragment.PageNumber">
            <summary>Gets the page number associated with the fragment</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Fragment.DataLocationMoniker">
            <summary>Gets the online moniker associated with the fragment</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Fragment.PluginManager">
            <summary>Gets the plugin manager associated with the document</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Fragment.Database">
            <summary>Gets the database associated with the document</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Fragment.Moniker">
            <summary>Gets the moniker associated with the fragment</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Fragment.FilenameWithExtension">
            <summary>
            Gets the full filename with an extension
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Fragment.IsOffline">
            <summary>
            Returns true if the image has been moved offline within Oculus 7
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Fragment.LoadFragmentsForDocument(Oculus.Storage.ItemMoniker,Oculus.Plugins.Oculus7.PluginManager,Oculus.Plugins.Oculus7.Configuration.Database)">
            <summary>
            Loads all the fragments for the specified document
            </summary>
            <param name="documentMoniker">The document for which we're loading fragments</param>
            <param name="database">The database to use for the load</param>
            <param name="manager">The manager to use</param>
            <returns>The collection of fragments for the document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Fragment.GetFilepath">
            <summary>
            Gets the full path to the fragment data
            </summary>
            <returns>The path</returns>
            <exception cref="T:Oculus.Plugins.Oculus7.FragmentPathNotFoundException">If the fragment's path could not be found</exception>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Fragment.Write(Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writest the file to the specified output stream
            </summary>
            <param name="outputStream">The output stream</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Fragment.Delete(Oculus.Data.Connections.Interfaces.IOcuConnection,System.Boolean)">
            <summary>
            Deletes the fragment and its file
            </summary>
            <param name="connection">The connection to use</param>
            <param name="updateSequence">Set to true if we should update the sequence of files</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Fragment.LocateFragment(Oculus.Storage.ItemMoniker,Oculus.Plugins.Oculus7.PluginManager)">
            <summary>
            Locates the specified fragment within the plug-in
            </summary>
            <param name="fragmentMoniker">The moniker</param>
            <param name="manager">The manager</param>
            <returns>The fragment</returns>
            <exception cref="T:Oculus.Plugins.PluginException">If the fragment cannot be found</exception>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Fragment.GetDataLength">
            <summary>
            Gets the length of our byte data
            </summary>
            <returns>The length of our data</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Fragment.ToStorageFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Converts our fragment to a storage fragment.
            </summary>
            <param name="documentMoniker">The document moniker to use, if null, one will be created</param>
            <returns>A storage fragment</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Fragment.SetDataLocationMoniker(Oculus.Storage.Moniker)">
            <summary>
            Sets the value for the online moniker
            </summary>
            <param name="locationMoniker">The moniker to use, can be null</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.Document">
            <summary>
            Represents a document within the plug-in, is really just an id with a pointer to the
            profile and database of which it's a part. Remember that Oculus 7 documents are not 
            distinguished based on profile, but they will use different columns for their indexes
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus7.Document.SqlSelectDocument">
            <summary>
            Select the document, format args 0: table name, 1: unique num
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus7.Document.SqlDeleteDocument">
            <summary>
            Delete the document record, format args 0: table name, 1: unique num
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus7.Document.SqlUpdateMetadataNonNull">
            <summary>
            Updates metadata. format args 0: table name, 1: unique num. param args 0: metadata
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus7.Document.SqlUpdateMetadataNull">
            <summary>
            Updates metadata. format args 0: table name, 1: unique num.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Document.#ctor(Oculus.Storage.ItemMoniker,Oculus.Plugins.Oculus7.Configuration.Profile,Oculus.Plugins.Oculus7.Configuration.Database,Oculus.Plugins.Oculus7.PluginManager)">
            <summary>
            Initialize a document against the specified profile for the specified database
            </summary>
            <param name="moniker">The document moniker</param>
            <param name="profile">The profile</param>
            <param name="database">The database</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Document.UniqueNum">
            <summary>Returns the unique id for this document (based on the moniker)</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Document.Moniker">
            <summary>Gets the document moniker associated with the document</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Document.Profile">
            <summary>Gets the profile associated with the document</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Document.Database">
            <summary>Gets the database associated with the document</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Document.Indexes">
            <summary>Gets the indexes associated with the document</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Document.Metadata">
            <summary>Gets the xml metadata associated with the document</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Document.PluginManager">
            <summary>Gets the plugin manager associated with the document</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Document.Fragments">
            <summary>
            Gets the set of fragments for the document. If the collection has not been initialized,
            the fragments will automatically be fetched for this document
            </summary>
            <returns>The fragments</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Document.LocateDocument(Oculus.Storage.ItemMoniker,Oculus.Plugins.Oculus7.PluginManager)">
            <summary>
            Locates the specified document within the plug-in
            </summary>
            <param name="documentMoniker">The moniker</param>
            <param name="manager">The manager</param>
            <returns>The document</returns>
            <exception cref="T:Oculus.Plugins.PluginException">If the document cannot be found</exception>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Document.Delete">
            <summary>
            Deletes the document *AND* all assocated fragments from the database/file system
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Document.UpdateIndexes(Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Updates the set of indexes on the document
            </summary>
            <param name="newIndexes">The new set of indexes to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Document.UpdateMetadata(System.Xml.XmlDocument)">
            <summary>
            Sets the metadata for the document
            </summary>
            <param name="metadataXml">The new value, can be null</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Document.ToStorageDocument">
            <summary>
            Converts the document to a storage document
            </summary>
            <returns>The storage document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Document.GetAuditDetail">
            <summary>
            Gets the set of audit data for the document
            </summary>
            <returns>The audit details</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.Engine">
            <summary>
            Oculus 7 implementation of a plug-in. The 7 plug-in works a bit different in that
            it can have multiple databases defined for different plug-ins
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.#ctor">
            <summary>
            Creates a default instance of the object - this is the constructor
            always activated by the engine
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus7.Engine.m_manager">
            <summary>
            Contains all settings and access to most things we need to do
            - created on initialize
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus7.Engine.m_search">
            <summary>
            Handles a search, etc - created on initialize
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus7.Engine.DatabaseIndexKey">
            <summary>
            Key used in moniker paramters as a hint for the database index
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.UpdateExistingDocumentFragments(Oculus.Storage.StorageDocument)">
            <summary>
            NOT Supported
            Updates the fragments of a specific document with a new fragment set
            </summary>
            <param name="document">The document to be completely updated</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.UpdateExistingDocumentAppendFragment(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment)">
            <summary>
            NOT Supported
            Inserts a fragment at the end of all the fragments 
            </summary>
            <param name="document">The document to be updated</param>
            /// <param name="fragment">The fragment to be added at the end</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.UpdateExistingDocumentInsertFragmentBefore(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment,System.Int32)">
            <summary>
            NOT Supported
            Inserts a fragment at a specified position (before) the next fragment
            e.g if a frag is inserted at position 3, the current fragment 3 will move down to 4 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updated</param>
            <param name="fragment">The fragment to be added</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.UpdateExistingDocumentDeleteFragAtPosition(Oculus.Storage.StorageDocument,System.Int32)">
            <summary>
            NOT Supported
            Deletes a fragment at position x 
            e.g if a frag is deleted at position 3, the current fragment 4 will move up to 3 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updateded</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.AddDocument(Oculus.Storage.StorageDocument,Oculus.Configuration.ProfileContext)">
            <summary>
             Adds a document to the plug-in. Returns a moniker object representing the 
             newly added item. The plug-in should try and use the document and fragment id's, if possible.
            </summary>
            <param name="document">The document to be added</param>
            <param name="profileContext">The context under which the document should be added</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.ChangeDocumentProfile(Oculus.Storage.ItemMoniker,Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
             Changes the profile under which a document is stored to a new profile.
             Returns the moniker representing the item under the new profile.
            </summary>
            <param name="documentMoniker">The document moniker</param>
            <param name="newProfile">The new profile context to use</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.DeleteDocument(Oculus.Storage.ItemMoniker)">
            <summary>
             Removes the document with the specified id from the plug-in.
            </summary>
            <param name="documentMoniker">The moniker of the document to delete.</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.GetDocument(Oculus.Storage.ItemMoniker)">
            <summary>
            Returns a document, including all metadata, available properties, and indexes.  Fragments should
            be attached, but need only contain their names and monikers.
            </summary>
            <param name="documentMoniker">The document to retrieve, this wil automatically be attached to any fragments</param>
            <returns>The storage document object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.GetProfileId(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the profile id for the specified document.
            </summary>
            <param name="documentMoniker">The document in question</param>
            <returns>The profile id for the document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.ReindexDocument(Oculus.Storage.ItemMoniker,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
             Changes the index values under which a document is stored.
            </summary>
            <param name="documentMoniker">The document moniker to reindex</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.UpdateDocumentDescription(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
             Changes the description on the document.
            </summary>
            <param name="documentMoniker">
             the moniker of the document to change.
            </param>
            <param name="newDescription">
             the new description for the document
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.UpdateDocumentName(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
             Changes the name on the document.
            </summary>
            <param name="documentMoniker">
             the moniker of the document to change
            </param>
            <param name="newName">
             the new name for the document
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.UpdateXmlMetadata(Oculus.Storage.ItemMoniker,System.Xml.XmlDocument)">
            <summary>
            Sets the metadata to the document. If no xml exists, it is added.  
            If it does exist, it is updated to the new version of the xml.
            If the value is null, deletes the xml.
            </summary>
            <param name="documentMoniker">the moniker for the document</param>
            <param name="metadataXml">
             The xml data to add as metadata for this document/document version
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.ConsolidatedWrite(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of ALL the fragments in the moniker. Obviously, this can only be 
            done with certain data types. This functionality will generally only be used in situations where
            the content is known ahead of time to be image data. All images within the document should be combined.
            
            The mime type will be used to handle conversions. Natively, we support application/pdf and 
            image/tiff for our 7 and 8 plug-ins. However, you could handle your own types and still call in through
            the main document API.
            </summary>
            <param name="documentMoniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
            <param name="mimeType">The mime type of the resulting document</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.GetAuditDetail(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the collection of audit information for the moniker
            </summary>
            <param name="documentMoniker">The moniker of the document</param>
            <returns>The collection of audit information</returns>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.Engine.PluginId">
            <summary>
            Gets the plug-in id after initialization. Each plug-in is required to store their id 
            for subsequent retrievals.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.Initialise(System.Xml.XmlElement,System.String)">
            <summary>
             Passes config information to the plugin at instantiation. This method
             is the first method called after object construction.  Also included is the plug-in
             id - this should be remembered and used by plug-ins to populate fields on documents,
             etc.
            </summary>
            <param name="configXml">
             The xml containing the config information.
            </param>
            <param name="pluginId">
             The id of the plug-in as defined within configuration (i.e. the plug-in name).
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.NotifyOfSystemConfigChange(System.Xml.XmlDocument)">
            <summary>
             Passes all configuration information to the plugin as it exists in the config
             xml.
            </summary>
            <param name="newConfigXml">
             The xml containing the new system-wide config information.
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.WriteFragmentToStream(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
             Provided with the moniker, the plug-in must write the object's data to the specified stream.
            </summary>
            <param name="moniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.GetFragmentDataLength(Oculus.Storage.ItemMoniker)">
            <summary>
             Returns the size of the data represented by the moniker
            </summary>
            <param name="moniker">The moniker of the data to write</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.GetFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Returns a fragment. It must have its DocumentMoniker property set.
            </summary>
            <param name="moniker">The fragment to retrieve</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.SetFragmentLocationMoniker(Oculus.Storage.ItemMoniker,Oculus.Storage.ItemMoniker)">
            <summary>
             These methods updates the fragment (file) pointer in the target plug-in for the 
             target fragment to instead point to the archive plug-in.  
             The plug-in will defer retrieval of the physical file to the storage plug-in as specified in 
             the moniker parameter.
            </summary>
            <param name="moniker">
             the moniker for the particular fragment being archived
            </param>
            <param name="locationMoniker">
             the moniker that maps to the fragment in the archive system
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.DeleteLocalFragmentData(Oculus.Storage.ItemMoniker)">
            <summary>
            This method may be called after a document is successfully archived and native format(s) of 
            the document fragment no longer needs to be stored. NB this is not to be confused with 
            IDocumentHandler.DeleteFragment, which is meant to delete the entire fragment record from 
            the system.  This call should only remove the local storage of the file associated with the fragment.
            </summary>
            <param name="moniker">
             the moniker for the particular data whose local byte data should be deleted
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.DeleteFragment(Oculus.Storage.ItemMoniker)">
            <summary>
             Removes a fragment from the system.
            </summary>
            <param name="moniker">the moniker to delete</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.Search(Oculus.Searching.SearchCriteria)">
            <summary>
             Performs a search for documents using the xml schema format defined by SearchXmlDocument.xsd.
             
             Please note, this procedure does not return any results, as results are retrieved via FetchResults
            </summary>
            <param name="search">The search criteria.</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.FetchResults(System.Int32)">
            <summary>
             Returns the specified number of records from the search.
            </summary>
            <param name="numRecords">
             The target number of records to retrieve from the search results
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.ReleaseSearch">
            <summary>
             Called when the search is no longer needed and all associated resources with the search may be safely released.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Engine.Dispose">
            <summary>
            Releases resources for the object
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.PluginManager">
            <summary>
            This class contains the plug-in settings information, as loaded by the engine.
            This class is the only class that deals with reading the XML configuration
            provided by the plug-in.
            
            Please note that the settings component is valid for the lifetime of the plug-in.
            All database requests should go through this component, as well as any transaction
            processing.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.PluginManager.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Initialize the settings object with the xml node received from the engine
            </summary>
            <param name="config">The config</param>
            <param name="pluginId">The unique plug-in id</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.PluginManager.PluginId">
            <summary>Gets the plug-in id</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.PluginManager.Jukeboxes">
            <summary>Gets the set of jukeboxes</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.PluginManager.StandaloneDrive">
            <summary>Gets the standalone drive</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.PluginManager.Profiles">
            <summary>Gets the set of configured profiles</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.PluginManager.HasNetworkCredentials">
            <summary>Gets whether or not we have network credentials</summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.PluginManager.GetNetworkCredentials">
            <summary>
            Retrieves the network credentials to use for external disk access
            </summary>
            <returns>The context, don't forget to undo it</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.Search">
            <summary>
            Manages searches against the plug-in. This is slightly more complicated as
            we have to manage the search across multiple connections.  Please note we 
            do not handle sorting across all connections.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Search.#ctor(Oculus.Searching.SearchCriteria,Oculus.Plugins.Oculus7.PluginManager)">
            <summary>
            Create a new search
            </summary>
            <param name="searchCriteria">The search</param>
            <param name="manager">The manager</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Search.RunSearch(Oculus.Searching.SearchCriteria)">
            <summary>
            Runs the specified search
            </summary>
            <param name="searchCriteria">the search criteria</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Search.ActivateNextConnection">
            <summary>
            Runs the query against the next available connection. Modifies the 
            connection and data reader members.  Values will be null if no more
            connections are available
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Search.FetchResults(System.Int32)">
            <summary>
            Retrieves the specified number of results of the specific search
            </summary>
            <param name="numResults">The number of results to fetch</param>
            <returns>The results in the standard format</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.Search.Dispose">
            <summary>
            Releases any resources for the object
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus7.SearchSqlGenerator">
            <summary>
            This class contains an implementation of the ISearchSqlGenerator interface and is responsible
            for generating the SQL used in search operations.
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.SearchSqlGenerator.IndexesToRetrieve">
            <summary>
            Get the set of indexes we need to retrieve
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus7.SearchSqlGenerator.Parameters">
            <summary>
            Get the set of parameters we need to use
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.SearchSqlGenerator.Initialize(Oculus.Searching.SearchCriteria)">
            <summary>
            Initialize the generator with the specified search criteria. Called before any other
            methods.
            </summary>
            <param name="searchCriteria">The criteria we'll be generating sql against</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.SearchSqlGenerator.GetSortFieldReference(System.String)">
            <summary>
            For the specified field, return the column reference (e.g. Table1.FieldX)
            </summary>
            <param name="fieldName">
            The field to sort against, doc qualifiers will be of the form [NAME] in brackets, otherwise it will be an index name
            </param>
            <returns>The column reference to sort against, or null if it should be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.SearchSqlGenerator.AddStandardColumns(Oculus.Util.Collections.StringList)">
            <summary>
            Add any standard columns to retrieve, these will be included in the list of columns
            we select
            </summary>
            <param name="columns">The list of columns to add to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.SearchSqlGenerator.GetIndexColumnReference(System.String)">
            <summary>
            Get the fully qualified column reference for the specified index.
            </summary>
            <param name="indexName">The name of the index we're going to retrieve</param>
            <returns>The column reference, or null if it should be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.SearchSqlGenerator.GetSelectTables">
            <summary>
            Gets the COMPLETE set of tables we're going to be selecting against. Include any aliases.
            </summary>
            <returns>The list of tables to select from</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.SearchSqlGenerator.GetDefaultWhereClause">
            <summary>
            Gets any default where clause. DO NOT include the WHERE keyword.
            </summary>
            <returns>The default where clause, or null if there is none</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.SearchSqlGenerator.GetColumnReference(System.String)">
            <summary>
            Get the fully qualified column reference for the field. Can be index or document field.
            </summary>
            <param name="fieldName">The field name</param>
            <returns>The column name. If null is returned, this field will be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.SearchSqlGenerator.GetParameterName(Oculus.Searching.SearchCriteriaItem)">
            <summary>
            Get the parameter name for the field. Can be index or document field.
            </summary>
            <param name="item">The criteria item</param>
            <returns>The parameter name. Cannot be null, as GetColumnReference will be called first</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus7.SearchSqlGenerator.GetArchiveWhereClause(Oculus.Searching.ArchiveState)">
            <summary>
            Gets the relevant where clause for the archive state
            </summary>
            <param name="archiveState">The state requested, will never be "Any"</param>
            <returns>The where clause to use</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.AddInLoader.AddInLoader">
            <summary>
            This is a proxy for the creation of a dynamic AddIn which is called per profile
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.AddInLoader.AddInLoader.DefaultAppDomain">
            <summary>
            Gets the currenlty Active Appdomain Name
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.AddInLoader.AddInLoader.DefaultType">
            <summary>
            Get the default type
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.AddInLoader.AddInLoader.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the proxy.
            </summary>
            <param name="FullyQualifiedAssemblyName">Name of Assembly File to be loaded</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Oculus.Plugins.Oculus10SAP.AddInLoader.AddInLoader.#ctor(System.String,System.String,System.String,System.String)" -->
        <member name="M:Oculus.Plugins.Oculus10SAP.AddInLoader.AddInLoader.AddInLoaderClearDefaultAppDomain">
            <summary>
            Clears the newly created app domain so that memory may be freed
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.AddInLoader.AddInLoader.ReverseValue(System.String)">
            <summary>
            Returns a reversed value of the passed string
            </summary>
            <param name="Value">String to be reversed</param>
            <returns>Reversed Value</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.AddInLoader.AppDomainCore.#ctor(System.String)">
            <summary>
            creates an instance of Appdomain in the Specified Name
            </summary>
            <param name="AppDoaminName"></param>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.AddInLoader.AppDomainCore.DefaultAppDomain">
            <summary>
            Gets the Currently Active Appdomain
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.AddInLoader.AppDomainCore.LoadAppDomain">
            <summary>
            Creates a new Application Domain instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.AddInLoader.AppDomainCore.ClearAppDomain">
            <summary>
            Clears the currently used Application domain if exists.
            </summary>
            <returns>Boolean regarding operation sucessfull or not</returns>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.AddInLoader.AssemblyCore.DefaultAssemblyFileName">
            <summary>
            returns the currently Active Assembly File. The name will be same but 
            the file will different and if we create an .Net Assembly Reference from this 
            it will be different.
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.AddInLoader.AssemblyCore.DefaultAssemblyFile">
            <summary>
            Returns the currently Active Assembly File's FileInfo Object.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.AddInLoader.AssemblyCore.SetDefaultAssemblyFile(System.String)">
            <summary>
            Sets a reference to the Specified Assembly file. 
            File Should be in Bin folder of the application. If not, it should be an absolute path
            </summary>
            <param name="AssemblyName">Name of Assembly file without FilePath</param>
            <returns></returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.BaseInterfaces.IAddInBaseInterface">
            <summary>
            Interface to share Business model specifically for SAP. This Interface should be implemented in all the versions and main application
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.BaseInterfaces.IAddInBaseInterface.AddInAddDocument(System.String,System.Collections.ArrayList,Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord)">
            <summary>
            Add Document manipulation for SAP per custom library
            </summary>
            <param name="action"></param>
            <param name="sapIndexes"></param>
            <param name="docMapRecord"></param>
            <returns>ArrayList with Data.QueueingRecords</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.BaseInterfaces.IAddInBaseInterface.AddInReIndexDocument(System.String,System.Collections.ArrayList,System.Collections.ArrayList,Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord)">
            <summary>
            ReIndex Document manipulation for SAP per custom Library
            </summary>
            <param name="action">ReIndex</param>
            <param name="sapIndexes">All the document Indexes</param>
            <param name="docMapRecord">A Document Mapping Record</param>
             <returns>ArrayList with Data.QueueingRecords</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.BaseInterfaces.IAddInBaseInterface.AddInDeleteDocument(System.String,System.Collections.ArrayList,Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord)">
            <summary>
            Delete Document manipulation for SAP per custom Library
            </summary>
            <param name="action">Delete</param>
            <param name="sapIndexes">All the document Indexes</param>
            <param name="docMapRecord">A Document Mapping Record</param>
            <returns>ArrayList with Data.QueueingRecords</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.BaseInterfaces.IAddInBaseInterface.ReverseValue(System.String)">
            <summary>
            Test Method
            </summary>
            <param name="Value"></param>
            <returns>A reversed string</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.AddInProfile">
            <summary>
            This contains settings for a virtual profile
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.AddInProfile.#ctor(System.String,System.String,System.String)">
             <summary>
             Initialization constructor
             </summary>
             <param name="name">The name of the profile</param>
             <param name="addIn">The add in fully qualified path</param>
            <param name="defaultContRep">The overriding content repository</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.AddInProfile.Name">
            <summary>Get/Set the name of the profile associated with this virtual profile</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.AddInProfile.AddIn">
            <summary>Get/Set the add in </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.AddInProfile.DefaultContRep">
            <summary>Get/Set the default sap cont rep </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.AuditHelper">
            <summary>
            The audit helper for the 7 plug-in
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.AuditHelper.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="connection">The connection to use</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.AuditHelper.IdType">
            <summary>
            Gets the data type for our ids
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.AuditHelper.EmptyValue">
            <summary>
            Gets the empty value for our type
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.AuditHelper.IsEmptyValue(System.Guid)">
            <summary>
            Determines if the value is empty or not
            </summary>
            <param name="value">The value</param>
            <returns>True if empty, false otherwise</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Collections.ParamDictionary">
            <summary>
            Class which contains a parameter-name indexed list of search criteria items
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.Collections.DocProfileRecordList">
            <summary>
            List of DocProfileRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.Collections.DocRecordList">
            <summary>
            List of DocRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.Collections.FragRecordList">
            <summary>
            List of FragRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.Collections.IndexRecordList">
            <summary>
            List of IndexRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.Collections.MonikerRecordList">
            <summary>
            List of MonikerRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.Collections.IndexDictionary">
            <summary>
            A dictionary of index records, indexed by index name
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.DocProfileRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocProfileRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocProfileRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SAP.Data.Collections.IndexDictionary)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
            <param name="indexes">The indexes to add to the record</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocProfileRecord.DocId">
            <summary>
            The document id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocProfileRecord.Indexes">
            <summary>
            The set of indexes
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocProfileRecord.LoadRecord(System.Guid,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SAP.PluginManager)">
            <summary>
            Loads a DOC_DOCUMENT record based on the id provided.
            </summary>
            <param name="docId">The document id</param>
            <param name="profileId">The profile id for the document</param>
            <param name="connection">The connection</param>
            <param name="manager">The manager to use</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocProfileRecord.AddRecord(Oculus.Plugins.Oculus10SAP.Data.DocProfileRecord,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SAP.PluginManager)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="profileId">The profile id to use</param>
            <param name="connection">The connection to use</param>
            <param name="manager">Our manager</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocProfileRecord.UpdateRecord(Oculus.Plugins.Oculus10SAP.Data.DocProfileRecord,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SAP.PluginManager)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="profileId">The profile id to use</param>
            <param name="connection">The connection to use</param>
            <param name="manager">Our manager</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocProfileRecord.DeleteRecord(System.Guid,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SAP.PluginManager)">
            <summary>
            Deletes the specified record from the profile table
            </summary>
            <param name="docId">The document id</param>
            <param name="profileId">The profile id</param>
            <param name="connection">The connection</param>
            <param name="manager">The manager</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.DocRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocRecord.Id">
            <summary>
            The document id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocRecord.ProfileId">
            <summary>
            The profile id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocRecord.Name">
            <summary>
            The document name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocRecord.Description">
            <summary>
            The document description
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocRecord.MetaData">
            <summary>
            The document metadata xml
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocRecord.SqlInsertRecord">
            <summary>
            1:ID, 2:PROFILE_ID, 3:NAME, 4:DESCRIPTION, 5:SECURED, 6:METADATA
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocRecord.AddRecord(Oculus.Plugins.Oculus10SAP.Data.DocRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocRecord.LoadRecord(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads a DOC_DOCUMENT record based on the id provided.
            </summary>
            <param name="id">The id</param>
            <param name="connection">The connection</param>
            <returns>The record</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord">
            <summary>
            Contains utility methods
            </summary>
            
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.OculusDocID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.SAPDocID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.SAPContRep">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.OculusProfileID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.DataModificationDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.DataModificationTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.CreationDate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.CreationTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.ComponentID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.DocuProt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.Deleted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.SqlFetchRecords">
            <summary>
            fetches a sql record
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.SqlInsertRecord">
            <summary>
            inserts an index record. 0:id, 1:profile id, 2:name, 3:type, 4:length, 5:attributes, 6:active
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.AddRecord(Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.LoadRecord(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads a DOCUMENT_MAPPING record based on the oculus doc id provided.
            </summary>
            <param name="id">The id</param>
            <param name="connection">The connection</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.DocumentMappingRecord.LoadRecordSAP(System.String,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads a DOCUMENT_MAPPING record based on the sap doc id provided.
            </summary>
            <param name="id">The id</param>
            <param name="connection">The connection</param>
            <returns>The record</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.FragRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.FragRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.FragRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.FragRecord.Id">
            <summary>
            The fragment id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.FragRecord.VersionId">
            <summary>
            The version id for the fragment
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.FragRecord.FileName">
            <summary>
            The fragment file name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.FragRecord.Sequence">
            <summary>
            The sequence of the fragment within the version
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.FragRecord.PageCount">
            <summary>
            The total number of pages. Deprecated
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.FragRecord.ContentType">
            <summary>
            The MIME type for the document
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.FragRecord.SqlInsertRecord">
            <summary>
            1:ID, 2:VERSION_ID, 3:FILE_NAME, 4:PAGE_COUNT, 5:SEQUENCE, 6:SECURED
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.FragRecord.LoadFromCommand(System.Data.Common.DbCommand,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves a list of fragment records from the specified command
            </summary>
            <param name="cmd">The command</param>
            <param name="connection">The connection</param>
            <returns>The set of records</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.FragRecord.AddRecord(Oculus.Plugins.Oculus10SAP.Data.FragRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.FragRecord.GetAllRecordsForDoc(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads all DOC_FRAGMENT record based on the doc id provided.
            </summary>
            <param name="docId">The document id</param>
            <param name="connection">The connection</param>
            <returns>The fragment records, sorted in sequence</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.FragRecord.LoadRecord(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads a DOC_FRAGMENT record based on the id provided.
            </summary>
            <param name="id">The id</param>
            <param name="connection">The connection</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.FragRecord.GetConsolidationFragmentSequence(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves out the list of fragments that, in consolidation mode, would comprise the document
            </summary>
            <param name="documentId">the document id</param>
            <param name="connection">The connection</param>
            <returns>The list of items</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.IndexRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.Id">
            <summary>
            The index unique id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.ProfileId">
            <summary>
            The profile id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.Name">
            <summary>
            The index name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.IndexType">
            <summary>
            The index type
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.Length">
            <summary>
            The index length
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.Attributes">
            <summary>
            The index attributes
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.Active">
            <summary>
            Whether or not the index is active
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.DbType">
            <summary>
            The database type for the index
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.SqlInsertRecord">
            <summary>
            inserts an index record. 0:id, 1:profile id, 2:name, 3:type, 4:length, 5:attributes, 6:active
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.SqlUpdateRecord">
            <summary>
            updates an index record. 0:length, 1:active, 2:profile id, 3:name
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.SetDbType">
            <summary>
            Automatically sets the DbType value based on the Type
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.GetIndexes(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves the set of indexes for the specified profile
            </summary>
            <param name="profileId">The id</param>
            <param name="connection">The connection</param>
            <returns>The string-indexed list of records</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.AddRecord(Oculus.Plugins.Oculus10SAP.Data.IndexRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.IndexRecord.UpdateRecord(Oculus.Plugins.Oculus10SAP.Data.IndexRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Updates the LENGTH and ACTIVE status for the specified record - nothing else can change
            </summary>
            <param name="record">The record to update</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.MonikerRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.MonikerRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.MonikerRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.MonikerRecord.Moniker">
            <summary>
            The moniker for the record
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.MonikerRecord.FragmentId">
            <summary>
            The fragment id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.MonikerRecord.MonikerType">
            <summary>
            The type of moniker for the fragment. NB from v9 this will only be online
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.MonikerRecord.SqlInsertRecord">
            <summary>
            1:FRAGMENT_ID, 2:LIBRARY_ID, 3:PATH
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.MonikerRecord.GetAllRecords(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,System.String,System.String)">
            <summary>
            Gets all the records for the specified id and sql
            </summary>
            <param name="id">The id to use</param>
            <param name="connection">The connection to use</param>
            <param name="sql">The sql to use</param>
            <param name="paramName">The parameter name to use</param>
            <returns>The set of records for the query</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.MonikerRecord.AddRecord(Oculus.Plugins.Oculus10SAP.Data.MonikerRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.MonikerRecord.GetAllRecordsForDoc(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads all DOC_MONIKER records based on the doc id provided.
            </summary>
            <param name="docId">The document id</param>
            <param name="connection">The connection</param>
            <returns>The fragment records, sorted in sequence</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.MonikerRecord.GetAllRecordsForFrag(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads all DOC_MONIKER records based on the fragment id provided.
            </summary>
            <param name="fragmentId">The fragment id</param>
            <param name="connection">The connection</param>
            <returns>The fragment records, sorted in sequence</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.MonikerRecord.GetOrCreateLibrary(System.String,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves the id for an existing library, or inserts a new library and returns the id.
            </summary>
            <param name="libraryText">The text for the library</param>
            <param name="connection">The connection</param>
            <returns>The id to use for the library</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.Id">
            <summary>
            The id (primary key) of the record
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.SAPDocID">
            <summary>
            GUID that SAP will use to call for this document
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.SAPArchiveID">
            <summary>
            The SAP Content Repository e.g O2 or O3
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.SAPObject">
            <summary>
            BUS1006 / BUS2049 The SAP Business Object
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.SAPObjectID">
            <summary>
            e.g. C210 + Contract Number, IBL + Reference Number 
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.SAPArchiveObject">
            <summary>
            The Archive Object e.g. ZOCU_3PMBD
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.SAPArchiveDate">
            <summary>
            Date and Time this document was stored in Oculus
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.SAPDocDescription">
            <summary>
            Free form text to describe the document in SAP 
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.Reserve">
            <summary>
            The doc type (TIFF PDF etc)
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.DocumentAction">
            <summary>
            Actions: 2:Edit, 1:Insert, 3:Delete
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.SqlInsertRecord">
            <summary>
            inserts an index record. 0:id, 1:profile id, 2:name, 3:type, 4:length, 5:attributes, 6:active
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Data.QueueingRecord.AddRecord(Oculus.Plugins.Oculus10SAP.Data.QueueingRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Engine">
            <summary>
            Oculus 8 native implementation of a plug-in.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.#ctor">
            <summary>
            Creates a default instance of the object - this is the constructor
            always activated by the engine
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Engine.m_manager">
            <summary>
            Contains all settings and access to most things we need to do
            - created on initialize
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Engine.m_search">
            <summary>
            Handles a search, etc - created on initialize
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Engine.defaultAddInProxy">
            <summary>
            The default add in library would be handled by this
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.GetAddInLibrary(Oculus.Configuration.ProfileContext)">
            <summary>
            Gets the library fully qualified name from configuration for this profile
            Returns blank if not found or configured
            </summary>
            <param name="profileContext">The profile Context for this document</param>
            <returns>A Fully qualified assembly string </returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.GetAddInLibrary(System.String)">
            <summary>
            Gets the library fully qualified name from configuration for this profile
            Returns blank if not found or configured
            </summary>
            <param name="profileID">The profile ID for this document</param>
            <returns>A Fully qualified assembly string </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Oculus.Plugins.Oculus10SAP.Engine.GetAddInContRep(Oculus.Configuration.ProfileContext)" -->
        <!-- Badly formed XML comment ignored for member "M:Oculus.Plugins.Oculus10SAP.Engine.GetAddInContRep(System.String)" -->
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.UpdateExistingDocumentFragments(Oculus.Storage.StorageDocument)">
            <summary>
            NOT Supported
            Updates the fragments of a specific document with a new fragment set
            </summary>
            <param name="document">The document to be completely updated</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.UpdateExistingDocumentAppendFragment(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment)">
            <summary>
            NOT Supported
            Inserts a fragment at the end of all the fragments 
            </summary>
            <param name="document">The document to be updated</param>
            /// <param name="fragment">The fragment to be added at the end</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.UpdateExistingDocumentInsertFragmentBefore(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment,System.Int32)">
            <summary>
            NOT Supported
            Inserts a fragment at a specified position (before) the next fragment
            e.g if a frag is inserted at position 3, the current fragment 3 will move down to 4 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updated</param>
            <param name="fragment">The fragment to be added</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.UpdateExistingDocumentDeleteFragAtPosition(Oculus.Storage.StorageDocument,System.Int32)">
            <summary>
            NOT Supported
            Deletes a fragment at position x 
            e.g if a frag is deleted at position 3, the current fragment 4 will move up to 3 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updateded</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.AddDocument(Oculus.Storage.StorageDocument,Oculus.Configuration.ProfileContext)">
            <summary>
             Adds a document to the plug-in. Returns a moniker object representing the 
             newly added item. The plug-in should try and use the document and fragment id's, if possible.
            </summary>
            <param name="document">The document to be added</param>
            <param name="profileContext">The context under which the document should be added</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.ChangeDocumentProfile(Oculus.Storage.ItemMoniker,Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
             Changes the profile under which a document is stored to a new profile.
             Returns the moniker representing the item under the new profile.
            </summary>
            <param name="documentMoniker">The document moniker</param>
            <param name="newProfile">The new profile context to use</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.DeleteDocument(Oculus.Storage.ItemMoniker)">
            <summary>
             Removes the document with the specified id from the plug-in.
            </summary>
            <param name="documentMoniker">The moniker of the document to delete.</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.GetDocument(Oculus.Storage.ItemMoniker)">
            <summary>
            Returns a document, including all metadata, available properties, and indexes.  Fragments should
            be attached, but need only contain their names and monikers.
            </summary>
            <param name="documentMoniker">The document to retrieve, this wil automatically be attached to any fragments</param>
            <returns>The storage document object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.GetProfileId(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the profile id for the specified document.
            </summary>
            <param name="documentMoniker">The document in question</param>
            <returns>The profile id for the document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.ReindexDocument(Oculus.Storage.ItemMoniker,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
             Changes the index values under which a document is stored.
            </summary>
            <param name="documentMoniker">The document moniker to reindex</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.UpdateDocumentDescription(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
             Changes the description on the document.
            </summary>
            <param name="documentMoniker">
             the moniker of the document to change.
            </param>
            <param name="newDescription">
             the new description for the document
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.UpdateDocumentName(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
             Changes the name on the document.
            </summary>
            <param name="documentMoniker">
             the moniker of the document to change
            </param>
            <param name="newName">
             the new name for the document
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.UpdateXmlMetadata(Oculus.Storage.ItemMoniker,System.Xml.XmlDocument)">
            <summary>
            Sets the metadata to the document. If no xml exists, it is added.  
            If it does exist, it is updated to the new version of the xml.
            If the value is null, deletes the xml.
            </summary>
            <param name="documentMoniker">the moniker for the document</param>
            <param name="metadataXml">
             The xml data to add as metadata for this document/document version
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.ConsolidatedWrite(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of ALL the fragments in the moniker. Obviously, this can only be 
            done with certain data types. This functionality will generally only be used in situations where
            the content is known ahead of time to be image data. All images within the document should be combined.
            
            The mime type will be used to handle conversions. Natively, we support application/pdf and 
            image/tiff for our 7 and 8 plug-ins. However, you could handle your own types and still call in through
            the main document API.
            </summary>
            <param name="documentMoniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
            <param name="mimeType">The mime type of the resulting document</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.Engine.PluginId">
            <summary>
            Gets the plug-in id after initialization. Each plug-in is required to store their id 
            for subsequent retrievals.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.Initialise(System.Xml.XmlElement,System.String)">
            <summary>
             Passes config information to the plugin at instantiation. This method
             is the first method called after object construction.  Also included is the plug-in
             id - this should be remembered and used by plug-ins to populate fields on documents,
             etc.
            </summary>
            <param name="configXml">
             The xml containing the config information.
            </param>
            <param name="pluginId">
             The id of the plug-in as defined within configuration (i.e. the plug-in name).
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.NotifyOfSystemConfigChange(System.Xml.XmlDocument)">
            <summary>
             Passes all configuration information to the plugin as it exists in the config
             xml.
            </summary>
            <param name="newConfigXml">
             The xml containing the new system-wide config information.
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.GetAuditDetail(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the collection of audit information for the moniker
            </summary>
            <param name="documentMoniker">The moniker of the document</param>
            <returns>The collection of audit information</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.WriteFragmentToStream(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
             Provided with the moniker, the plug-in must write the object's data to the specified stream.
            </summary>
            <param name="moniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.GetFragmentDataLength(Oculus.Storage.ItemMoniker)">
            <summary>
             Returns the size of the data represented by the moniker
            </summary>
            <param name="moniker">The moniker of the data to write</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.GetFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Returns a fragment. It must have its DocumentMoniker property set.
            </summary>
            <param name="fragmentMoniker">The fragment to retrieve</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.SetFragmentLocationMoniker(Oculus.Storage.ItemMoniker,Oculus.Storage.ItemMoniker)">
            <summary>
             These methods updates the fragment (file) pointer in the target plug-in for the 
             target fragment to instead point to the archive plug-in.  
             The plug-in will defer retrieval of the physical file to the storage plug-in as specified in 
             the moniker parameter.
            </summary>
            <param name="fragmentMoniker">
             the moniker for the particular fragment being archived
            </param>
            <param name="locationMoniker">
             the moniker that maps to the fragment in the archive system
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.DeleteLocalFragmentData(Oculus.Storage.ItemMoniker)">
            <summary>
            This method may be called after a document is successfully archived and native format(s) of 
            the document fragment no longer needs to be stored. NB this is not to be confused with 
            IDocumentHandler.DeleteFragment, which is meant to delete the entire fragment record from 
            the system.  This call should only remove the local storage of the file associated with the fragment.
            </summary>
            <param name="moniker">
             the moniker for the particular data whose local byte data should be deleted
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.DeleteFragment(Oculus.Storage.ItemMoniker)">
            <summary>
             Removes a fragment from the system.
            </summary>
            <param name="moniker">the moniker to delete</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.Search(Oculus.Searching.SearchCriteria)">
            <summary>
             Performs a search for documents using the xml schema format defined by SearchXmlDocument.xsd.
             
             Please note, this procedure does not return any results, as results are retrieved via FetchResults
            </summary>
            <param name="search">The search criteria.</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.FetchResults(System.Int32)">
            <summary>
             Returns the specified number of records from the search.
            </summary>
            <param name="numRecords">
             The target number of records to retrieve from the search results
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.ReleaseSearch">
            <summary>
             Called when the search is no longer needed and all associated resources with the search may be safely released.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Engine.Dispose">
            <summary>
            Releases resources for the object
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.SqlOperation">
            <summary>
            Helper enumeration for working with virtual profiles
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.SqlOperation.Select">
            <summary>Select SQL statement</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.SqlOperation.Update">
            <summary>Update SQL statement</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.SqlOperation.Delete">
            <summary>Delete SQL statement</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.SqlOperation.Insert">
            <summary>Insert SQL statement</summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.FragmentMonikerType">
            <summary>
            Helper enum for fragment monikers
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.FragmentMonikerType.Online">
            <summary>Indicates an online moniker.</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.FragmentMonikerType.Offline">
            <summary>Indicates an offline moniker. Deprecated</summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.LocalIndexType">
            <summary>
            Unfortunately, these are the values stored in the type field for indexes in the database
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.LocalIndexType.String">
            <summary>Indicates a string index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.LocalIndexType.Numeric">
            <summary>Indicates a numeric index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.LocalIndexType.DateTime">
            <summary>Indicates a date-time index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.LocalIndexType.Date">
            <summary>Indicates a date index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.LocalIndexType.Time">
            <summary>Indicates a time index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.LocalIndexType.Currency">
            <summary>Indicates a currency (decimal) index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.LocalIndexType.Boolean">
            <summary>Indicates a boolean index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.LocalIndexType.List">
            <summary>Indicates a list (text) index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.LocalIndexType.Custom">
            <summary>Indicates any other index type</summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Helpers.Config">
            <summary>
            Contains utility methods for interfacing with configuration, namely changing
            our schema based on new configuration.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SAP.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Helpers.Config.SqlInvalidateIndex">
            <summary>
            Sets index record inactive. 0:false, 1:profile id, 2:index name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Helpers.Config.SqlDropView">
            <summary>
            Drop the view. Format 0:view name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Helpers.Config.SqlCreateView">
            <summary>
            Create the view. Format 0:view name, 1:base table
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.AddProfileEntry(System.Guid,System.String)">
            <summary>
            Adds the profile entry to the profiles table
            </summary>
            <param name="profileId">The id</param>
            <param name="profileName">the name</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.UpdateProfileEntry(System.Guid,System.String)">
            <summary>
            Updates the existing profile entry in the profiles table
            </summary>
            <param name="profileId">The id</param>
            <param name="profileName">the name</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.ReCreateProfileView(System.Guid,System.String,System.String)">
            <summary>
            Drops and creates the view on the profile, but only if the new name is different from the
            new name.
            </summary>
            <param name="profileId">The profile id</param>
            <param name="oldProfileName">The old name of the profile, string.empty if no old name</param>
            <param name="newProfileName">The new name of the profile (may be the same)</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.CreateProfileView(System.Guid,System.String,System.Boolean)">
            <summary>
            Create the profile view
            </summary>
            <param name="profileId">The id</param>
            <param name="profileName">The name for the view</param>
            <param name="useSeparateConnection">If we need to use a separate connection to do the drop</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.DropProfileView(System.String,System.Boolean)">
            <summary>
            Drops the profile view from the system
            </summary>
            <param name="oldProfileName">The old profile name</param>
            <param name="useSeparateConnection">If we need to use a separate connection to do the drop</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.ExpansionRequired(Oculus.Data.Schema.Column,Oculus.Data.Schema.Column)">
            <summary>
            Determines if the base column needs to be expanded to accommodate the new column
            </summary>
            <param name="baseColumn">the current column</param>
            <param name="newColumn">the column to compare to</param>
            <returns>True if expansion is necessary, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.ModifyExistingProfileTable(System.Guid,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Modifies an existing profile table for the particular profile
            </summary>
            <param name="profileId">The id of the profile</param>
            <param name="profileNode">The node for the profile</param>
            <param name="doTableUpdates">True if we need to do schema changes, false if not (e.g. false for virtual profiles)</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.CreateNewProfileTable(System.Guid,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Creates a new profile table for the particular profile
            </summary>
            <param name="profileId">The id of the profile</param>
            <param name="profileNode">The node for the profile</param>
            <param name="doTableUpdates">True if we need to do schema changes, false if not (e.g. false for virtual profiles)</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.ToIndexRecord(System.Guid,Oculus.Data.Schema.Column)">
            <summary>
            Creates an index record object based on the column data
            </summary>
            <param name="profileId">The profile id</param>
            <param name="column">The column</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.UpdateIndexTable(System.Guid,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Plugins.Oculus10SAP.Collections.LocalIndexTypeDictionary)">
            <summary>
            Updates the INDEX table entries for each profile
            </summary>
            <param name="profileId">The profile id</param>
            <param name="indexesToAdd">The indexes to add</param>
            <param name="indexesToModify">The indexes to modify</param>
            <param name="indexesToInactivate">The indexes to inactivate (have been removed)</param>
            <param name="indexTypes">A dictionary of index types which links the column names to a data type</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.GetCurrentProfiles">
            <summary>
            Returns an id-indexed list of the profiles currently in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.NotifyOfNewConfiguration(System.Xml.XmlDocument)">
            <summary>
            Obtains a new copy of configuration
            </summary>
            <param name="newConfigXml">The new configuration</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.AddSAPHiddenIndexes(System.Xml.XmlDocument)">
            <summary>
            Cheat method to add the hidden SAP Indexes to the configuration
            </summary>
            <param name="newConfigXml"></param>
            <returns></returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Helpers.Config.HiddenIndexes">
            <summary>
            Structure to containthe basics of the hidden indexes
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Config.AddSAPHiddenIndexes(System.Xml.XmlElement,System.String)">
            <summary>
            Cheat method to add the hidden SAP Indexes to the configuration
            </summary>
            <param name="newConfigXml"></param>
            <returns></returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Helpers.DocMapping">
            <summary>
            Contains utility methods for interfacing with docu mapping .
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocMapping.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SAP.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Helpers.DocMapping.SqlInsertDocMapping">
            <summary>
            1:ID, 2:DOCUMENT_ID, 3:VERSION, 4:CREATED, 5:CREATED_BY, 6:STATUS, 7:SECURED
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocMapping.GetDocMappingRecordFromSAP(System.String,System.Guid)">
            <summary>
            Gets the docMappingRecord when given a SAP Document ID
            </summary>
            <param name="oculusDocID"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocMapping.UpdateModificationDateTime(System.Guid,System.String,System.String)">
            <summary>
            Updates the document description for the id - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="newDateModification">The new Modified Date of our document</param>
            <param name="newTimeModification">The new Modification Date of our document</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocMapping.DeleteDocMappingRecord(System.Guid)">
            <summary>
            Updates the document description for the id - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="newDateModification">The new Modified Date of our document</param>
            <param name="newTimeModification">The new Modification Date of our document</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocMapping.Delete(System.Guid)">
            <summary>
            Deletes the specified document from the archive. HEAP of commands
            </summary>
            <param name="docId">The id of our document</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Helpers.Document">
            <summary>
            Contains utility methods for interfacing with Documents.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SAP.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SAP.Helpers.Document.SqlInsertVersion">
            <summary>
            1:ID, 2:DOCUMENT_ID, 3:VERSION, 4:CREATED, 5:CREATED_BY, 6:STATUS, 7:SECURED
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.GetDocument(System.Guid)">
            <summary>
            Retrieves an engine document based on the id
            </summary>
            <param name="docId">The id of the document to retrieve</param>
            <returns>The document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.GetProfileId(System.Guid)">
            <summary>
            Retrieves the document profile based on the id
            </summary>
            <param name="docId">The id of the document to retrieve</param>
            <returns>The profile id</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.GetNewestVersionId(System.Guid)">
            <summary>
            Retrieves the newest version id for the document (generally only one)
            </summary>
            <param name="docId">The id of the document</param>
            <returns>The active version id</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.DocumentExists(System.Guid)">
            <summary>
            Returns true if the document exists in the system, false if not. This is a cached operation
            for the lifetime of the object.
            </summary>
            <param name="docId">The document id</param>
            <returns>True if we've got it, false if not</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.VerifyDocumentExists(System.Guid)">
            <summary>
            Throws an exception if the document doesn't exist. This is a cached operation.
            </summary>
            <param name="docId">The document id</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.ChangeProfile(System.Guid,System.Guid,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Reprofiles the document specified
            </summary>
            <param name="docId">The id of our document</param>
            <param name="profileId">The new profile id</param>
            <param name="newIndexes">The new indexes</param>
            <returns>The new moniker for the item</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.UpdateDescription(System.Guid,System.String)">
            <summary>
            Updates the document description for the id - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="newDescription">The new description to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.AddHiddenIndexes(Oculus.Configuration.Components.Collections.IndexValueList,System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Adds the values to the hidden indexes if they do not exist
            </summary>
            <param name="documentIndexes"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.AddDocument(Oculus.Storage.StorageDocument,Oculus.Configuration.ProfileContext,System.String,System.String,System.String)">
            <summary>
            Adds a document to the system
            </summary>
            <param name="document">The document to add</param>
            <param name="profileContext">The profile context to use</param>
            <returns>The id of the document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.AddDocumentVersion(System.Guid,System.Guid,System.Int32)">
            <summary>
            Adds a version record for the specified document - does not check if it exists
            </summary>
            <param name="docId">The doc id</param>
            <param name="versionId">The id for the new version</param>
            <param name="versionNumber">The number for the new version</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.UpdateName(System.Guid,System.String)">
            <summary>
            Updates the document name for the id - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="newName">The new name to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.Reindex(System.Guid,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Applies a new set of indexes to a document
            </summary>
            <param name="docId">The id of our document</param>
            <param name="indexes">The new index values</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.Delete(System.Guid)">
            <summary>
            Deletes the specified document from the archive. HEAP of commands
            </summary>
            <param name="docId">The id of our document</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.DeleteXmlMetadata(System.Guid)">
            <summary>
            Deletes the xml metadata for the specified document - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Document.SetXmlMetadata(System.Guid,System.Xml.XmlDocument)">
            <summary>
            Sets the xml associated with a document - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="xml">The xml for the metadata</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment">
            <summary>
            Contains utility methods for interfacing with Document Fragments
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SAP.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.ApplyMoniker(Oculus.Storage.StorageFragment,Oculus.Plugins.Oculus10SAP.Data.MonikerRecord)">
            <summary>
            Adds the moniker to the fragment
            </summary>
            <param name="fragment">The fragment</param>
            <param name="monikerRecord">The moniker</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.GetBasicFragmentFromRecord(System.Guid)">
            <summary>
            Retrieves a basic fragment from the default record. All that remains is to populate
            the online/offline monikers and document moniker
            </summary>
            <param name="fragmentId">The fragment id</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.GetBasicFragmentFromRecord(Oculus.Plugins.Oculus10SAP.Data.FragRecord)">
            <summary>
            Retrieves a basic fragment from the default record. All that remains is to populate
            the data moniker and document moniker
            </summary>
            <param name="record">The base record</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.WriteStreamToFile(Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Writes the contents of the oculus stream to the specified location
            </summary>
            <param name="stream">The stream (will not be closed)</param>
            <param name="path">The path to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.WriteConsolidated(System.Guid,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Writes the consolidated content of the entire fragment to the output stream
            </summary>
            <param name="documentId">The id of our DOCUMENT</param>
            <param name="stream">The stream to write to</param>
            <param name="mimeType">The target mime type, default is tiff</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.WriteConsolidated(Oculus.Storage.StorageDocument,System.Guid,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Writes the consolidated content of the entire fragment to the output stream
            THIS IS ONLY FOR ARCHIVED DOCUMENTS
            </summary>
            <param name="documentId">The id of our DOCUMENT</param>
            <param name="stream">The stream to write to</param>
            <param name="mimeType">The target mime type, default is tiff</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.WriteFragmentData(System.Guid,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the simple content of the specified fragment to the output stream
            </summary>
            <param name="fragmentId">The id of our fragment</param>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.WriteFileToStream(System.String,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the simple content of the specified file to the output stream
            </summary>
            <param name="fragFilePath">The path of our fragment</param>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.FragmentExists(System.Guid)">
            <summary>
            Checks to see if the fragment with the specifid id exists. This is a cached operation.
            </summary>
            <param name="fragmentId">The id of the fragment to check</param>
            <returns>True if it exists, false if not</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.VerifyFragmentExists(System.Guid)">
            <summary>
            Ensures the fragment exists in the archive. Throws an exception if it does not.
            This is a cached operation
            </summary>
            <param name="fragmentId">The id of the fragment to verify</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.GetMaxSequenceNumber(System.Guid)">
            <summary>
            Retrieves the max sequence number for a specific version
            </summary>
            <param name="versionId">The id of the version</param>
            <returns>The highest sequence number in a version</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.GetDocumentIdForFragment(System.Guid)">
            <summary>
            Retrieves the document id for the specified fragment
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <returns>The id of the owner document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.GetDocumentFragment(System.Guid)">
            <summary>
            Retrieves an engine fragment for the specified id
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.GetDocumentFragments(System.Guid)">
            <summary>
            Retrieves all fragment records for a specific document.
            </summary>
            <param name="docId">The document id</param>
            <returns>The list of fragments, consolidated as necessary</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.GetFragmentPath(System.Guid)">
            <summary>
            Retrieves the path for a specific fragment
            </summary>
            <param name="fragmentId">The fragment id</param>
            <returns>The path</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.GetDocumentFragmentPaths(System.Guid)">
            <summary>
            Retrieves the paths for all fragments of a document
            </summary>
            <param name="docId">The doc id</param>
            <returns>The list of ids</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.Append(System.Guid,Oculus.Storage.StorageFragment)">
            <summary>
            Appends the fragment to the specified document
            </summary>
            <param name="docId">The id of our document</param>
            <param name="fragment">The fragment to append</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.Append(System.Guid,Oculus.Storage.StorageFragment,System.Int32)">
            <summary>
            Appends the fragment to the specified document version
            </summary>
            <param name="versionId">The version id to append to</param>
            <param name="fragment">The fragment to append</param>
            <param name="sequenceNo">The sequence number to use - should be last in list - does not check!</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.Delete(System.Guid)">
            <summary>
            Deletes the fragment with the specified id
            </summary>
            <param name="fragmentId">The id of the fragment to delete</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.GetLength(System.Guid)">
            <summary>
            Gets the length of a particular fragment.
            </summary>
            <param name="fragmentId">The id of the fragment we're interested in</param>
            <returns>The fragment length</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.GetLocalByteLength(System.Guid)">
            <summary>
            Retrieves the byte length of a particular fragment
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <returns>The number of bytes in the local data</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.GetLocalByteLength(System.String)">
            <summary>
            Retrieves the byte length of a particular fragment file.
            </summary>
            <param name="fragmentPath">The path of the fragment</param>
            <returns>The number of bytes in the local data</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.Write(System.Guid,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the fragment data to the specified stream.
            </summary>
            <param name="fragmentId">The id of our fragment</param>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.DeleteLocalData(System.Guid)">
            <summary>
            Removes the physical file for a fragment.
            </summary>
            <param name="fragmentId">The id of our fragment</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.SetMoniker(System.Guid,Oculus.Storage.ItemMoniker)">
            <summary>
            Sets the online moniker for a fragment
            </summary>
            <param name="fragmentId">The id of our fragment</param>
            <param name="moniker">The moniker</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.ConsolidatedWrite(System.Guid,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of the specified document
            </summary>
            <param name="documentId">The document id</param>
            <param name="stream">The stream to write to</param>
            <param name="mimeType">The target mime type</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.DocumentFragment.ConsolidatedWriteArchivedFragment(Oculus.Storage.StorageDocument,System.Guid,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of the specified document for ArchivedDocs
            </summary>
            <param name="documentId">The document id</param>
            <param name="stream">The stream to write to</param>
            <param name="mimeType">The target mime type</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Helpers.TempFrag">
            <summary>
            this is used ONLY to keep track of the tempfiles for consolidated write 
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Helpers.Util">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Util.GetId(System.String)">
            <summary>
            Retrieves a guid id from the string
            </summary>
            <param name="id">The id</param>
            <returns>The guid</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Util.IsImageType(System.String)">
            <summary>
            Determines if the mime type is an image
            </summary>
            <param name="mimeType">The mime type</param>
            <returns>True if it's tiff, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Helpers.Util.GetDbTypeForIndexType(Oculus.Plugins.Oculus10SAP.LocalIndexType)">
            <summary>
            Gets a db type for the specified index type
            </summary>
            <param name="iType">The index type</param>
            <returns>The db type</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.PluginManager">
            <summary>
            This class contains the plug-in settings information, as loaded by the engine.
            This class is the only class that deals with reading the XML configuration
            provided by the plug-in.
            
            Please note that the settings component is valid for the lifetime of the plug-in.
            All database requests should go through this component, as well as any transaction
            processing.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Initialize the settings object with the xml node received from the engine
            </summary>
            <param name="config">The config</param>
            <param name="pluginId">The unique plug-in id</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.PluginManager.PluginId">
            <summary>Gets the plug-in id</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.PluginManager.StoreFolder">
            <summary>Gets the plug-in id</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.PluginManager.Server">
            <summary>Gets the server</summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.LoadVirtualProfiles(System.Xml.XmlNode)">
            <summary>
            Reads through the plug-in configuration and creates virtual profile nodes
            for each virtual profile encountered
            </summary>
            <param name="config">The configuration node</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.GetVirtualProfileId(System.Guid)">
            <summary>
            Fetch the id to use in the virtual profile list
            </summary>
            <param name="profileId">The profileId</param>
            <returns>The id to use</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.GetVirtualProfileId(System.String)">
            <summary>
            Fetch the id to use in the virtual profile list
            </summary>
            <param name="name">The name of the profile</param>
            <returns>The id to use</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.LoadAddInProfiles(System.Xml.XmlNode)">
            <summary>
            Reads through the plug-in configuration and creates addin profile nodes
            for each addin profile encountered
            </summary>
            <param name="config">The configuration node</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.GetAddInProfileId(System.Guid)">
            <summary>
            Fetch the id to use in the addin profile list
            </summary>
            <param name="profileId">The profileId</param>
            <returns>The id to use</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.GetAddInProfileId(System.String)">
            <summary>
            Fetch the id to use in the addin profile list
            </summary>
            <param name="name">The name of the profile</param>
            <returns>The id to use</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.NewConnection">
            <summary>
            For operations which are atomic and need not be transactioned, we can
            use this method to get access to a connection which will be used
            for the duration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.NewQueueingConnection">
            <summary>
            For operations which are atomic and need not be transactioned, we can
            use this method to get access to a connection which will be used
            for the duration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.GetTableName(System.Guid,Oculus.Plugins.Oculus10SAP.SqlOperation)">
            <summary>
            Retrieves the profile's table name for the specified operation
            </summary>
            <param name="profileId">The profile id</param>
            <param name="op">The operation to be performed</param>
            <returns>The table to use</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.GetIndexesForProfile(System.Guid)">
            <summary>
            Fetches the list of indexes for the profile - this is a cached operation
            </summary>
            <param name="profileId">The profile id</param>
            <returns>The list of indexes</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.GetFragmentPath(System.Guid,System.String)">
            <summary>
            Returns the full path to the fragment on the file system.
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <param name="fragmentName">The fragment name</param>
            <returns>The system path to the file</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.GetDocumentMoniker(System.Guid)">
            <summary>
            Generates an item moniker for the document
            </summary>
            <param name="docId">The id for the document</param>
            <returns>The moniker</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.GetFragmentMoniker(System.Guid)">
            <summary>
            Generates an item moniker for the fragment
            </summary>
            <param name="fragmentId">The id for the fragment</param>
            <returns>The moniker</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.IsVirtualProfile(System.Guid)">
            <summary>
            Determines if the profile is virtual or not.
            </summary>
            <param name="profileId">The id of the profile in question</param>
            <returns>True if it's a virtual profile, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.IsAddInProfile(System.Guid)">
            <summary>
            Determines if the profile is addin or not.
            </summary>
            <param name="profileId">The id of the profile in question</param>
            <returns>True if it's a add in profile, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.PluginManager.NewAuditHelper(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Creates a new instance of the audit helper and also ensures the audit tables have 
            been created
            </summary>
            <param name="connection">The connection to use</param>
            <returns>The helper</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.SAPIndexes">
            <summary>
            Oculus 8 native implementation of a plug-in.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.SAPIndexes.#ctor">
            <summary>
            Hidden Indexes for use in SAP
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.SAPIndexes.IndexName">
            <summary>
            The name of the index
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.SAPIndexes.IndexValue">
            <summary>
            The Value of the Index
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.Search">
            <summary>
            This contains settings for a virtual profile
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Search.#ctor(Oculus.Searching.SearchCriteria,Oculus.Plugins.Oculus10SAP.PluginManager)">
            <summary>
            Create a new search
            </summary>
            <param name="searchCriteria">The search</param>
            <param name="manager">The manager</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Search.RunSearch(Oculus.Searching.SearchCriteria)">
            <summary>
            Runs the specified search
            </summary>
            <param name="searchCriteria">the search criteria</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Search.FetchResults(System.Int32)">
            <summary>
            Retrieves the specified number of results of the specific search
            </summary>
            <param name="numResults">The number of results to fetch</param>
            <returns>The results in the standard format</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.Search.Dispose">
            <summary>
            Releases any resources for the object
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator">
            <summary>
            This class contains an implementation of the ISearchSqlGenerator interface and is responsible
            for generating the SQL used in search operations.
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator.IndexesToRetrieve">
            <summary>
            Get the set of indexes we need to retrieve
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator.Parameters">
            <summary>
            Get the set of parameters we're going to be using
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator.Indexes">
            <summary>
            Get the set of indexes we're going to be using
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator.Initialize(Oculus.Searching.SearchCriteria)">
            <summary>
            Initialize the generator with the specified search criteria. Called before any other
            methods.
            </summary>
            <param name="searchCriteria">The criteria we'll be generating sql against</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator.GetSortFieldReference(System.String)">
            <summary>
            For the specified field, return the column reference (e.g. Table1.FieldX)
            </summary>
            <param name="fieldName">
            The field to sort against, doc qualifiers will be of the form [NAME] in brackets, otherwise it will be an index name
            </param>
            <returns>The column reference to sort against, or null if it should be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator.AddStandardColumns(Oculus.Util.Collections.StringList)">
            <summary>
            Add any standard columns to retrieve, these will be included in the list of columns
            we select
            </summary>
            <param name="columns">The list of columns to add to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator.GetIndexColumnReference(System.String)">
            <summary>
            Get the fully qualified column reference for the specified index.
            </summary>
            <param name="indexName">The name of the index we're going to retrieve</param>
            <returns>The column reference, or null if it should be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator.GetSelectTables">
            <summary>
            Gets the COMPLETE set of tables we're going to be selecting against. Include any aliases.
            </summary>
            <returns>The list of tables to select from</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator.GetDefaultWhereClause">
            <summary>
            Gets any default where clause. DO NOT include the WHERE keyword.
            </summary>
            <returns>The default where clause, or null if there is none</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator.GetColumnReference(System.String)">
            <summary>
            Get the fully qualified column reference for the field. Can be index or document field.
            </summary>
            <param name="fieldName">The field name</param>
            <returns>The column name. If null is returned, this field will be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator.GetParameterName(Oculus.Searching.SearchCriteriaItem)">
            <summary>
            Get the parameter name for the field. Can be index or document field.
            </summary>
            <param name="item">The criteria item</param>
            <returns>The parameter name. Cannot be null, as GetColumnReference will be called first</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.SearchSqlGenerator.GetArchiveWhereClause(Oculus.Searching.ArchiveState)">
            <summary>
            Gets the relevant where clause for the archive state
            </summary>
            <param name="archiveState">The state requested, will never be "Any"</param>
            <returns>The where clause to use</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SAP.VirtualProfile">
            <summary>
            This contains settings for a virtual profile
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SAP.VirtualProfile.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name">The name of the profile</param>
            <param name="selectTable">The select table</param>
            <param name="insertTable">The insert table</param>
            <param name="updateTable">The update table</param>
            <param name="deleteTable">The delete table</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.VirtualProfile.Name">
            <summary>Get/Set the name of the profile associated with this virtual profile</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.VirtualProfile.DeleteTable">
            <summary>Get/Set the table used to delete</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.VirtualProfile.InsertTable">
            <summary>Get/Set the table used to insert</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.VirtualProfile.SelectTable">
            <summary>Get/Set the table used to select</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SAP.VirtualProfile.UpdateTable">
            <summary>Get/Set the table used to update</summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.AuditHelper">
            <summary>
            The audit helper for the 7 plug-in
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.AuditHelper.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="connection">The connection to use</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.AuditHelper.IdType">
            <summary>
            Gets the data type for our ids
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.AuditHelper.EmptyValue">
            <summary>
            Gets the empty value for our type
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.AuditHelper.IsEmptyValue(System.Guid)">
            <summary>
            Determines if the value is empty or not
            </summary>
            <param name="value">The value</param>
            <returns>True if empty, false otherwise</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Collections.ParamDictionary">
            <summary>
            Class which contains a parameter-name indexed list of search criteria items
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Data.Collections.DocProfileRecordList">
            <summary>
            List of DocProfileRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Data.Collections.DocRecordList">
            <summary>
            List of DocRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Data.Collections.FragRecordList">
            <summary>
            List of FragRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Data.Collections.IndexRecordList">
            <summary>
            List of IndexRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Data.Collections.MonikerRecordList">
            <summary>
            List of MonikerRecords
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Data.Collections.IndexDictionary">
            <summary>
            A dictionary of index records, indexed by index name
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Data.DocProfileRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.DocProfileRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.DocProfileRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SQLCE.Data.Collections.IndexDictionary)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
            <param name="indexes">The indexes to add to the record</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.DocProfileRecord.DocId">
            <summary>
            The document id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.DocProfileRecord.Indexes">
            <summary>
            The set of indexes
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.DocProfileRecord.LoadRecord(System.Guid,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SQLCE.PluginManager)">
            <summary>
            Loads a DOC_DOCUMENT record based on the id provided.
            </summary>
            <param name="docId">The document id</param>
            <param name="profileId">The profile id for the document</param>
            <param name="connection">The connection</param>
            <param name="manager">The manager to use</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.DocProfileRecord.AddRecord(Oculus.Plugins.Oculus10SQLCE.Data.DocProfileRecord,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SQLCE.PluginManager)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="profileId">The profile id to use</param>
            <param name="connection">The connection to use</param>
            <param name="manager">Our manager</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.DocProfileRecord.UpdateRecord(Oculus.Plugins.Oculus10SQLCE.Data.DocProfileRecord,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SQLCE.PluginManager)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="profileId">The profile id to use</param>
            <param name="connection">The connection to use</param>
            <param name="manager">Our manager</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.DocProfileRecord.DeleteRecord(System.Guid,System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SQLCE.PluginManager)">
            <summary>
            Deletes the specified record from the profile table
            </summary>
            <param name="docId">The document id</param>
            <param name="profileId">The profile id</param>
            <param name="connection">The connection</param>
            <param name="manager">The manager</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Data.DocRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.DocRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.DocRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.DocRecord.Id">
            <summary>
            The document id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.DocRecord.ProfileId">
            <summary>
            The profile id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.DocRecord.Name">
            <summary>
            The document name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.DocRecord.Description">
            <summary>
            The document description
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.DocRecord.MetaData">
            <summary>
            The document metadata xml
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.DocRecord.SqlInsertRecord">
            <summary>
            1:ID, 2:PROFILE_ID, 3:NAME, 4:DESCRIPTION, 5:SECURED, 6:METADATA
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.DocRecord.AddRecord(Oculus.Plugins.Oculus10SQLCE.Data.DocRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.DocRecord.LoadRecord(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads a DOC_DOCUMENT record based on the id provided.
            </summary>
            <param name="id">The id</param>
            <param name="connection">The connection</param>
            <returns>The record</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.Id">
            <summary>
            The fragment id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.VersionId">
            <summary>
            The version id for the fragment
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.FileName">
            <summary>
            The fragment file name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.Sequence">
            <summary>
            The sequence of the fragment within the version
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.PageCount">
            <summary>
            The total number of pages. Deprecated
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.ContentType">
            <summary>
            The MIME type for the document
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.SqlInsertRecord">
            <summary>
            1:ID, 2:VERSION_ID, 3:FILE_NAME, 4:PAGE_COUNT, 5:SEQUENCE, 6:SECURED
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.LoadFromCommand(System.Data.Common.DbCommand,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves a list of fragment records from the specified command
            </summary>
            <param name="cmd">The command</param>
            <param name="connection">The connection</param>
            <returns>The set of records</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.AddRecord(Oculus.Plugins.Oculus10SQLCE.Data.FragRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.GetAllRecordsForDoc(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads all DOC_FRAGMENT record based on the doc id provided.
            </summary>
            <param name="docId">The document id</param>
            <param name="connection">The connection</param>
            <returns>The fragment records, sorted in sequence</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.LoadRecord(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads a DOC_FRAGMENT record based on the id provided.
            </summary>
            <param name="id">The id</param>
            <param name="connection">The connection</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.FragRecord.GetConsolidationFragmentSequence(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves out the list of fragments that, in consolidation mode, would comprise the document
            </summary>
            <param name="documentId">the document id</param>
            <param name="connection">The connection</param>
            <returns>The list of items</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.Id">
            <summary>
            The index unique id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.ProfileId">
            <summary>
            The profile id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.Name">
            <summary>
            The index name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.IndexType">
            <summary>
            The index type
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.Length">
            <summary>
            The index length
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.Attributes">
            <summary>
            The index attributes
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.Active">
            <summary>
            Whether or not the index is active
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.DbType">
            <summary>
            The database type for the index
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.SqlInsertRecord">
            <summary>
            inserts an index record. 0:id, 1:profile id, 2:name, 3:type, 4:length, 5:attributes, 6:active
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.SqlUpdateRecord">
            <summary>
            updates an index record. 0:length, 1:active, 2:profile id, 3:name
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.SetDbType">
            <summary>
            Automatically sets the DbType value based on the Type
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.GetIndexes(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves the set of indexes for the specified profile
            </summary>
            <param name="profileId">The id</param>
            <param name="connection">The connection</param>
            <returns>The string-indexed list of records</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.AddRecord(Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds the specified record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord.UpdateRecord(Oculus.Plugins.Oculus10SQLCE.Data.IndexRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Updates the LENGTH and ACTIVE status for the specified record - nothing else can change
            </summary>
            <param name="record">The record to update</param>
            <param name="connection">The connection to use</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord.#ctor(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="reader">Reader from a SELECT *</param>
            <param name="connection">The helper connection</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord.Moniker">
            <summary>
            The moniker for the record
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord.FragmentId">
            <summary>
            The fragment id
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord.MonikerType">
            <summary>
            The type of moniker for the fragment. NB from v9 this will only be online
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord.SqlInsertRecord">
            <summary>
            1:FRAGMENT_ID, 2:LIBRARY_ID, 3:PATH
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord.GetAllRecords(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,System.String,System.String)">
            <summary>
            Gets all the records for the specified id and sql
            </summary>
            <param name="id">The id to use</param>
            <param name="connection">The connection to use</param>
            <param name="sql">The sql to use</param>
            <param name="paramName">The parameter name to use</param>
            <returns>The set of records for the query</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord.AddRecord(Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a record to the database
            </summary>
            <param name="record">The record to add</param>
            <param name="connection">The connection</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord.GetAllRecordsForDoc(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads all DOC_MONIKER records based on the doc id provided.
            </summary>
            <param name="docId">The document id</param>
            <param name="connection">The connection</param>
            <returns>The fragment records, sorted in sequence</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord.GetAllRecordsForFrag(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Loads all DOC_MONIKER records based on the fragment id provided.
            </summary>
            <param name="fragmentId">The fragment id</param>
            <param name="connection">The connection</param>
            <returns>The fragment records, sorted in sequence</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord.GetOrCreateLibrary(System.String,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves the id for an existing library, or inserts a new library and returns the id.
            </summary>
            <param name="libraryText">The text for the library</param>
            <param name="connection">The connection</param>
            <returns>The id to use for the library</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Engine">
            <summary>
            Oculus 8 native implementation of a plug-in.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.#ctor">
            <summary>
            Creates a default instance of the object - this is the constructor
            always activated by the engine
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Engine.m_manager">
            <summary>
            Contains all settings and access to most things we need to do
            - created on initialize
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Engine.m_search">
            <summary>
            Handles a search, etc - created on initialize
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.UpdateExistingDocumentFragments(Oculus.Storage.StorageDocument)">
            <summary>
            NOT Supported
            Updates the fragments of a specific document with a new fragment set
            </summary>
            <param name="document">The document to be completely updated</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.UpdateExistingDocumentAppendFragment(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment)">
            <summary>
            NOT Supported
            Inserts a fragment at the end of all the fragments 
            </summary>
            <param name="document">The document to be updated</param>
            /// <param name="fragment">The fragment to be added at the end</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.UpdateExistingDocumentInsertFragmentBefore(Oculus.Storage.StorageDocument,Oculus.Storage.StorageFragment,System.Int32)">
            <summary>
            NOT Supported
            Inserts a fragment at a specified position (before) the next fragment
            e.g if a frag is inserted at position 3, the current fragment 3 will move down to 4 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updated</param>
            <param name="fragment">The fragment to be added</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.UpdateExistingDocumentDeleteFragAtPosition(Oculus.Storage.StorageDocument,System.Int32)">
            <summary>
            NOT Supported
            Deletes a fragment at position x 
            e.g if a frag is deleted at position 3, the current fragment 4 will move up to 3 
            and all subsequent fragments as well
            </summary>
            <param name="document">The document to be updateded</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.AddDocument(Oculus.Storage.StorageDocument,Oculus.Configuration.ProfileContext)">
            <summary>
             Adds a document to the plug-in. Returns a moniker object representing the 
             newly added item. The plug-in should try and use the document and fragment id's, if possible.
            </summary>
            <param name="document">The document to be added</param>
            <param name="profileContext">The context under which the document should be added</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.ChangeDocumentProfile(Oculus.Storage.ItemMoniker,Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
             Changes the profile under which a document is stored to a new profile.
             Returns the moniker representing the item under the new profile.
            </summary>
            <param name="documentMoniker">The document moniker</param>
            <param name="newProfile">The new profile context to use</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.DeleteDocument(Oculus.Storage.ItemMoniker)">
            <summary>
             Removes the document with the specified id from the plug-in.
            </summary>
            <param name="documentMoniker">The moniker of the document to delete.</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.GetDocument(Oculus.Storage.ItemMoniker)">
            <summary>
            Returns a document, including all metadata, available properties, and indexes.  Fragments should
            be attached, but need only contain their names and monikers.
            </summary>
            <param name="documentMoniker">The document to retrieve, this wil automatically be attached to any fragments</param>
            <returns>The storage document object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.GetProfileId(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the profile id for the specified document.
            </summary>
            <param name="documentMoniker">The document in question</param>
            <returns>The profile id for the document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.ReindexDocument(Oculus.Storage.ItemMoniker,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
             Changes the index values under which a document is stored.
            </summary>
            <param name="documentMoniker">The document moniker to reindex</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.UpdateDocumentDescription(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
             Changes the description on the document.
            </summary>
            <param name="documentMoniker">
             the moniker of the document to change.
            </param>
            <param name="newDescription">
             the new description for the document
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.UpdateDocumentName(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
             Changes the name on the document.
            </summary>
            <param name="documentMoniker">
             the moniker of the document to change
            </param>
            <param name="newName">
             the new name for the document
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.UpdateXmlMetadata(Oculus.Storage.ItemMoniker,System.Xml.XmlDocument)">
            <summary>
            Sets the metadata to the document. If no xml exists, it is added.  
            If it does exist, it is updated to the new version of the xml.
            If the value is null, deletes the xml.
            </summary>
            <param name="documentMoniker">the moniker for the document</param>
            <param name="metadataXml">
             The xml data to add as metadata for this document/document version
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.ConsolidatedWrite(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of ALL the fragments in the moniker. Obviously, this can only be 
            done with certain data types. This functionality will generally only be used in situations where
            the content is known ahead of time to be image data. All images within the document should be combined.
            
            The mime type will be used to handle conversions. Natively, we support application/pdf and 
            image/tiff for our 7 and 8 plug-ins. However, you could handle your own types and still call in through
            the main document API.
            </summary>
            <param name="documentMoniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
            <param name="mimeType">The mime type of the resulting document</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.Engine.PluginId">
            <summary>
            Gets the plug-in id after initialization. Each plug-in is required to store their id 
            for subsequent retrievals.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.Initialise(System.Xml.XmlElement,System.String)">
            <summary>
             Passes config information to the plugin at instantiation. This method
             is the first method called after object construction.  Also included is the plug-in
             id - this should be remembered and used by plug-ins to populate fields on documents,
             etc.
            </summary>
            <param name="configXml">
             The xml containing the config information.
            </param>
            <param name="pluginId">
             The id of the plug-in as defined within configuration (i.e. the plug-in name).
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.NotifyOfSystemConfigChange(System.Xml.XmlDocument)">
            <summary>
             Passes all configuration information to the plugin as it exists in the config
             xml.
            </summary>
            <param name="newConfigXml">
             The xml containing the new system-wide config information.
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.GetAuditDetail(Oculus.Storage.ItemMoniker)">
            <summary>
            Retrieves the collection of audit information for the moniker
            </summary>
            <param name="documentMoniker">The moniker of the document</param>
            <returns>The collection of audit information</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.WriteFragmentToStream(Oculus.Storage.ItemMoniker,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
             Provided with the moniker, the plug-in must write the object's data to the specified stream.
            </summary>
            <param name="moniker">The moniker of the data to write</param>
            <param name="outputStream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.GetFragmentDataLength(Oculus.Storage.ItemMoniker)">
            <summary>
             Returns the size of the data represented by the moniker
            </summary>
            <param name="moniker">The moniker of the data to write</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.GetFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Returns a fragment. It must have its DocumentMoniker property set.
            </summary>
            <param name="fragmentMoniker">The fragment to retrieve</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.SetFragmentLocationMoniker(Oculus.Storage.ItemMoniker,Oculus.Storage.ItemMoniker)">
            <summary>
             These methods updates the fragment (file) pointer in the target plug-in for the 
             target fragment to instead point to the archive plug-in.  
             The plug-in will defer retrieval of the physical file to the storage plug-in as specified in 
             the moniker parameter.
            </summary>
            <param name="fragmentMoniker">
             the moniker for the particular fragment being archived
            </param>
            <param name="locationMoniker">
             the moniker that maps to the fragment in the archive system
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.DeleteLocalFragmentData(Oculus.Storage.ItemMoniker)">
            <summary>
            This method may be called after a document is successfully archived and native format(s) of 
            the document fragment no longer needs to be stored. NB this is not to be confused with 
            IDocumentHandler.DeleteFragment, which is meant to delete the entire fragment record from 
            the system.  This call should only remove the local storage of the file associated with the fragment.
            </summary>
            <param name="moniker">
             the moniker for the particular data whose local byte data should be deleted
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.DeleteFragment(Oculus.Storage.ItemMoniker)">
            <summary>
             Removes a fragment from the system.
            </summary>
            <param name="moniker">the moniker to delete</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.Search(Oculus.Searching.SearchCriteria)">
            <summary>
             Performs a search for documents using the xml schema format defined by SearchXmlDocument.xsd.
             
             Please note, this procedure does not return any results, as results are retrieved via FetchResults
            </summary>
            <param name="search">The search criteria.</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.FetchResults(System.Int32)">
            <summary>
             Returns the specified number of records from the search.
            </summary>
            <param name="numRecords">
             The target number of records to retrieve from the search results
            </param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.ReleaseSearch">
            <summary>
             Called when the search is no longer needed and all associated resources with the search may be safely released.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Engine.Dispose">
            <summary>
            Releases resources for the object
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.SqlOperation">
            <summary>
            Helper enumeration for working with virtual profiles
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.SqlOperation.Select">
            <summary>Select SQL statement</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.SqlOperation.Update">
            <summary>Update SQL statement</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.SqlOperation.Delete">
            <summary>Delete SQL statement</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.SqlOperation.Insert">
            <summary>Insert SQL statement</summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.FragmentMonikerType">
            <summary>
            Helper enum for fragment monikers
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.FragmentMonikerType.Online">
            <summary>Indicates an online moniker.</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.FragmentMonikerType.Offline">
            <summary>Indicates an offline moniker. Deprecated</summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.LocalIndexType">
            <summary>
            Unfortunately, these are the values stored in the type field for indexes in the database
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.LocalIndexType.String">
            <summary>Indicates a string index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.LocalIndexType.Numeric">
            <summary>Indicates a numeric index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.LocalIndexType.DateTime">
            <summary>Indicates a date-time index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.LocalIndexType.Date">
            <summary>Indicates a date index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.LocalIndexType.Time">
            <summary>Indicates a time index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.LocalIndexType.Currency">
            <summary>Indicates a currency (decimal) index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.LocalIndexType.Boolean">
            <summary>Indicates a boolean index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.LocalIndexType.List">
            <summary>Indicates a list (text) index</summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.LocalIndexType.Custom">
            <summary>Indicates any other index type</summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Helpers.Config">
            <summary>
            Contains utility methods for interfacing with configuration, namely changing
            our schema based on new configuration.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SQLCE.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.SqlInvalidateIndex">
            <summary>
            Sets index record inactive. 0:false, 1:profile id, 2:index name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.SqlDropView">
            <summary>
            Drop the view. Format 0:view name
            </summary>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.SqlCreateView">
            <summary>
            Create the view. Format 0:view name, 1:base table
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.AddProfileEntry(System.Guid,System.String)">
            <summary>
            Adds the profile entry to the profiles table
            </summary>
            <param name="profileId">The id</param>
            <param name="profileName">the name</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.UpdateProfileEntry(System.Guid,System.String)">
            <summary>
            Updates the existing profile entry in the profiles table
            </summary>
            <param name="profileId">The id</param>
            <param name="profileName">the name</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.ReCreateProfileView(System.Guid,System.String,System.String)">
            <summary>
            Drops and creates the view on the profile, but only if the new name is different from the
            new name.
            </summary>
            <param name="profileId">The profile id</param>
            <param name="oldProfileName">The old name of the profile, string.empty if no old name</param>
            <param name="newProfileName">The new name of the profile (may be the same)</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.CreateProfileView(System.Guid,System.String,System.Boolean)">
            <summary>
            Create the profile view
            </summary>
            <param name="profileId">The id</param>
            <param name="profileName">The name for the view</param>
            <param name="useSeparateConnection">If we need to use a separate connection to do the drop</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.DropProfileView(System.String,System.Boolean)">
            <summary>
            Drops the profile view from the system
            </summary>
            <param name="oldProfileName">The old profile name</param>
            <param name="useSeparateConnection">If we need to use a separate connection to do the drop</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.ExpansionRequired(Oculus.Data.Schema.Column,Oculus.Data.Schema.Column)">
            <summary>
            Determines if the base column needs to be expanded to accommodate the new column
            </summary>
            <param name="baseColumn">the current column</param>
            <param name="newColumn">the column to compare to</param>
            <returns>True if expansion is necessary, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.ModifyExistingProfileTable(System.Guid,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Modifies an existing profile table for the particular profile
            </summary>
            <param name="profileId">The id of the profile</param>
            <param name="profileNode">The node for the profile</param>
            <param name="doTableUpdates">True if we need to do schema changes, false if not (e.g. false for virtual profiles)</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.ModifyExistingProfileTableCE(System.String,System.Guid,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Modifies an existing profile table for the particular profile
            </summary>
            <param name="profileId">The id of the profile</param>
            <param name="profileNode">The node for the profile</param>
            <param name="doTableUpdates">True if we need to do schema changes, false if not (e.g. false for virtual profiles)</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.CreateNewProfileTable(System.Guid,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Creates a new profile table for the particular profile
            </summary>
            <param name="profileId">The id of the profile</param>
            <param name="profileNode">The node for the profile</param>
            <param name="doTableUpdates">True if we need to do schema changes, false if not (e.g. false for virtual profiles)</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.CreateNewProfileTableCE(System.String,System.Guid,System.Xml.XmlElement,System.Boolean)">
            <summary>
            Creates a new profile table for the particular profile
            </summary>
            <param name="profileId">The id of the profile</param>
            <param name="profileNode">The node for the profile</param>
            <param name="doTableUpdates">True if we need to do schema changes, false if not (e.g. false for virtual profiles)</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.ToIndexRecord(System.Guid,Oculus.Data.Schema.Column)">
            <summary>
            Creates an index record object based on the column data
            </summary>
            <param name="profileId">The profile id</param>
            <param name="column">The column</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.UpdateIndexTable(System.Guid,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Data.Schema.Collections.ColumnDictionary,Oculus.Plugins.Oculus10SQLCE.Collections.LocalIndexTypeDictionary)">
            <summary>
            Updates the INDEX table entries for each profile
            </summary>
            <param name="profileId">The profile id</param>
            <param name="indexesToAdd">The indexes to add</param>
            <param name="indexesToModify">The indexes to modify</param>
            <param name="indexesToInactivate">The indexes to inactivate (have been removed)</param>
            <param name="indexTypes">A dictionary of index types which links the column names to a data type</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.GetCurrentProfiles">
            <summary>
            Returns an id-indexed list of the profiles currently in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Config.NotifyOfNewConfiguration(System.Xml.XmlDocument)">
            <summary>
            Obtains a new copy of configuration
            </summary>
            <param name="newConfigXml">The new configuration</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Helpers.Document">
            <summary>
            Contains utility methods for interfacing with Documents.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SQLCE.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="F:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.SqlInsertVersion">
            <summary>
            1:ID, 2:DOCUMENT_ID, 3:VERSION, 4:CREATED, 5:CREATED_BY, 6:STATUS, 7:SECURED
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.GetDocument(System.Guid)">
            <summary>
            Retrieves an engine document based on the id
            </summary>
            <param name="docId">The id of the document to retrieve</param>
            <returns>The document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.GetProfileId(System.Guid)">
            <summary>
            Retrieves the document profile based on the id
            </summary>
            <param name="docId">The id of the document to retrieve</param>
            <returns>The profile id</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.GetNewestVersionId(System.Guid)">
            <summary>
            Retrieves the newest version id for the document (generally only one)
            </summary>
            <param name="docId">The id of the document</param>
            <returns>The active version id</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.DocumentExists(System.Guid)">
            <summary>
            Returns true if the document exists in the system, false if not. This is a cached operation
            for the lifetime of the object.
            </summary>
            <param name="docId">The document id</param>
            <returns>True if we've got it, false if not</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.VerifyDocumentExists(System.Guid)">
            <summary>
            Throws an exception if the document doesn't exist. This is a cached operation.
            </summary>
            <param name="docId">The document id</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.ChangeProfile(System.Guid,System.Guid,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Reprofiles the document specified
            </summary>
            <param name="docId">The id of our document</param>
            <param name="profileId">The new profile id</param>
            <param name="newIndexes">The new indexes</param>
            <returns>The new moniker for the item</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.UpdateDescription(System.Guid,System.String)">
            <summary>
            Updates the document description for the id - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="newDescription">The new description to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.AddDocument(Oculus.Storage.StorageDocument,Oculus.Configuration.ProfileContext)">
            <summary>
            Adds a document to the system
            </summary>
            <param name="document">The document to add</param>
            <param name="profileContext">The profile context to use</param>
            <returns>The id of the document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.AddDocumentVersion(System.Guid,System.Guid,System.Int32)">
            <summary>
            Adds a version record for the specified document - does not check if it exists
            </summary>
            <param name="docId">The doc id</param>
            <param name="versionId">The id for the new version</param>
            <param name="versionNumber">The number for the new version</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.UpdateName(System.Guid,System.String)">
            <summary>
            Updates the document name for the id - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="newName">The new name to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.Reindex(System.Guid,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Applies a new set of indexes to a document
            </summary>
            <param name="docId">The id of our document</param>
            <param name="indexes">The new index values</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.Delete(System.Guid)">
            <summary>
            Deletes the specified document from the archive. HEAP of commands
            </summary>
            <param name="docId">The id of our document</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.DeleteXmlMetadata(System.Guid)">
            <summary>
            Deletes the xml metadata for the specified document - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Document.SetXmlMetadata(System.Guid,System.Xml.XmlDocument)">
            <summary>
            Sets the xml associated with a document - does not check if it exists
            </summary>
            <param name="docId">The id of our document</param>
            <param name="xml">The xml for the metadata</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment">
            <summary>
            Contains utility methods for interfacing with Document Fragments
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.#ctor(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Plugins.Oculus10SQLCE.PluginManager)">
            <summary>
            Initialize the object against a connection - this implies transactions
            will be used.
            </summary>
            <param name="connection">The connection to use</param>
            <param name="manager">The manager to use</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.ApplyMoniker(Oculus.Storage.StorageFragment,Oculus.Plugins.Oculus10SQLCE.Data.MonikerRecord)">
            <summary>
            Adds the moniker to the fragment
            </summary>
            <param name="fragment">The fragment</param>
            <param name="monikerRecord">The moniker</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.GetBasicFragmentFromRecord(System.Guid)">
            <summary>
            Retrieves a basic fragment from the default record. All that remains is to populate
            the online/offline monikers and document moniker
            </summary>
            <param name="fragmentId">The fragment id</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.GetBasicFragmentFromRecord(Oculus.Plugins.Oculus10SQLCE.Data.FragRecord)">
            <summary>
            Retrieves a basic fragment from the default record. All that remains is to populate
            the data moniker and document moniker
            </summary>
            <param name="record">The base record</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.WriteStreamToFile(Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Writes the contents of the oculus stream to the specified location
            </summary>
            <param name="stream">The stream (will not be closed)</param>
            <param name="path">The path to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.WriteConsolidated(System.Guid,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Writes the consolidated content of the entire fragment to the output stream
            </summary>
            <param name="documentId">The id of our DOCUMENT</param>
            <param name="stream">The stream to write to</param>
            <param name="mimeType">The target mime type, default is tiff</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.WriteFragmentData(System.Guid,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the simple content of the specified fragment to the output stream
            </summary>
            <param name="fragmentId">The id of our fragment</param>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.WriteFileToStream(System.String,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the simple content of the specified file to the output stream
            </summary>
            <param name="fragFilePath">The path of our fragment</param>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.FragmentExists(System.Guid)">
            <summary>
            Checks to see if the fragment with the specifid id exists. This is a cached operation.
            </summary>
            <param name="fragmentId">The id of the fragment to check</param>
            <returns>True if it exists, false if not</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.VerifyFragmentExists(System.Guid)">
            <summary>
            Ensures the fragment exists in the archive. Throws an exception if it does not.
            This is a cached operation
            </summary>
            <param name="fragmentId">The id of the fragment to verify</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.GetMaxSequenceNumber(System.Guid)">
            <summary>
            Retrieves the max sequence number for a specific version
            </summary>
            <param name="versionId">The id of the version</param>
            <returns>The highest sequence number in a version</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.GetDocumentIdForFragment(System.Guid)">
            <summary>
            Retrieves the document id for the specified fragment
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <returns>The id of the owner document</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.GetDocumentFragment(System.Guid)">
            <summary>
            Retrieves an engine fragment for the specified id
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <returns>The fragment object</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.GetDocumentFragments(System.Guid)">
            <summary>
            Retrieves all fragment records for a specific document.
            </summary>
            <param name="docId">The document id</param>
            <returns>The list of fragments, consolidated as necessary</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.GetFragmentPath(System.Guid)">
            <summary>
            Retrieves the path for a specific fragment
            </summary>
            <param name="fragmentId">The fragment id</param>
            <returns>The path</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.GetDocumentFragmentPaths(System.Guid)">
            <summary>
            Retrieves the paths for all fragments of a document
            </summary>
            <param name="docId">The doc id</param>
            <returns>The list of ids</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.Append(System.Guid,Oculus.Storage.StorageFragment)">
            <summary>
            Appends the fragment to the specified document
            </summary>
            <param name="docId">The id of our document</param>
            <param name="fragment">The fragment to append</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.Append(System.Guid,Oculus.Storage.StorageFragment,System.Int32)">
            <summary>
            Appends the fragment to the specified document version
            </summary>
            <param name="versionId">The version id to append to</param>
            <param name="fragment">The fragment to append</param>
            <param name="sequenceNo">The sequence number to use - should be last in list - does not check!</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.Delete(System.Guid)">
            <summary>
            Deletes the fragment with the specified id
            </summary>
            <param name="fragmentId">The id of the fragment to delete</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.GetLength(System.Guid)">
            <summary>
            Gets the length of a particular fragment.
            </summary>
            <param name="fragmentId">The id of the fragment we're interested in</param>
            <returns>The fragment length</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.GetLocalByteLength(System.Guid)">
            <summary>
            Retrieves the byte length of a particular fragment
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <returns>The number of bytes in the local data</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.GetLocalByteLength(System.String)">
            <summary>
            Retrieves the byte length of a particular fragment file.
            </summary>
            <param name="fragmentPath">The path of the fragment</param>
            <returns>The number of bytes in the local data</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.Write(System.Guid,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the fragment data to the specified stream.
            </summary>
            <param name="fragmentId">The id of our fragment</param>
            <param name="stream">The stream to write to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.DeleteLocalData(System.Guid)">
            <summary>
            Removes the physical file for a fragment.
            </summary>
            <param name="fragmentId">The id of our fragment</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.SetMoniker(System.Guid,Oculus.Storage.ItemMoniker)">
            <summary>
            Sets the online moniker for a fragment
            </summary>
            <param name="fragmentId">The id of our fragment</param>
            <param name="moniker">The moniker</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.DocumentFragment.ConsolidatedWrite(System.Guid,Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of the specified document
            </summary>
            <param name="documentId">The document id</param>
            <param name="stream">The stream to write to</param>
            <param name="mimeType">The target mime type</param>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Helpers.Util">
            <summary>
            Contains utility methods
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Util.GetId(System.String)">
            <summary>
            Retrieves a guid id from the string
            </summary>
            <param name="id">The id</param>
            <returns>The guid</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Util.IsImageType(System.String)">
            <summary>
            Determines if the mime type is an image
            </summary>
            <param name="mimeType">The mime type</param>
            <returns>True if it's tiff, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Helpers.Util.GetDbTypeForIndexType(Oculus.Plugins.Oculus10SQLCE.LocalIndexType)">
            <summary>
            Gets a db type for the specified index type
            </summary>
            <param name="iType">The index type</param>
            <returns>The db type</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.PluginManager">
            <summary>
            This class contains the plug-in settings information, as loaded by the engine.
            This class is the only class that deals with reading the XML configuration
            provided by the plug-in.
            
            Please note that the settings component is valid for the lifetime of the plug-in.
            All database requests should go through this component, as well as any transaction
            processing.
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.PluginManager.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Initialize the settings object with the xml node received from the engine
            </summary>
            <param name="config">The config</param>
            <param name="pluginId">The unique plug-in id</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.PluginManager.PluginId">
            <summary>Gets the plug-in id</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.PluginManager.StoreFolder">
            <summary>Gets the plug-in id</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.PluginManager.Server">
            <summary>Gets the server</summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.PluginManager.LoadVirtualProfiles(System.Xml.XmlNode)">
            <summary>
            Reads through the plug-in configuration and creates virtual profile nodes
            for each virtual profile encountered
            </summary>
            <param name="config">The configuration node</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.PluginManager.GetVirtualProfileId(System.Guid)">
            <summary>
            Fetch the id to use in the virtual profile list
            </summary>
            <param name="profileId">The profileId</param>
            <returns>The id to use</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.PluginManager.GetVirtualProfileId(System.String)">
            <summary>
            Fetch the id to use in the virtual profile list
            </summary>
            <param name="name">The name of the profile</param>
            <returns>The id to use</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.PluginManager.NewConnection">
            <summary>
            For operations which are atomic and need not be transactioned, we can
            use this method to get access to a connection which will be used
            for the duration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.PluginManager.GetTableName(System.Guid,Oculus.Plugins.Oculus10SQLCE.SqlOperation)">
            <summary>
            Retrieves the profile's table name for the specified operation
            </summary>
            <param name="profileId">The profile id</param>
            <param name="op">The operation to be performed</param>
            <returns>The table to use</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.PluginManager.GetIndexesForProfile(System.Guid)">
            <summary>
            Fetches the list of indexes for the profile - this is a cached operation
            </summary>
            <param name="profileId">The profile id</param>
            <returns>The list of indexes</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.PluginManager.GetFragmentPath(System.Guid,System.String)">
            <summary>
            Returns the full path to the fragment on the file system.
            </summary>
            <param name="fragmentId">The id of the fragment</param>
            <param name="fragmentName">The fragment name</param>
            <returns>The system path to the file</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.PluginManager.GetDocumentMoniker(System.Guid)">
            <summary>
            Generates an item moniker for the document
            </summary>
            <param name="docId">The id for the document</param>
            <returns>The moniker</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.PluginManager.GetFragmentMoniker(System.Guid)">
            <summary>
            Generates an item moniker for the fragment
            </summary>
            <param name="fragmentId">The id for the fragment</param>
            <returns>The moniker</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.PluginManager.IsVirtualProfile(System.Guid)">
            <summary>
            Determines if the profile is virtual or not.
            </summary>
            <param name="profileId">The id of the profile in question</param>
            <returns>True if it's a virtual profile, false otherwise</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.PluginManager.NewAuditHelper(Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Creates a new instance of the audit helper and also ensures the audit tables have 
            been created
            </summary>
            <param name="connection">The connection to use</param>
            <returns>The helper</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.Search">
            <summary>
            This contains settings for a virtual profile
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Search.#ctor(Oculus.Searching.SearchCriteria,Oculus.Plugins.Oculus10SQLCE.PluginManager)">
            <summary>
            Create a new search
            </summary>
            <param name="searchCriteria">The search</param>
            <param name="manager">The manager</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Search.RunSearch(Oculus.Searching.SearchCriteria)">
            <summary>
            Runs the specified search
            </summary>
            <param name="searchCriteria">the search criteria</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Search.FetchResults(System.Int32)">
            <summary>
            Retrieves the specified number of results of the specific search
            </summary>
            <param name="numResults">The number of results to fetch</param>
            <returns>The results in the standard format</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.Search.Dispose">
            <summary>
            Releases any resources for the object
            </summary>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator">
            <summary>
            This class contains an implementation of the ISearchSqlGenerator interface and is responsible
            for generating the SQL used in search operations.
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator.IndexesToRetrieve">
            <summary>
            Get the set of indexes we need to retrieve
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator.Parameters">
            <summary>
            Get the set of parameters we're going to be using
            </summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator.Indexes">
            <summary>
            Get the set of indexes we're going to be using
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator.Initialize(Oculus.Searching.SearchCriteria)">
            <summary>
            Initialize the generator with the specified search criteria. Called before any other
            methods.
            </summary>
            <param name="searchCriteria">The criteria we'll be generating sql against</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator.GetSortFieldReference(System.String)">
            <summary>
            For the specified field, return the column reference (e.g. Table1.FieldX)
            </summary>
            <param name="fieldName">
            The field to sort against, doc qualifiers will be of the form [NAME] in brackets, otherwise it will be an index name
            </param>
            <returns>The column reference to sort against, or null if it should be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator.AddStandardColumns(Oculus.Util.Collections.StringList)">
            <summary>
            Add any standard columns to retrieve, these will be included in the list of columns
            we select
            </summary>
            <param name="columns">The list of columns to add to</param>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator.GetIndexColumnReference(System.String)">
            <summary>
            Get the fully qualified column reference for the specified index.
            </summary>
            <param name="indexName">The name of the index we're going to retrieve</param>
            <returns>The column reference, or null if it should be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator.GetSelectTables">
            <summary>
            Gets the COMPLETE set of tables we're going to be selecting against. Include any aliases.
            </summary>
            <returns>The list of tables to select from</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator.GetDefaultWhereClause">
            <summary>
            Gets any default where clause. DO NOT include the WHERE keyword.
            </summary>
            <returns>The default where clause, or null if there is none</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator.GetColumnReference(System.String)">
            <summary>
            Get the fully qualified column reference for the field. Can be index or document field.
            </summary>
            <param name="fieldName">The field name</param>
            <returns>The column name. If null is returned, this field will be ignored</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator.GetParameterName(Oculus.Searching.SearchCriteriaItem)">
            <summary>
            Get the parameter name for the field. Can be index or document field.
            </summary>
            <param name="item">The criteria item</param>
            <returns>The parameter name. Cannot be null, as GetColumnReference will be called first</returns>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.SearchSqlGenerator.GetArchiveWhereClause(Oculus.Searching.ArchiveState)">
            <summary>
            Gets the relevant where clause for the archive state
            </summary>
            <param name="archiveState">The state requested, will never be "Any"</param>
            <returns>The where clause to use</returns>
        </member>
        <member name="T:Oculus.Plugins.Oculus10SQLCE.VirtualProfile">
            <summary>
            This contains settings for a virtual profile
            </summary>
        </member>
        <member name="M:Oculus.Plugins.Oculus10SQLCE.VirtualProfile.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name">The name of the profile</param>
            <param name="selectTable">The select table</param>
            <param name="insertTable">The insert table</param>
            <param name="updateTable">The update table</param>
            <param name="deleteTable">The delete table</param>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.VirtualProfile.Name">
            <summary>Get/Set the name of the profile associated with this virtual profile</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.VirtualProfile.DeleteTable">
            <summary>Get/Set the table used to delete</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.VirtualProfile.InsertTable">
            <summary>Get/Set the table used to insert</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.VirtualProfile.SelectTable">
            <summary>Get/Set the table used to select</summary>
        </member>
        <member name="P:Oculus.Plugins.Oculus10SQLCE.VirtualProfile.UpdateTable">
            <summary>Get/Set the table used to update</summary>
        </member>
        <member name="T:Oculus.Services.Interfaces.ILogListener">
            <summary>
            Used in communicating logs through the system.
            </summary>
        </member>
        <member name="M:Oculus.Services.Interfaces.ILogListener.NotifyLog(System.String,System.String,Oculus.Services.LogLevel,System.Exception)">
            <summary>
            Called whenever a log request is receieved
            </summary>
            <param name="source">The source</param>
            <param name="message">The message</param>
            <param name="logLevel">The log level</param>
            <param name="ex">The exception, may be null</param>
        </member>
        <member name="T:Oculus.Services.Interfaces.IService">
            <summary>
            This interface denotes a component as being able to be hosted as an Oculus Service.
            Oculus services will be loaded from configuration and hosted within the primary
            workflow service. For more info, see the WorkflowServiceHost class.
            
            Each service call should be regarded as blocking calls to all other services. It is
            advisable therefore to perform any time-consuming operations in a separate thread to
            the one servicing these calls.
            
            Please note, all Oculus Services should inherit from MarshallByRefObject and not support
            Serialization.
            </summary>
        </member>
        <member name="M:Oculus.Services.Interfaces.IService.Start(System.Xml.XmlElement)">
            <summary>
            Starts the particular workflow service.
            </summary>
            <param name="config">The configuration for the item as specified in the primary configuration file</param>
        </member>
        <member name="M:Oculus.Services.Interfaces.IService.Stop">
            <summary>
            Stops the workflow service
            </summary>
        </member>
        <member name="T:Oculus.Services.Interfaces.IWorker">
            <summary>
            Basic interface for unifying worker components.
            </summary>
        </member>
        <member name="M:Oculus.Services.Interfaces.IWorker.Run">
            <summary>
            Runs the worker logic
            </summary>
        </member>
        <member name="M:Oculus.Services.Interfaces.IWorker.NotifyStop">
            <summary>
            Indicates (asynchronously) that the run loop should terminate as soon as is convenient.
            </summary>
        </member>
        <member name="T:Oculus.Services.Logging">
            <summary>
            Used for submitting logs throughout the system. Use a remote instance to hook into logging
            from an external application.
            </summary>
        </member>
        <member name="M:Oculus.Services.Logging.InvokeListeners(System.String,System.String,Oculus.Services.LogLevel,System.Exception)">
            <summary>
            Calls all the listeners, removes them if they raise an exception
            </summary>
            <param name="source">The source</param>
            <param name="message">The message</param>
            <param name="logLevel">The log level</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Oculus.Services.Logging.Write(System.String,System.String,System.Exception,Oculus.Services.LogLevel)">
            <summary>
            Submit a log to the system
            </summary>
            <param name="source">The source</param>
            <param name="message">The message</param>
            <param name="logLevel">The log level</param>
            <param name="exception">The exception</param>
        </member>
        <member name="M:Oculus.Services.Logging.AddLogListener(Oculus.Services.Interfaces.ILogListener)">
            <summary>
            Add a listener to the running set of logs
            </summary>
            <param name="listener">The listener to add</param>
        </member>
        <member name="M:Oculus.Services.Logging.RemoveLogListener(Oculus.Services.Interfaces.ILogListener)">
            <summary>
            Removes the specified logging listener
            </summary>
            <param name="listener">The listener to remove</param>
        </member>
        <member name="M:Oculus.Services.Logging.AddListener(Oculus.Services.Interfaces.ILogListener)">
            <summary>
            Add a listener to the running set of logs
            </summary>
            <param name="listener">The listener to add</param>
        </member>
        <member name="M:Oculus.Services.Logging.RemoveListener(Oculus.Services.Interfaces.ILogListener)">
            <summary>
            Removes the specified logging listener
            </summary>
            <param name="listener">The listener to remove</param>
        </member>
        <member name="T:Oculus.Services.Remoting.BaseCustomSink">
            <summary>
            Helper class which can be used for both server and client sinks.
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.BaseCustomSink.#ctor">
            <summary>
            Create a default instance of the object
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.BaseCustomSink.SetNextSink(System.Object)">
            <summary>
            Called by the provider to set the next sink
            </summary>
            <param name="nextSink">The next sink in the chain</param>
        </member>
        <member name="P:Oculus.Services.Remoting.BaseCustomSink.PerProviderState">
            <summary>
            Sets the provider state for the channel sink
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.BaseCustomSink.ProcessRequest(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream@,System.Object@)">
            <summary>
            Processs a message request.
            </summary>
            <param name="message">The message object</param>
            <param name="headers">The headers</param>
            <param name="stream">The stream</param>
            <param name="state">The state</param>
        </member>
        <member name="M:Oculus.Services.Remoting.BaseCustomSink.ProcessResponse(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream@,System.Object)">
            <summary>
            Processes a message response.
            </summary>
            <param name="message">The message object</param>
            <param name="headers">The headers</param>
            <param name="stream">The stream</param>
            <param name="state">The state</param>
        </member>
        <member name="T:Oculus.Services.Remoting.ClientFormatterSink">
            <summary>
            Standard client formatter sink for Oculus
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.ClientFormatterSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink)">
            <summary>
            
            </summary>
            <param name="nextSink"></param>
        </member>
        <member name="M:Oculus.Services.Remoting.ClientFormatterSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="replySink"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Services.Remoting.ClientFormatterSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="sinkStack"></param>
            <param name="msg"></param>
            <param name="headers"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Oculus.Services.Remoting.ClientFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="sinkStack"></param>
            <param name="state"></param>
            <param name="headers"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Oculus.Services.Remoting.ClientFormatterSink.GetRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Services.Remoting.ClientFormatterSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="requestHeaders"></param>
            <param name="requestStream"></param>
            <param name="responseHeaders"></param>
            <param name="responseStream"></param>
        </member>
        <member name="P:Oculus.Services.Remoting.ClientFormatterSink.NextChannelSink">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.ClientFormatterSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="P:Oculus.Services.Remoting.ClientFormatterSink.NextSink">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oculus.Services.Remoting.ClientFormatterSinkProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.ClientFormatterSinkProvider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.ClientFormatterSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <param name="providerData"></param>
        </member>
        <member name="M:Oculus.Services.Remoting.ClientFormatterSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="url"></param>
            <param name="remoteChannelData"></param>
            <returns></returns>
        </member>
        <member name="P:Oculus.Services.Remoting.ClientFormatterSinkProvider.Next">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oculus.Services.Remoting.Constants">
            <summary>
            This is a utility class which contains constants declared against the system.
            </summary>
        </member>
        <member name="F:Oculus.Services.Remoting.Constants.DefaultServer">
            <summary>
            Used by configuration, the default remote server to connect to for remote config calls.
            </summary>
        </member>
        <member name="F:Oculus.Services.Remoting.Constants.DefaultHttpPort">
            <summary>
            Used by the service host, the default http port to connect to for remoting calls.
            </summary>
        </member>
        <member name="T:Oculus.Services.Remoting.ServerFormatterSinkProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.ServerFormatterSinkProvider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.ServerFormatterSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            
            </summary>
            <param name="properties"></param>
            <param name="providerData"></param>
        </member>
        <member name="M:Oculus.Services.Remoting.ServerFormatterSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="P:Oculus.Services.Remoting.ServerFormatterSinkProvider.Next">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.ServerFormatterSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
            <summary>
            
            </summary>
            <param name="channelData"></param>
        </member>
        <member name="T:Oculus.Services.Remoting.ServerFormatterSink">
            <summary>
            Used as the formatter sink on the server
            component. 
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.ServerFormatterSink.#ctor(System.Runtime.Remoting.Channels.IServerChannelSink,System.Runtime.Remoting.Channels.IChannelReceiver)">
            <summary>
            
            </summary>
            <param name="nextSink"></param>
            <param name="receiver"></param>
        </member>
        <member name="M:Oculus.Services.Remoting.ServerFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="sinkStack"></param>
            <param name="state"></param>
            <param name="msg"></param>
            <param name="headers"></param>
            <param name="stream"></param>
        </member>
        <member name="M:Oculus.Services.Remoting.ServerFormatterSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary>
            
            </summary>
            <param name="sinkStack"></param>
            <param name="state"></param>
            <param name="msg"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Services.Remoting.ServerFormatterSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            
            </summary>
            <param name="sinkStack"></param>
            <param name="requestMsg"></param>
            <param name="requestHeaders"></param>
            <param name="requestStream"></param>
            <param name="responseMsg"></param>
            <param name="responseHeaders"></param>
            <param name="responseStream"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Services.Remoting.ServerFormatterSink.SerializeResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary>
            
            </summary>
            <param name="sinkStack"></param>
            <param name="msg"></param>
            <param name="headers"></param>
            <param name="stream"></param>
        </member>
        <member name="P:Oculus.Services.Remoting.ServerFormatterSink.NextChannelSink">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oculus.Services.Remoting.SecureClientChannelSink">
            <summary>
            This is a custom sink implementation which can only be used AFTER a formatter sink. Its purpose
            is to attach the Oculus principal from the request to the current thread context.
            component. 
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.SecureClientChannelSink.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.SecureClientChannelSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink)">
            <summary>
            Creates an instance of the object using the default parameters, linked
            to the next sink in the chain.
            </summary>
            <param name="next">The next sink to invoke.</param>
        </member>
        <member name="M:Oculus.Services.Remoting.SecureClientChannelSink.ProcessRequest(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream@,System.Object@)">
            <summary>
            Attaches the oculus principal to the outgoing message
            </summary>
            <param name="message">The message being sent</param>
            <param name="headers">null</param>
            <param name="stream">null</param>
            <param name="state">ignored</param>
        </member>
        <member name="T:Oculus.Services.Remoting.SecureClientChannelSinkProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.SecureClientChannelSinkProvider.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.SecureClientChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Create the sink with the given info
            </summary>
            <param name="properties"></param>
            <param name="providerData"></param>
        </member>
        <member name="P:Oculus.Services.Remoting.SecureClientChannelSinkProvider.Next">
            <summary>
            Get or set the next provider in the chain
            </summary>
        </member>
        <member name="T:Oculus.Services.Remoting.SecureServerChannelSink">
            <summary>
            This is a custom sink implementation which can only be used AFTER a formatter sink. Its purpose
            is to attach the Oculus principal from the request to the current thread context.
            component. 
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.SecureServerChannelSink.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.SecureServerChannelSink.#ctor(System.Runtime.Remoting.Channels.IServerChannelSink)">
            <summary>
            Creates an instance of the object using the default parameters, linked
            to the next sink in the chain.
            </summary>
            <param name="next">The next sink to invoke.</param>
        </member>
        <member name="T:Oculus.Services.Remoting.SecureServerChannelSinkProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.SecureServerChannelSinkProvider.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.SecureServerChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
            <summary>
            Create the sink with the given info
            </summary>
            <param name="properties"></param>
            <param name="providerData"></param>
        </member>
        <member name="M:Oculus.Services.Remoting.SecureServerChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
            <summary>
            Creates a RedirectChannelSink linked into the next sink.
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Services.Remoting.SecureServerChannelSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
            <summary>
            Required method that does nothing
            </summary>
            <param name="channelData"></param>
        </member>
        <member name="P:Oculus.Services.Remoting.SecureServerChannelSinkProvider.Next">
            <summary>
            Get or set the next provider in the chain
            </summary>
        </member>
        <member name="T:Oculus.Services.Remoting.Utility">
            <summary>
            The sole concern of this class is to find and return config information used in workflow's 
            remoting architecture. It exposes the static properties, HttpPort and TcpPort. These are
            properties which are populated on first access.  There are three options for specifying
            the ports. Please note there is no verification other than the port number must be an integer.
            
            Option 1: app.config appSettings node
            
            The second place we look is at the app settings ("add key" nodes) for the keys
            WflRemotingTcpPort and WflRemotingHttpPort.
            
            
            Option 2: defaults
            
            If all else fails, the system will use the defaults defined in the Constants class.
            </summary>
        </member>
        <member name="F:Oculus.Services.Remoting.Utility.s_httpPort">
            <summary>
            The http port to use for remoting
            </summary>
        </member>
        <member name="F:Oculus.Services.Remoting.Utility.HttpPortKey">
            <summary>
            The key value used in appSettings and registry for the http port
            </summary>
        </member>
        <member name="F:Oculus.Services.Remoting.Utility.s_clientChannelInitialized">
            <summary>
            Flag used to initialize the outgoing channel to include security
            </summary>
        </member>
        <member name="F:Oculus.Services.Remoting.Utility.s_clientChannelSyncObj">
            <summary>
            Object used for locking/synchronization
            </summary>
        </member>
        <member name="F:Oculus.Services.Remoting.Utility.s_isImagingService">
            <summary>
            This will decide whether or not we create remote instances for local requests or not
            </summary>
        </member>
        <member name="F:Oculus.Services.Remoting.Utility.s_defaultRemotingServer">
            <summary>
            Contains the default remoting server value
            </summary>
        </member>
        <member name="F:Oculus.Services.Remoting.Utility.RemoteUrlFormat">
            <summary>
            This is the Url format against which remote instances of this object are registered. Use
            with String.Format to get a useable string. First arg is the protocol (http), 
            second arg is the host name, third is the port number, fourth is the name of the remote object.
            </summary>
        </member>
        <member name="P:Oculus.Services.Remoting.Utility.HttpPort">
            <summary>
            Gets the http port to use for remoting calls
            </summary>
        </member>
        <member name="P:Oculus.Services.Remoting.Utility.DefaultProtocol">
            <summary>
            Gets the default protocol used for remoting.
            </summary>
        </member>
        <member name="P:Oculus.Services.Remoting.Utility.DefaultRemotingServer">
            <summary>
            Set the default remoting server to use, this may only be specified
            once in an application instance.
            </summary>
        </member>
        <member name="P:Oculus.Services.Remoting.Utility.IsImagingService">
            <summary>
            Get/set whether or not the CURRENT APPLICATION is actually the imaging service
            running on the local box. This is an optimization for requests to remote objects
            on the local machine, as items within the imaging service do not require a remote
            instance to work properly
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.Utility.DeriveHttpPort">
            <summary>
            Finds and sets the http port value
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.Utility.DerivePortAppConfig(System.String)">
            <summary>
            Attempts to load up the http port from the app.config appSettings node.
            </summary>
            <param name="key">The key to look for in app.config</param>
            <returns>the value, if it worked, -1 if not</returns>
        </member>
        <member name="M:Oculus.Services.Remoting.Utility.VerifyClientChannel">
            <summary>
            Ensures the client remoting channel includes the oculus security information
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.Utility.IsLocalServer(System.String)">
            <summary>
            Determines if the specified server is the local machine
            </summary>
            <param name="server">The server name</param>
            <returns>True if it is the local machine, false otherwise</returns>
        </member>
        <member name="M:Oculus.Services.Remoting.Utility.IsCustomServiceUri(System.String)">
            <summary>
            Determines if the remoting uri is formatted as a custom service Uri
            </summary>
            <param name="uri">The uri</param>
            <returns>True if it is a CSURI, false if not</returns>
        </member>
        <member name="M:Oculus.Services.Remoting.Utility.GetTypeFromCustomServiceUri(System.String)">
            <summary>
            If the type is a custom service uri, the type will be loaded and returned.
            Otherwise, will return null. Will raise an error if the type cannot be loaded.
            </summary>
            <param name="uri">The uri</param>
            <returns>Tye type for the uri, or null if it is not a custom service uri</returns>
        </member>
        <member name="M:Oculus.Services.Remoting.Utility.GetRemoteObject``1">
            <summary>
            Creates a dynamic single-call object on the default server of the specified type. Please note only Oculus types
            may be created via this method. This will create a remote object provided we aren't the oculus service,
            in which case a local object will be created. 
            </summary>
            <typeparam name="T">The type of the remote object</typeparam>
            <returns>The remote instance of the object</returns>
        </member>
        <member name="M:Oculus.Services.Remoting.Utility.GetRemoteObject``1(System.String)">
            <summary>
            Creates a dynamic single-call object on the specified server of the specified type. Please note only Oculus types
            may be created via this method. This will create a remote object provided we aren't the oculus service,
            in which case a local object will be created. 
            </summary>
            <typeparam name="T">The type of the remote object</typeparam>
            <returns>The remote instance of the object</returns>
        </member>
        <member name="M:Oculus.Services.Remoting.Utility.DisableCustomErrors">
            <summary>
            This method turns OFF custom errors on remoting configuration, which (counter-intuitively) allows 
            exceptions to pass over remoting boundaries as-is.  This means any exception which is raise must
            be serializable, including its member data, etc.  This method consumes any RemotingException objects
            which may be raised.
            </summary>
        </member>
        <member name="M:Oculus.Services.Remoting.Utility.GetSerializableException(System.Exception)">
            <summary>
            Ensures the specified exception is serializable and can travel across remoting boundaries
            </summary>
            <param name="ex">The exception to verify</param>
            <returns>
            The exception if it is serializable, else an OculusException which wraps the exception. 
            If the value is null, null is returned
            </returns>
        </member>
        <member name="T:Oculus.Services.ServiceEntry">
            <summary>
            This class represents an entry within configuration for a workflow service to be loaded by
            the workflow service host. It contains logic for loading and verifying service classes and
            instantiating types.
            </summary>
        </member>
        <member name="M:Oculus.Services.ServiceEntry.#ctor(System.String,System.Xml.XmlElement)">
            <summary>
            Intializes a workflow service entry with the specified classname and
            configuration xml. In this constructor, the type is loaded and ensured
            to implement the correct interfaces. If there is a problem, an ArgumentException
            is thrown with an appropriate message.
            </summary>
            <param name="fullyQualifiedName">
            The fullly qualified name for the service, of the form 
            "{Namespace.ClassName}, {AssemblyName}, {Version}, {CultureInfo}, {PublicKey}". Cannot be null.
            </param>
            <param name="configXml">
            The configuration xml for the service. May be null. If not null, the value is cloned and stored.
            </param>
            <exception cref="T:System.ArgumentException">
              <list type="bullet">
                 <item><description>If fullyQualifiedName is null</description></item>
                 <item><description>If the assembly specified in fullyQualifiedName cannot be loaded</description></item>
                 <item><description>If the class specified in fullyQualifiedName does not implement WflSystem.Interfaces.IOcuService</description></item>
                 <item><description>If the class specified in fullyQualifiedName does not have a public constructor with no parameters</description></item>
              </list>
            </exception>
            <exception cref="T:System.FormatException">If the fullyQualifiedName argument is not formatted properly</exception>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException">If the class type cannot be loaded</exception>
        </member>
        <member name="F:Oculus.Services.ServiceEntry.m_configXml">
            <summary>
            The configuration xml as stored in the app.config file.
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceEntry.m_serviceType">
            <summary>
            The actual type object representing the class name.
            </summary>
        </member>
        <member name="P:Oculus.Services.ServiceEntry.ConfigXml">
            <value>
            Gets the value of the config xml
            </value>
        </member>
        <member name="P:Oculus.Services.ServiceEntry.ServiceType">
            <value>
            Gets the type object representing the service class.
            </value>
        </member>
        <member name="M:Oculus.Services.ServiceEntry.LoadAndVerifyServiceType(System.String)">
            <summary>
            Loads and verifies the class and assembly name currently associated with the service entry.
            Throws exceptions on any failures. This method also verifies that the class conforms to the 
            IService interface and has a public constructor with no arguments.
            </summary>
            <param name="fullyQualifiedName">The fully qualified name for the class and assembly. Cannot be null</param>
        </member>
        <member name="M:Oculus.Services.ServiceEntry.NewInstance">
            <value>
            Gets a new instance of the type associated with the oculus service.
            </value>
        </member>
        <member name="T:Oculus.Services.ServiceHost">
            <summary>
            If any class within the system can be regarded as *the* engine, this is it. This class is designed
            to dynamically load and manage any number of services complying to the IService interface. Each
            service is loaded out of a custom configuration section within the app.config file for the current
            environment.
            
            Please note that each of the primary methods (Start, Pause, etc), are synchronized and will execute
            one at a time.
            
            The application configuration must appear as follows:
            
            <code>
            &lt;configuration>
              &lt;Oculus.Services.ServiceHost>
                &lt;Service ClassName="">
            	    &lt;InitialisationInfo>&lt;/InitialisationInfo>
                &lt;/Service>
              &lt;/Oculus.Services.ServiceHost>
            &lt;/configuration>
            </code>
            
            The service host exposes an http channel for remoting, providing access to remote components on either
            channel. Please note that port configuration is done according to the Remoting.Utility class.
            
            Each service to be loaded and hosted will have a &lt;Service> node which contains the full classname
            of the class implementing the IService interface. The child node under &lt;Service>
            (&lt;InitialisationInfo> above) will be passed into the IService.Start method verbatim and can be
            used to add intialisation parameters to the service.
            
            Services will be started in the order they are listed in configuration.
            </summary>
        </member>
        <member name="M:Oculus.Services.ServiceHost.#ctor">
            <summary>
            Create a new instance of the service host. This method does not load the configuration, that
            is done on a call to Start(). Note that if you use this constructor, configuration defaults to 
            using the application configuration file.
            </summary>
        </member>
        <member name="M:Oculus.Services.ServiceHost.#cctor">
            <summary>
            Automatically initiates missing assembly loading
            </summary>
        </member>
        <member name="M:Oculus.Services.ServiceHost.#ctor(System.Xml.XmlNode)">
            <summary>
            Create a new instance of the service host with the specified configuration. This method does not 
            process the configuration, that is done on a call to Start().
            </summary>
            <param name="configuration">The configuration XML to use to load up the services. May not be null.</param>
            <exception cref="T:System.ArgumentException">If configuration is null</exception>
        </member>
        <member name="F:Oculus.Services.ServiceHost.m_configuration">
            <summary>
            Explicit configuration, if specified
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceHost.m_state">
            <summary>
            Contains the current state of the object.
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceHost.m_services">
            <summary>
            The manager object which handles the hum-drum details of invoking the services.
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceHost.StateErrorMessage">
            <summary>
            Used to raise InvalidOp exceptions wrt state.
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceHost.m_httpChannel">
            <summary>
            The channel used for http remoting
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceHost.m_disposed">
            <summary>
            Helper flag for disposing
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceHost.AppConfigNodeName">
            <summary>
            The name of the node under which all service host configuration is kept.
            </summary>
        </member>
        <member name="P:Oculus.Services.ServiceHost.State">
            <value>
            Gets the current state of the service host
            </value>
        </member>
        <member name="P:Oculus.Services.ServiceHost.StateDescription">
            <value>
            Gets the current state of the service host as a descriptive String
            </value>
        </member>
        <member name="M:Oculus.Services.ServiceHost.InternalPerformOp(Oculus.Services.ServiceOp,Oculus.Services.ServiceHostState,Oculus.Services.ServiceHostState)">
            <summary>
            Performs the operation in a standard fashion under via a thread-safe mechanism.
            </summary>
            <param name="opToPerform">Which operation you want to run</param>
            <param name="requiredState">The state the object should be in currently</param>
            <param name="newState">The new state for the object once the op is complete</param>
            <exception cref="T:System.InvalidOperationException">If the current state does not match the required state</exception>
        </member>
        <member name="M:Oculus.Services.ServiceHost.SubmitBatchOp(Oculus.Services.ServiceOp)">
            <summary>
            Submits the operation to all active service proxies. This is not a threaded operation,
            and the call into each service is done one at a time.
            </summary>
        </member>
        <member name="M:Oculus.Services.ServiceHost.LoadServicesConfig(System.Xml.XmlElement)">
            <summary>
            Loads up the individual workflow services from configuration.
            </summary>
            <param name="svcHostConfigNode">The primary configuration node for the service host</param>
        </member>
        <member name="M:Oculus.Services.ServiceHost.LoadConfiguration">
            <summary>
            Loads up all the services from app.config into the m_services member. This operation requires
            access to the file system.
            </summary>
            <exception cref="T:System.ApplicationException">If the WorkflowServiceHost node is missing.</exception>
        </member>
        <member name="M:Oculus.Services.ServiceHost.StartRemoting">
            <summary>
            Uses the values previously set in InitialiseRemoting and sets up the default remoting channel.
            </summary>
        </member>
        <member name="M:Oculus.Services.ServiceHost.StopRemoting">
            <summary>
            Shuts down the HTTP remoting channel. This method will never throw an exception
            </summary>
        </member>
        <member name="M:Oculus.Services.ServiceHost.SetState(Oculus.Services.ServiceHostState)">
            <summary>
            Sets the current state of the service host.
            </summary>
            <param name="newState">The new state of the object. Cannot be null.</param>
        </member>
        <member name="M:Oculus.Services.ServiceHost.Start">
            <summary>
            Starts all the services present in configuration. This operation is thread-safe.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the current state is anything but Initialised or Stopped.</exception>
        </member>
        <member name="M:Oculus.Services.ServiceHost.Stop">
            <summary>
            Stops all the services present in configuration. This operation is thread-safe.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the current state is anything but Running.</exception>
        </member>
        <member name="M:Oculus.Services.ServiceHost.Dispose(System.Boolean)">
            <summary>
            Cleans up resources
            </summary>
            <param name="disposing">true if we're disposing</param>
        </member>
        <member name="M:Oculus.Services.ServiceHost.Dispose">
            <summary>
            Cleans up resources
            </summary>
        </member>
        <member name="T:Oculus.Services.ServiceHost.InternalService">
            <summary>
            This is a utility class which contains member variables for managing workflow
            services by the service host.
            </summary>
        </member>
        <member name="M:Oculus.Services.ServiceHost.InternalService.#ctor(Oculus.Services.ServiceEntry)">
            <summary>
            Create a new instance of the internal component.
            </summary>
            <param name="wflEntry">The service entry to be used with the object</param>
        </member>
        <member name="F:Oculus.Services.ServiceHost.InternalService.WflEntry">
            <summary>
            The service entry which contains config information.
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceHost.InternalService.Service">
            <summary>
            A remoting proxy object which points to the instance of the service
            running inside the app domain.
            </summary>
        </member>
        <member name="T:Oculus.Services.Configuration">
            <summary>
            Class which contains logic for retrieving configuration values used by this library. All settings
            are only loaded once to help with speed.
            </summary>
        </member>
        <member name="F:Oculus.Services.Configuration.s_connection">
            <summary>
            The connection string.
            </summary>
        </member>
        <member name="F:Oculus.Services.Configuration.StoreFolderAppSettingsKey">
            <summary>
            The key used when retrieving the store folder from app settings
            </summary>
        </member>
        <member name="F:Oculus.Services.Configuration.InstallFolderAppSettingsKey">
            <summary>
            The key used when retrieving the installation folder from app settings
            </summary>
        </member>
        <member name="F:Oculus.Services.Configuration.InstallGroupAppSettingsKey">
            <summary>
            The key used when retrieving the install group from app settings
            </summary>
        </member>
        <member name="F:Oculus.Services.Configuration.HostNameToIdentifyMyselfAppSettingsKey">
            <summary>
            This is used as a cheat when we are "forcing" the application to use a different hostname
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.HostNameToIdentifyMyself">
            <summary>
            Gets/sets the path to the Oculus installation path (can only be accessed within the services)
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.InstallPath">
            <summary>
            Gets/sets the path to the Oculus installation path (can only be accessed within the services)
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.InstallGroup">
            <summary>
            Gets/sets the path to the Oculus installation path (can only be accessed within the services)
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.PrimaryConnection">
            <summary>
            Sets the connection to be used by the components.
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.LogConnection">
            <summary>
            Gets the logging connection string to be used by the components
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.AuditConnection">
            <summary>
            Gets the audit connection string to be used by the components
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.AdminConfigConnection">
            <summary>
            Gets the config (administration) connection string to be used by the components
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.AutoInstallEnabled">
            <summary>
            Gets whether or not auto-installing is turned on. Default is false.
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.PermissionCachingEnabled">
            <summary>
            Gets whether or not caching is turned on for permissions. Default is true.
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.StorePath">
            <summary>
            Gets/sets the path to the Oculus temporary storage root
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.DocXmlStorePath">
            <summary>
            Gets the path to the root of where the document xml files are stored
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.FragXmlStorePath">
            <summary>
            Gets the path to the root of where the fragment xmls are stored
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.ProcsXmlStorePath">
            <summary>
            Gets the path where process xmls are stored
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.FragsDataStorePath">
            <summary>
            Gets the path to the root of where fragment data is stored
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.PackageStorePath">
            <summary>
            Gets the path to the root where package data is stored
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.QueueTimeout">
            <summary>
            Returns the timeout for a queue, in minutes
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.PushQueryCount">
            <summary>
            Returns the number of items that should processed at any particular time when doing a 
            push-type scenario (either for auto oculets, storage, or transfer). This number will be
            the number of locked records, so it shouldn't be too high, but it also increases the
            total number of queries taken to process a set of records, which can also cause a bottleneck.
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.ConfigFilePath">
            <summary>
            Gets the config file path on disk (backup if comms not available, still need store folder defined)
            </summary>
        </member>
        <member name="P:Oculus.Services.Configuration.ConfigPullTimeout">
            <summary>
            Gets the config pull timeout for the machine
            </summary>
        </member>
        <member name="M:Oculus.Services.Configuration.ShouldProcessOutboundTransfers">
            <summary>
            Based on the current configuration, and the current date/time, decides whether or
            not outbound transfers should be happening
            </summary>
            <returns>True if yes, false otherwise</returns>
        </member>
        <member name="T:Oculus.Services.Managers.ConfigManager">
            <summary>
            Handles all the config manager functionality. This can safely be used with remoting.
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.InternalPushConfig(System.Xml.XmlDocument)">
            <summary>
            Pushes a new config to the current machine. Branch config servers will relay the request to all other
            machines in the branch, but on a different thread. This call will simply set up the records to be sent
            out.
            </summary>
            <param name="config">The new configuration</param>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.StoreConfigOnFileSystem(System.Xml.XmlDocument)">
            <summary>
            Saves the config to the file system
            </summary>
            <param name="config">The config to save</param>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.DeployConfig(System.String)">
            <summary>
            Deploys a new configuration to the system. This may only be done on the primary branch's config server.
            </summary>
            <param name="config">The new configuration, cannot be null</param>
            <exception cref="T:System.ApplicationException">If the current machine is not the PBCS in the new config</exception>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.GetConfigHash">
            <summary>
            Returns a hash of the current configuration, this can be used to determine whether or not a cached copy
            of config needs to be updated.
            </summary>
            <returns>The current configuration's hash value</returns>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.GetMachineName">
            <summary>
            Returns the current machine's name (if, for example, you're connecting via IP)
            </summary>
            <returns>The server's network name</returns>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.GetConfig">
            <summary>
            Retrieves the current configuration as an Xml Document.
            </summary>
            <returns>The configuration</returns>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.PushConfig(System.String)">
            <summary>
            Pushes a new config to the current machine. Branch config servers will relay the request to all other
            machines in the branch. This MAY NOT be called on the primary branch, use deploy instead.
            </summary>
            <param name="config">The new configuration, cannot be null</param>
            <exception cref="T:System.ApplicationException">If the current machine is the PBCS</exception>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.GetLocalPackageFilepath(System.Guid)">
            <summary>
            Returns the path to the package file on the local file system, does not verify existence.
            </summary>
            <param name="fileID">the id of the file to look for</param>
            <returns>The full path to the where the file *SHOULD* be</returns>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.GetPackageFileHash(System.Guid)">
            <summary>
            Returns a hash for the particular package to prevent unnecessary copying across the network
            </summary>
            <returns>The file hash</returns>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.GetPackageFile(System.Guid)">
            <summary>
            Returns the byte data for the specified file
            </summary>
            <param name="fileID">The id for the file to retrieve</param>
            <returns>The byte data for the file</returns>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.EnsureAdministratorAndConfigServer">
            <summary>
            Verifies we're logged in as an administrator and that we're setting on 
            the primary configuration server.
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.GetAdminConfiguration">
            <summary>
            Retrieves the xml version of admin configuration
            </summary>
            <returns>The xml as a string</returns>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.SaveAdminConfiguration(System.String)">
            <summary>
            Saves the administrative configuration
            </summary>
            <param name="config">The configuration to save</param>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.Deploy">
            <summary>
            Performs a local deployment of the admin configuration
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.ConfigManager.UploadApplicationFile(System.Guid,System.String,System.Byte[])">
            <summary>
            Uploads the specified file to the application type id's directory. NB it WILL replace a file
            if it has the same name
            </summary>
            <param name="applicationTypeId">The application type id</param>
            <param name="filename">The name for the file, cannot be null</param>
            <param name="fileData">The data for the file, cannot be null</param>
            <returns>The path to the file on disk</returns>
        </member>
        <member name="T:Oculus.Services.Managers.LogManager">
            <summary>
            Submits logs to the log database
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.LogManager.SubmitLog(System.String)">
            <summary>
            Submit a log message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Oculus.Services.Managers.LogManager.SubmitLog(System.String,System.Exception)">
            <summary>
            Submit a log message with an attached exception
            </summary>
            <param name="ex">The exception</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Oculus.Services.Managers.LogManager.GetLogs(System.DateTime,System.DateTime)">
            <summary>
            Retrieve the logs for the specified date range
            </summary>
            <param name="minDate">The minimum date</param>
            <param name="maxDate">The maximum date</param>
            <returns>The set of logs for the time period</returns>
        </member>
        <member name="M:Oculus.Services.Managers.LogManager.AddAuditRecord(System.String)">
            <summary>
            Submits a backwards-compatible audit record (as done in 8) to the 
            auditing subsystem.
            </summary>
            <param name="auditXml">The xml to add, cannot be null</param>
        </member>
        <member name="M:Oculus.Services.Managers.LogManager.GetScanIndexDetail(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Gets scan index detail information
            </summary>
            <param name="machine">The machine, can be null</param>
            <param name="user">The user, can be null</param>
            <param name="fromDate">The from date, can be null</param>
            <param name="toDate">The to date, can be null</param>
            <returns>The result data</returns>
        </member>
        <member name="T:Oculus.Services.Managers.CachedSecurityManager">
            <summary>
            Handles security-related functionality, including caching. All methods can safely be used with remoting.
            
            This is the class all applications should be talking to if they want to take advantage of offline security.
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.#ctor">
            <summary>
            Create a default instance of the manager
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.Login(System.String,System.String,System.Boolean)">
            <summary>
            Performs a login and returns a principal object if successful and raises a login failed exception if not.
            This method needs to be called prior to any access of the Oculus service objects.
            NB: The returned principal must be applied to the Thread.CurrentPrincipal value in order for subsequent
            remoting requests to work properly.
            </summary>
            <param name="username">the username for the login, cannot be null</param>
            <param name="password">the password for the login, cannot be null</param>
            <returns>A logon session, or an empty string.</returns>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.Logout">
            <summary>
            Logs out the currently logged in user. This is a little tricky, as what happens is the call comes
            through remoting with the principal information. Then, it is reconstituted and sent through directly
            to the security server.
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.FetchGrantedObjects(System.String,System.String)">
            <summary>
            Returns a list of granted objects according to type and right for the specified session
            </summary>
            <param name="typeName">The type to fetch, cannot be null</param>
            <param name="rightName">The right needed on the objects, cannot be null</param>
            <returns>A list of object ids</returns>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.FetchGroupBrandImage">
            <summary>
            Retrieves the brand image of the first group the user belongs to. If none, returns the default Oculus image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.FetchClientBrandImage">
            <summary>
            Retrieves the brand image of the first group the user belongs to. If none, returns the default Oculus image
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.FetchGrantedObjectNames(System.String,System.String)">
            <summary>
            Returns a list of granted objects according to type and right for the specified session
            </summary>
            <param name="typeName">The type to fetch, cannot be null</param>
            <param name="rightName">The permission needed on the objects, cannot be null</param>
            <returns>A list of object ids</returns>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.HasAccess(System.Guid,System.String)">
            <summary>
            Retrieves the access grant state between the session owner and the target
            against the specified right.
            </summary>
            <param name="targetID">The object against which the right is set</param>
            <param name="rightName">The right being requested</param>
            <returns>True if the user has access, false if not</returns>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.HasAccess(System.String,System.String,System.String)">
            <summary>
            Retrieves the access grant state between the session owner and the target
            against the specified right. This will check against any item with the name
            within the type
            </summary>
            <param name="objectName">The object name against which the right is set</param>
            <param name="objectType">The type of the object</param>
            <param name="rightName">The right being requested</param>
            <returns>True if the user has access, false if not</returns>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.VerifyLocalSession">
            <summary>
            Verifies the session attached to the current thread. This is a STATIC method
            and does not make a call over remoting.
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.VerifySession">
            <summary>
            Ensures the current session (attached to the CurrentPrincipal object) is valid
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.GetSessionDetail(System.Guid)">
            <summary>
            Retrieves the oculus principal based on the session id. If the session is invalid, returns null.
            </summary>
            <param name="sessionId">The id of the session to retrieve</param>
            <returns>The session, or null if it can't be found</returns>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.BeginAdminMode">
            <summary>
            Initiates admin mode, where all calls to Demand return true. Only accessible to administrators.
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.EndAdminMode">
            <summary>
            Turns off admin mode
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.CachedSecurityManager.Demand(System.Guid,System.String)">
            <summary>
            Helper method to demand permissions from inside a client application. This method
            invokes a local permission manager to verify the permission and throws an exception
            if the current user does not have access.
            </summary>
            <param name="objectId">The object being operated against</param>
            <param name="rightName">The name of the right</param>
            <exception cref="T:Oculus.Security.SecurityException">If the user does not have the required permission</exception>
        </member>
        <member name="T:Oculus.Services.Managers.AcquisitionManager">
            <summary>
            Handles all the process manager functionality. This can safely be used with remoting.
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.AcquisitionManager.LaunchDocument(System.Xml.XmlDocument)">
            <summary>
            Initiates a transactioned launch for a document against a predefined process in 
            the specified document xml. 
            </summary>
            <param name="documentXml">The xml primer to use for the document (can include indexes and context vars), cannot be null and MUST include a process</param>
            <returns>A guid representing the document transaction. Use this on subsequent calls to associate them with this document</returns>
        </member>
        <member name="M:Oculus.Services.Managers.AcquisitionManager.LaunchDocument(System.String,System.String)">
            <summary>
            Initiates a transactioned launch for a document against a predefined process in 
            the specified process xml. 
            </summary>
            <param name="documentXml">The xml primer to use for the document (can include indexes and context vars), cannot be null AND MUST NOT INCLUDE A PROCESS</param>
            <param name="processXml">The xml to use for the acquisition process, as defined for a process *Version* node within configuration</param>
            <returns>A guid representing the document transaction. Use this on subsequent calls to associate them with this document</returns>
        </member>
        <member name="M:Oculus.Services.Managers.AcquisitionManager.LaunchDocument(System.String)">
            <summary>
            Initiates a transactioned launch for a document against a predefined process in 
            the specified document xml. 
            </summary>
            <param name="documentXml">The xml primer to use for the document (can include indexes and context vars), cannot be null and MUST include a process</param>
            <returns>A guid representing the document transaction. Use this on subsequent calls to associate them with this document</returns>
        </member>
        <member name="M:Oculus.Services.Managers.AcquisitionManager.LaunchDocument(System.Guid,System.String)">
            <summary>
            Initiates a transactioned launch for a document against the specified process using
            the specified document xml.  Process contexts (named, etc) are valid.
            </summary>
            <param name="processID">The id to resolve to a process version and launch against</param>
            <param name="documentXml">The xml primer to use for the document (can include indexes and context vars), cannot be null</param>
            <returns>A guid representing the document transaction. Use this on subsequent calls to associate them with this document</returns>
        </member>
        <member name="M:Oculus.Services.Managers.AcquisitionManager.CompleteLaunch(System.Guid)">
            <summary>
            Completes the document launch transaction and initiates the previously
            specified acquisition process for the document.
            </summary>
            <param name="documentUniqueId">The id for the transaction</param>
            <exception cref="T:System.ApplicationException">If not all fragments are accounted for</exception>
        </member>
        <member name="M:Oculus.Services.Managers.AcquisitionManager.CancelLaunch(System.Guid)">
            <summary>
            Cancels the document launch transaction and removes all data for the specified document.
            </summary>
            <param name="documentUniqueId">The id for the new document</param>
        </member>
        <member name="M:Oculus.Services.Managers.AcquisitionManager.ProcessFragment(System.Guid,System.String,System.Byte[])">
            <summary>
            Includes a fragment in a document launch. Use the document id from LaunchDocument to pass in
            to this method and associate the fragment to the document.
            </summary>
            <param name="documentUniqueId">The id for the transaction</param>
            <param name="fragmentXml">The xml for this particular fragment, cannot be null</param>
            <param name="fragmentData">The byte data for the fragment, cannot be null</param>
        </member>
        <member name="M:Oculus.Services.Managers.AcquisitionManager.ForwardFragment(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>
            Forwards a fragment to the current machine. This is the method by which fragments are communicated over the wire. The
            document xml will indicate at which step the document/fragment is within the process.
            </summary>
            <param name="fragmentXml">The xml for the fragment (will include the document data), cannot be null</param>
            <param name="fragmentData">A stream containing the fragment data, cannot be null</param>
        </member>
        <member name="M:Oculus.Services.Managers.AcquisitionManager.ForwardFragment(System.String,System.Byte[])">
            <summary>
            Forwards a fragment to the current machine. This is the method by which fragments are communicated over the wire. The
            document xml will indicate at which step the document/fragment is within the process.
            </summary>
            <param name="fragmentXml">The xml for the fragment (will include the document data), cannot be null</param>
            <param name="fragmentData">A stream containing the fragment data, cannot be null</param>
        </member>
        <member name="T:Oculus.Services.Managers.QueueManager">
            <summary>
            Remotable manager handles all the queue manager functionality. 
            Also contains methods for retrieving in-process documents
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.RequestDocument(System.String,System.Guid@,System.Xml.XmlDocument@)">
            <summary>
            Pulls a document from a queue and allocates it to the specified session.
            </summary>
            <param name="queueName">The queue to access</param>
            <param name="documentUniqueId">returns with the document id (we send back the internal id), will be Guid.Empty if no docs are in the queue</param>
            <param name="documentXml">returns with the document xml, will be null if no docs are in the queue</param>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.ProcessDocument(System.Guid,System.Xml.XmlDocument)">
            <summary>
            Indicates a document can move forward with its acquisition process. Please note this WILL NOT
            remove the document from the queue, and repeated calls to this method can send multiple instances
            of the document forward in the AP. Use CompleteDocument to remove the item from the queue.
            </summary>
            <param name="documentUniqueId">The transaction id</param>
            <param name="documentXml">The xml for the document moving forward, can be null</param>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.GetUserId">
            <summary>
            Gets the "session" id to use for queue-based operations. This should ONLY be used for queue operations,
            not for checking global permissions
            </summary>
            <returns>The sesssion id</returns>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.RequestDocument(System.String,System.Guid@,System.String@)">
            <summary>
            Pulls a document from a queue and allocates it to the specified session.
            </summary>
            <param name="queueName">The queue to access</param>
            <param name="documentUniqueId">returns with the transaction id (we send back the internal id)</param>
            <param name="documentXml">returns with the document xml</param>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.ProcessDocument(System.Guid,System.String)">
            <summary>
            Indicates a document can move forward with its acquisition process. Please note this WILL NOT
            remove the document from the queue, and repeated calls to this method can send multiple instances
            of the document forward in the AP. Use CompleteDocument to remove the item from the queue.
            </summary>
            <param name="documentUniqueId">The document id</param>
            <param name="documentXml">The xml for the document moving forward, can be null</param>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.CompleteDocument(System.Guid)">
            <summary>
            Removes a document from the queue, this will not move it forward in its acquisition process, 
            but simply remove it from the queue, call ProcessDocument to move the document through its AP.
            </summary>
            <param name="documentUniqueId">The transaction id</param>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.CancelRequest(System.Guid)">
            <summary>
            Cancels an allocation of the document to the user - this will make the document available to 
            other users on a call to FetchDocument.
            </summary>
            <param name="documentUniqueId">The transaction id</param>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.GetQueueTotalCount(System.String)">
            <summary>
            Returns a count for the total number of items (allocated or not) in the queue.
            </summary>
            <param name="queueName">The queue name</param>
            <returns>The number of documents in the queue</returns>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.ChangeDocumentProfile(System.Guid,System.Guid,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Changes the document's profile. NB all existing indexes will be dropped
            </summary>
            <param name="documentId">The unique document id</param>
            <param name="newProfileContextId">The new context id</param>
            <param name="newIndexes">The new set of indexes, NB all existing indexes will be dropped, cannot be null</param>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.DeleteDocument(System.Guid)">
            <summary>
            Removes the particular document from the system associated with the transaction id
            </summary>
            <param name="documentId">The document ID</param>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.DeleteFragment(System.Guid)">
            <summary>
            Removes the particular fragment from the system. User MUST have DELETE permission
            on the relevant profile.
            </summary>
            <param name="fragmentId">The fragment ID</param>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.GetDocument(System.Guid)">
            <summary>
            Retrieve the xml for the specified document.
            </summary>
            <param name="documentId">the document id</param>
            <returns>the document xml</returns>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.GetFragment(System.Guid,System.String@,System.Guid@)">
            <summary>
            Retrieve the xml for the specified fragment.
            </summary>
            <param name="fragmentUniqueId">the fragment id</param>
            <param name="fragmentXml">The xml for the fragment</param>
            <param name="documentUniqueId">The unique id for the owner document of the fragment</param>
            <returns>the fragment xml</returns>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.GetFragments(System.Guid,Oculus.Util.Collections.StringList@,Oculus.Util.Collections.GuidList@)">
            <summary>
            Retrieves the document xml for all fragments for the specified document. The return
            parameters are collections with id and xml at the same index of each collection.
            </summary>
            <param name="documentUniqueId">The document unique id</param>
            <param name="fragmentXmls">The set of fragment xmls</param>
            <param name="fragmentIds">The set of fragment ids</param>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.GetFragmentData(System.Guid)">
            <summary>
            Get the bytes for the fragment
            </summary>
            <param name="fragmentUniqueId">The id of the fragment to retrieve</param>
            <returns>The fragment data</returns>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.GetFragmentDataLength(System.Guid)">
            <summary>
            Gets the length of the fragment
            </summary>
            <param name="fragmentUniqueId">the fragment id</param>
            <returns>the length fo the data</returns>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.UpdateDocumentXmlMetadata(System.Guid,System.String)">
            <summary>
            Updates the annotations for the specified document
            </summary>
            <param name="documentUniqueId">The document unique id</param>
            <param name="xml">The annotation data, cannot be null nor can it be empty</param>
        </member>
        <member name="M:Oculus.Services.Managers.QueueManager.GetXmlMetadata(System.Guid)">
            <summary>
            Retrieves the xml annotation data for a specific document
            </summary>
            <param name="documentUniqueId">The id of the document</param>
            <returns>The xml data</returns>
        </member>
        <member name="T:Oculus.Services.Managers.AdminManager">
            <summary>
            Provides open access to the acquisition database and the machine. Please note that
            only an administrator may call methods on this object.
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.AdminManager.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.AdminManager.VeriyAdministrator">
            <summary>
            Ensures the user calling the method is an administrator
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.AdminManager.ExecuteQuery(Oculus.Data.Command)">
            <summary>
            Runs a query against the acquisition database, please note the results are returned
            raw from the database and will not be in standard form (e.g. guids, booleans, etc)
            </summary>
            <param name="command">The command to execute</param>
            <returns>The result</returns>
        </member>
        <member name="M:Oculus.Services.Managers.AdminManager.ExecuteQuery(Oculus.Data.Command,System.Int32,System.Int32,System.String)">
            <summary>
            Runs a query against the acquisition database, please note the results are returned
            raw from the database and will not be in standard form (e.g. guids, booleans, etc)
            </summary>
            <param name="command">The command to execute</param>
            <param name="startRecord">The first record to retrieve</param>
            <param name="maxRecords">The max number of records</param>
            <param name="sourceTable">The source table</param>
            <returns>The result</returns>
        </member>
        <member name="M:Oculus.Services.Managers.AdminManager.ExecuteNonQuery(Oculus.Data.Command)">
            <summary>
            Runs a query against the acquisition database
            </summary>
            <param name="command">The command to execute</param>
            <returns>The number of rows affected by the query</returns>
        </member>
        <member name="M:Oculus.Services.Managers.AdminManager.ExecuteScalar(Oculus.Data.Command)">
            <summary>
            Runs a query against the acquisition database
            </summary>
            <param name="command">The command to execute</param>
            <returns>The scalar value from the query, will return null if DBNull</returns>
        </member>
        <member name="M:Oculus.Services.Managers.AdminManager.ExecuteScalar(Oculus.Data.Command,System.Type)">
            <summary>
            Runs a query against the acquisition database, returns the scalar result
            coerced to the specified type
            </summary>
            <param name="command">The command to execute</param>
            <param name="resultType">The expected result type</param>
            <returns>The scalar value from the query, will return null if DBNull</returns>
        </member>
        <member name="M:Oculus.Services.Managers.AdminManager.DeleteDocument(System.Guid)">
            <summary>
            Performs a hard delete on the document and any fragments
            </summary>
            <param name="documentId">The document to remove</param>
        </member>
        <member name="M:Oculus.Services.Managers.AdminManager.Execute(Oculus.Data.Command,Oculus.Services.DatabaseType)">
            <summary>
            Executes a sql statement and returns the result as a dataset if it's a 
            select statement, otherwise the result of an ExecuteNonQuery
            </summary>
            <param name="command">The command to execute, cannot be null</param>
            <param name="dbType">The database to run it against</param>
            <returns>The </returns>
        </member>
        <member name="M:Oculus.Services.Managers.AdminManager.GetConnection(Oculus.Services.DatabaseType)">
            <summary>
            Gets a connection to the required database
            </summary>
            <param name="dbType">The database to connect to</param>
            <returns>The connection</returns>
        </member>
        <member name="T:Oculus.Services.Managers.SearchManager">
            <summary>
            Contains a variety of methods for working with searching on a remote machine
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.SearchManager.NewSearch(Oculus.Searching.SearchCriteria)">
            <summary>
            Runs the search against the server
            </summary>
            <param name="criteria">The criteria to search for</param>
            <returns>The search result</returns>
        </member>
        <member name="T:Oculus.Services.Managers.StorageManager">
            <summary>
            Handles operations against remote storage objects, namely documents and fragments. Each call
            is mirrored on the document and fragment classes.  Use the RemoteStorageDocument and RemoteStorageFragment
            combined with a remote moniker to ease use of this class.
            </summary>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.VerifyNonNullAndLocal(Oculus.Storage.ItemMoniker)">
            <summary>
            Ensures the moniker is non-null and local
            </summary>
            <param name="moniker">The moniker to use</param>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.LoadDocument(Oculus.Storage.ItemMoniker)">
            <summary>
            Loads the document data and returns it as a remote storage document
            </summary>
            <param name="documentMoniker">The document moniker</param>
            <returns>A remote document object</returns>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.GetProfileIDForDocument(Oculus.Storage.ItemMoniker)">
            <summary>
            Get the profile id for the specified document
            </summary>
            <param name="documentMoniker">The moniker to use</param>
            <returns>The profile id</returns>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.ChangeDocumentDescription(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
            Changes the document description
            </summary>
            <param name="documentMoniker">The moniker to use</param>
            <param name="newDescription">The new description</param>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.ChangeDocumentName(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
            Changes the document name
            </summary>
            <param name="documentMoniker">The moniker to use</param>
            <param name="newName">The new name for the document</param>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.ChangeDocumentMetadata(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
            Changes the document metadata
            </summary>
            <param name="documentMoniker">The moniker to use</param>
            <param name="metadataXml">The new metadata, use null to delete</param>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.ChangeDocumentProfile(Oculus.Storage.ItemMoniker,System.Guid,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Changes the document profile
            </summary>
            <param name="documentMoniker">The moniker to use</param>
            <param name="newProfileId">The new profile</param>
            <param name="newIndexes">The new indexes</param>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.ReindexDocument(Oculus.Storage.ItemMoniker,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Reindexes the document
            </summary>
            <param name="documentMoniker">The moniker to use</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.DeleteDocument(Oculus.Storage.ItemMoniker)">
            <summary>
            Deletes the document
            </summary>
            <param name="documentMoniker">The moniker to use</param>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.GetConsolidatedDocumentBytes(Oculus.Storage.ItemMoniker,System.String)">
            <summary>
            Gets the bytes for a consolidated write
            </summary>
            <param name="documentMoniker">The moniker to use</param>
            <param name="mimeType">The target mime type</param>
            <returns>The bytes</returns>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.LoadFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Loads the fragment data and returns is as a remote fragment
            </summary>
            <param name="fragmentMoniker">The fragment moniker</param>
            <returns>The remote fragment object</returns>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.GetFragmentByteLength(Oculus.Storage.ItemMoniker)">
            <summary>
            Get the byte length for the specified fragment
            </summary>
            <param name="fragmentMoniker">The moniker to use</param>
            <returns>The byte length</returns>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.DeleteFragment(Oculus.Storage.ItemMoniker)">
            <summary>
            Deletes the fragment
            </summary>
            <param name="fragmentMoniker">The moniker to use</param>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.SetFragmentDataLocation(Oculus.Storage.ItemMoniker,Oculus.Storage.ItemMoniker)">
            <summary>
            Changes the fragment data location
            </summary>
            <param name="fragmentMoniker">The moniker to use></param>
            <param name="newLocation">The new location</param>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.DeleteLocalFragmentData(Oculus.Storage.ItemMoniker)">
            <summary>
            Delete the local fragment data
            </summary>
            <param name="fragmentMoniker">The moniker to use</param>
        </member>
        <member name="M:Oculus.Services.Managers.StorageManager.GetFragmentBytes(Oculus.Storage.ItemMoniker)">
            <summary>
            Gets the byte data for the fragment
            </summary>
            <param name="fragmentMoniker">The moniker to use</param>
            <returns>The byte data</returns>
        </member>
        <member name="T:Oculus.Services.Constants">
            <summary>
            Constants for imaging services
            </summary>
        </member>
        <member name="F:Oculus.Services.Constants.AuditProcessID">
            <summary>
            Contains the id value of all audit processes
            </summary>
        </member>
        <member name="F:Oculus.Services.Constants.SystemUserName">
            <summary>
            This is used in event nodes to indicate the comms user
            </summary>
        </member>
        <member name="F:Oculus.Services.Constants.DocLaunchAppName">
            <summary>
            Value used for initial event node when launching a document
            </summary>
        </member>
        <member name="F:Oculus.Services.Constants.DocLaunchAppDesc">
            <summary>
            Value used for initial event node when launching a document
            </summary>
        </member>
        <member name="F:Oculus.Services.Constants.CommsAppName">
            <summary>
            This is used in event nodes indicating the commucations module
            </summary>
        </member>
        <member name="F:Oculus.Services.Constants.EventDateTimeFormat">
            <summary>
            This is used for formatting event date/times in history nodes for document/fragments,
            the TO is for backwards compatibility
            </summary>
        </member>
        <member name="T:Oculus.Services.Data.Config">
            <summary>
            Contains methods for dealing with the config tables in the database
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Config.SelectCurrentConfig">
            <summary>
            Retrieves the current configuration from the database
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Config.SelectCurrentHash">
            <summary>
            Retrieves the current hash from the database
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Config.InsertConfig">
            <summary>
            Inserts a new config record.
            
            param 0 -> id;
            param 1 -> hash;
            param 2 -> date received;
            param 3 -> data;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Config.UpdateOldConfig">
            <summary>
            Updates current config records to all be inactive
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Config.GetCurrentConfig">
            <summary>
            Retrieves the current configuration from the database
            </summary>
            <returns>The current configuration as an xml document</returns>
        </member>
        <member name="M:Oculus.Services.Data.Config.GetCurrentConfig(System.String@)">
            <summary>
            Retrieves the current configuration from the database, as well as the hash
            value for the configuration.
            </summary>
            <param name="hash">The hash value for the configuration</param>
            <returns>The current configuration as an xml document</returns>
            <exception cref="T:System.ApplicationException">If there are no config records, or if none are marked as active</exception>
        </member>
        <member name="M:Oculus.Services.Data.Config.GetCurrentHash">
            <summary>
            Returns the hash value of the current configuration
            </summary>
            <returns>The current hash value</returns>
            <exception cref="T:System.ApplicationException">If there are no config records, or if none are marked as active</exception>
        </member>
        <member name="M:Oculus.Services.Data.Config.SetCurrentConfig(System.Xml.XmlDocument)">
            <summary>
            Sets the current system configuration to the parameter. This method will automatically
            de-activate the current config.
            </summary>
            <param name="config">The new configuration, cannot be null</param>
        </member>
        <member name="T:Oculus.Services.Data.Connection">
            <summary>
            Class which provides database access across the assembly.
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Connection.NewConnection">
            <summary>
            Creates a new instance of the comms database connection.
            </summary>
            <returns>The initialized connection object</returns>
        </member>
        <member name="M:Oculus.Services.Data.Connection.RunNonQuery(System.String)">
            <summary>
            Creates an instance of the connection, runs the sql
            </summary>
            <param name="sql">The sql to run</param>
        </member>
        <member name="T:Oculus.Services.Data.LogConnection">
            <summary>
            Class which provides database access across the assembly.
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.LogConnection.NewConnection">
            <summary>
            Creates a new instance of the log database connection.
            </summary>
            <returns>The initialized connection object</returns>
        </member>
        <member name="T:Oculus.Services.Data.AuditConnection">
            <summary>
            Class which provides database access across the assembly.
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.AuditConnection.NewConnection">
            <summary>
            Creates a new instance of the audit database connection.
            </summary>
            <returns>The initialized connection object</returns>
        </member>
        <member name="T:Oculus.Services.Data.AdminConfigConnection">
            <summary>
            Class which provides database access across the assembly.
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.AdminConfigConnection.NewConnection">
            <summary>
            Creates a new instance of the comms database connection.
            </summary>
            <returns>The initialized connection object</returns>
        </member>
        <member name="T:Oculus.Services.Data.Deployment">
            <summary>
            Contains methods for dealing with the deployment tables in the database
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Deployment.UpdateMachineDone">
            <summary>
            This query updates a deployment record for a particular machine, indicating it 
            has successfully retrieved its configuration.
            
            param 0 -> date pushed
            param 1 -> machine name
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Deployment.UpdateMachineDoneByID">
            <summary>
            This query updates a deployment record by its id, indicating the server
            has successfully pushed the record's configuration.
            
            param 0 -> date pushed
            param 1 -> record id
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Deployment.UpdateDeploymentStatusByID">
            <summary>
            This query updates a deployment record by its id, changing the status based on the id
            
            param 0 -> waiting value
            param 1 -> record id
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Deployment.SelectDeployMachines">
            <summary>
            Retrieves all machines which are currently waiting for configuration
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Deployment.UpdateMachinesToAllDone">
            <summary>
            Sets all machines in the deployment table to not waiting - for anyone that didn't have it successfully delivered, 
            their DATE_DELIVERED field will be null
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Deployment.InsertMachine">
            <summary>
            Adds an entry to the deployment table indicating the particular machine needs notification of the new configuration.
            
            param 0 -> id
            param 1 -> machine name
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Deployment.NotifyMachineConfigDelivered(System.String)">
            <summary>
            This method will update the deployment table for any waiting records (there should only ever be one)
            indicating the particular machine has either been pushed its config or has requested its config.
            </summary>
            <param name="machine">The machine which requested config</param>
        </member>
        <member name="M:Oculus.Services.Data.Deployment.ChangeLocalDeployStatus(System.Guid,Oculus.Services.LocalDeploymentStatus)">
            <summary>
            This will change the status of the local deployment record to reflect the state of the actual deployment
            so operations aren't repeated.
            </summary>
            <param name="recordID">The id of the record to update</param>
            <param name="newStatus">The status to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Deployment.SetConfigDelivered(System.Guid)">
            <summary>
            This method will update the deployment table for any waiting records (there should only ever be one)
            indicating the particular machine has either been pushed its config or has requested its config.
            </summary>
            <param name="recordID">The id for the recrd which requested config</param>
        </member>
        <member name="M:Oculus.Services.Data.Deployment.ProcessForNotifications(System.Xml.XmlDocument)">
            <summary>
            Adds entries to the deployment database according to the values found in the new configuration.
            The current machine is always added.
            </summary>
            <param name="config">The new system configuration</param>
        </member>
        <member name="M:Oculus.Services.Data.Deployment.GetMachinesForDeployment">
            <summary>
            Retrieves a list of machines which currently need to be notified for new configuration.
            </summary>
            <returns>The machine names which need processing - will be 0-length if none</returns>
        </member>
        <member name="T:Oculus.Services.Data.Document">
            <summary>
            Data class relating to documents
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectAllProcesses">
            <summary>
            Retrieves all processes
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.InsertDocument">
            <summary>
            Inserts a new document record, fields not mentioned here will receive default values.
            param 0 -> internal id;
            param 1 -> doc id;
            param 2 -> profile id;
            param 3 -> doc xml;
            param 4 -> location;
            param 5 -> location type;
            param 6 -> date arrived;
            param 7 -> fragment count;
            param 8 -> xml hash;
            param 9 -> status;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectDocumentsForTransport">
            <summary>
            Retrieves a list of documents that are ready for transportation to a new server.
            XXXXXXformat param 0 -> # records to retrieve;XXXXXX
            out field 0 -> internal id;
            out field 1 -> doc xml;
            out field 2 -> location;
            out field 3 -> process xml;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectDocument">
            <summary>
            Retrieves a document record
            in param 0 -> internal id;
            out field 0 -> doc id;
            out field 1 -> profile id;
            out field 2 -> doc xml;
            out field 3 -> location;
            out field 4 -> location type;
            out field 5 -> fragment count;
            out field 6 -> xml hash;
            out field 7 -> process internal id;
            out field 8 -> process definition xml
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectDocumentCount">
            <summary>
            Selects both the fragment count from the doc record and the actual number of fragments for the document
            param 0,1 -> internal doc id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectSQLCEFragmentCount">
            JMD 20091119 - support for SQL Server Compact Edition
             <summary>
             Selects  the  actual number of fragments for the document
             param 0 -> internal doc id;
             </summary>
             
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectSQLCEDocumentCount">
            
            <summary>
            Selects both the fragment count from the doc record and the actual number of fragments for the document
            param 0 -> fragment count as retrieved from SelectSQLCEFragmentCount
            param 1 -> internal doc id;
            </summary>
            
        </member>
        <member name="F:Oculus.Services.Data.Document.UpdateDocumentFormat">
            <summary>
            Updates any document info for the specific record. Be sure to include commas.
            format param 0 -> update fields, form is FIELD = @FIELD;
            param X -> internal id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectDocumentFormat">
            <summary>
            Selects specified fields from the document table
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.UpdateClearTransferFailures">
            <summary>
            Changes all status TransferFailure items to PendingTransfer
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.UpdateClearProcessFailuresForType">
            <summary>
            Changes all status ProcessFailure items to Ready for the location type.
            param 0 -> location type;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.UpdateClearScheduleFailures">
            <summary>
            Changes all schedule failures to pending schedule
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.UpdateDocRecalculateFrags">
            <summary>
            Resets the document's fragment count based on the actual fragment records
            param 0, 1 -> doc id
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.InsertFragment">
            <summary>
            Inserts a fragment record.
            param 0 -> internal id;
            param 1 -> doc internal id;
            param 2 -> frag id;
            param 3 -> frag xml;
            param 4 -> page no;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectFragmentByDocAndNo">
            <summary>
            Selects a fragment record based on the doc internal id and page number.
            param 0 -> doc internal id;
            param 1 -> page no;
            out field 0 -> internal id;
            out field 1 -> fragment id;
            out field 2 -> fragment xml;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectFragment">
            <summary>
            Selects a fragment record based on the doc internal id and page number.
            param 0 -> frag internal id;
            out field 0 -> fragment id;
            out field 1 -> fragment xml;
            out field 2 -> internal doc id;
            out field 3 -> page no;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectFragmentsByDoc">
            <summary>
            Selects a fragment record based on the doc internal id, ordered by page number.
            param 0 -> doc internal id;
            param 1 -> page no;
            out field 0 -> internal id;
            out field 1 -> fragment id;
            out field 2 -> fragment xml;
            out field 3 -> page no;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectDocumentFragmentsIDOnly">
            <summary>
            Selects the internal id's for all fragments associated with a document
            param 0 -> doc internal id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectDocInternalIDFromHash">
            <summary>
            Selects the internal id of a document based on its xml hash
            param 0 -> doc xml hash;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.DeleteDocumentFragments">
            <summary>
            Deletes all the fragment records for a document.
            param 0 -> doc internal id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.DeleteFragmentByID">
            <summary>
            Deletes a fragment record.
            param 0 -> frag internal id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.DeleteFragmentByDocIDAndPageNo">
            <summary>
            Deletes a fragment by the doc id + page no (primary key on table)
            param 0 -> doc internal id
            param 1 -> page no
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SqlUpdateFragmentXml">
            <summary>
            Updates fragment xml field in the db.
            param 0 -> frag xml;
            param 1 -> internal id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.DeleteDocumentPushSchedules">
            <summary>
            Deletes all push shedule records for a document.
            param 0 -> doc internal id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.DeleteDocumentPush">
            <summary>
            Deletes all push records for a document.
            param 0 -> doc internal id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.DeleteDocumentByID">
            <summary>
            Deletes the specified document record.
            param 0 -> doc internal id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectDocumentsByTypeAndStatus">
            <summary>
            Selects a set of documents based on their location type and status.
            XXXXXstring format param 0 -> max num of docs to retrieveXXXXX
            param 0 -> location type;
            param 1 -> status;
            out 0 -> internal id;
            out 1 -> doc xml;
            out 2 -> location
            out 3 -> process definition xml;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectProcessByHash">
            <summary>
            Selects the id for a process by its hash.
            param 0 -> hash;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.InsertProcess">
            <summary>
            Inserts a process record.
            param 0 -> internal id;
            param 1 -> definition xml;
            param 2 -> hash;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.UpdateFragmentShift">
            <summary>
            Shifts back the page number for all fragments according to the doc id.
            param 0 -> doc internal id;
            param 1 -> page no - all items above this will be shifted back.
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectFragsToShift">
            <summary>
            Retrieves the id, page num, and frag xml for all fragments on a document with page num >= argument.
            param 0 -> doc internal id;
            param 1 -> page no (all selected >=)
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.UpdateFragmentFormat">
            <summary>
            Updates custom fields on the fragment table. 
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.UpdateTimedOutDocuments">
            <summary>
            Updates documents to process timeout status. All docs falling below bound
            will be altered.
            param 0 -> process internal id;
            param 1 -> current location;
            param 2 -> location time upper bound;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Document.SelectTimedOutDocuments">
            <summary>
            Retrieves timed out documents.
            param 0 -> process internal id;
            param 1 -> current location;
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Document.ExecuteAddDocument(Oculus.Services.Helpers.DocumentRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds the document record to the database and saves the document xml file to the structure. Please note
            that attempts to add documents with the same internal id will fail when saving the document xml to the 
            file system.
            </summary>
            <param name="doc">The document record to add, Doc XML cannot be null</param>
            <param name="conn">The connection to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.ReadDocumentRecord(System.Data.Common.DbDataReader,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Reads a standard record out of a document select
            </summary>
            <param name="reader">The reader</param>
            <param name="conn">The connection</param>
            <returns>The record</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.EnsureLocationTimeField">
            <summary>
            Ensures the LOCATION_TIME field is present in the DOCUMENT table.
            This is required for document timeout processing.
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetDocXmlPath(System.Guid)">
            <summary>
            Computes and returns the location of the document xml file
            </summary>
            <param name="docInternalID">The document internal id</param>
            <returns>A path to where the document xml should be located</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetFragXmlPath(System.Guid)">
            <summary>
            Computes and returns the location of the fragment xml file
            </summary>
            <param name="fragInternalID">The fragment internal id</param>
            <returns>A path to where the fragment xml should be located</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetFragDataPath(System.Guid)">
            <summary>
            Computes and returns the location of the fragment data file
            </summary>
            <param name="fragInternalID">The fragment internal id</param>
            <returns>A path to where the fragment data should be located</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.CopyDocument(Oculus.Services.Helpers.DocumentRecord,Oculus.Services.Helpers.FragmentRecord[],Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Creates an exact copy of the particular document, only changing the internal id
            </summary>
            <param name="doc">The document record to copy, becomes modified with the new internal id and xml</param>
            <param name="fragments">The fragments to copy</param>
            <param name="conn">The transaction to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.ShipDocument(Oculus.Services.Helpers.Transition[],Oculus.Services.Helpers.DocumentRecord,System.Boolean,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Sends the document along the specified transitions.
            </summary>
            <param name="items">The transitions to follow</param>
            <param name="doc">The document to ship</param>
            <param name="isMultiSource">Optimisation that, if set to false, will not make a copy of the doc if there's only one transition</param>
            <param name="conn">The transaction to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.ShipDocumentInternal(Oculus.Services.Helpers.Transition,Oculus.Services.Helpers.DocumentRecord,Oculus.Services.Helpers.FragmentRecord[],System.Boolean,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Handles the internals of the ship document functionality according to the info provided.
            </summary>
            <param name="item">The transition to follw</param>
            <param name="doc">The document to ship</param>
            <param name="frags">The fragments for the document</param>
            <param name="useCopy">true to create a copy for shipping, false to use as-is</param>
            <param name="conn">The transaction to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.AddProcess(System.String,System.String)">
            <summary>
            Adds the process to the process table and returns the id for it.
            </summary>
            <param name="processDefinitionXml">The definition xml</param>
            <param name="hash">The hash for the definition</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.AddProcess(System.String,System.String,System.Guid)">
            <summary>
            Adds the process to the process table and returns the id for it.
            </summary>
            <param name="processDefinitionXml">The definition xml</param>
            <param name="hash">The hash for the definition</param>
            <param name="id">The id to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.AddDocument(Oculus.Services.Helpers.DocumentRecord)">
            <summary>
            Adds the document record to the database and saves the document xml file to the structure. Please note
            that attempts to add documents with the same internal id will fail when saving the document xml to the 
            file system.
            </summary>
            <param name="doc">The document record to add, Doc XML cannot be null</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.AddDocument(Oculus.Services.Helpers.DocumentRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds the document record to the database and saves the document xml file to the structure. Please note
            that attempts to add documents with the same internal id will fail when saving the document xml to the 
            file system.
            </summary>
            <param name="doc">The document record to add, Doc XML cannot be null</param>
            <param name="conn">The transaction to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.AddFragment(Oculus.Services.Helpers.FragmentRecord,System.IO.Stream)">
            <summary>
            Adds a fragment, including its data, to the system. Will throw an exception when trying to write the data away
            if the internal id is a duplicate.
            </summary>
            <param name="frag">The fragment record to add</param>
            <param name="fragmentData">The data to save to the fragment file</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.AddFragment(Oculus.Services.Helpers.FragmentRecord,System.IO.Stream,System.Boolean,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a fragment, including its data, to the system. Will throw an exception when trying to write the data away
            if the internal id is a duplicate. Will check and update the document status to Ready if this was the last 
            fragment outstanding for the fragment
            </summary>
            <param name="frag">The fragment record to add</param>
            <param name="fragmentData">The data to save to the fragment file</param>
            <param name="checkUpdateStatus">
            Set to true if you want to automatically update the status of the document to "Ready" if this was the last
            fragment outstanding for the document
            </param>
            <param name="conn">The transaction to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.AddFragment(Oculus.Services.Helpers.FragmentRecord,System.IO.Stream,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a fragment, including its data, to the system. Will throw an exception when trying to write the data away
            if the internal id is a duplicate.
            </summary>
            <param name="frag">The fragment record to add</param>
            <param name="fragmentData">The data to save to the fragment file, you CAN use null</param>
            <param name="conn">The transaction to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetAllProcesses">
            <summary>
            Retrieves all process records from the database
            </summary>
            <returns>The process record</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetProcessByHash(System.String)">
            <summary>
            Returns the id of the process corresponding to the hash or Guid.Empty if it wasn't found.
            </summary>
            <param name="processHash">The hash to find</param>
            <returns>The process id or Guid.Empty if it couldn't be found</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.AllFragmentsReceived(System.Guid)">
            <summary>
            Checks to see if the specified document has all its fragments in the database.
            </summary>
            <param name="docInternalID">The document to check</param>
            <returns>True if the document has all its fragments, false if not</returns>
            <exception cref="T:System.Data.DataException">
            If there are more fragments than there are supposed to be, according to the fragment_count column
            </exception>
        </member>
        <member name="M:Oculus.Services.Data.Document.AllFragmentsReceived(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Checks to see if the specified document has all its fragments in the database.
            </summary>
            <param name="docInternalID">The document to check</param>
            <param name="conn">The transaction to use</param>
            <returns>True if the document has all its fragments, false if not</returns>
            <exception cref="T:System.Data.DataException">
            If there are more fragments than there are supposed to be, according to the fragment_count column
            </exception>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetDocInternalIDFromHash(System.String)">
            <summary>
            Finds and returns the internal id of a document based on the xml hash parameter.
            </summary>
            <param name="hash">The hash of the xml data</param>
            <returns>The document id if found, otherwise Guid.Empty</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetDocInternalIDFromHash(System.String,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Finds and returns the internal id of a document based on the xml hash parameter.
            </summary>
            <param name="hash">The hash of the xml data</param>
            <param name="conn">The transaction to use</param>
            <returns>The document id if found, otherwise Guid.Empty</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetDocumentRecord(System.Guid)">
            <summary>
            Retrieves and populates a document record with the specified id.
            </summary>
            <param name="docInternalID">The internal id of the doc to retrieve</param>
            <returns>The document record object or null if not found</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetDocumentRecord(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves and populates a document record with the specified id.
            </summary>
            <param name="docInternalID">The internal id of the doc to retrieve</param>
            <param name="conn">The transaction to use</param>
            <returns>The document record object or null if not found</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetFragmentRecord(System.Guid)">
            <summary>
            Retrieves the fragment record based on its id
            </summary>
            <param name="fragInternalID">The internal id of the fragment</param>
            <returns>The fragment record, or null if it can't be found</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetFragmentRecord(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Retrieves the fragment record at the specified number for the particular document.
            </summary>
            <param name="fragInternalID">The internal id of the fragment</param>
            <param name="conn">The transaction to use</param>
            <returns>The fragment record, or null if it can't be found</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetFragmentRecord(System.Guid,System.Int32)">
            <summary>
            Retrieves the fragment record at the specified number for the particular document.
            </summary>
            <param name="docInternalID">The internal id of the document</param>
            <param name="fragmentNo">The fragment number to retrieve</param>
            <returns>The fragment record, or null if it can't be found</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetFragmentsForDocument(System.Guid)">
            <summary>
            Retrieves a list of fragment records for the specified document id, ordered by page number.
            </summary>
            <param name="docInternalID">The internal id of the document</param>
            <returns>The list of fragment records</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetDocumentsByLocationType(System.Int32,Oculus.Services.LocationType,Oculus.Services.DocumentStatus)">
            <summary>
            Returns a list of documents (to the maximum count parameter) at the specified location type with the 
            specified document status. This is optimised to ONLY retrieve the document's internal id, doc XML, and location
            </summary>
            <param name="maxCount">The maximum number of records to retrieve</param>
            <param name="locationType">The location type to look for</param>
            <param name="status">The status to look for</param>
            <returns>A list of documents, eldest first, which correspond to the criteria</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetDocumentsForTransport(System.Int32)">
            <summary>
            Retrieves a list of documents available for transporting to another server.
            </summary>
            <param name="maxCount">The maximum number of records to retrieve</param>
            <returns>The list of record objects</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.GetTimeoutDocuments(System.Guid,System.String,System.Int32)">
            <summary>
            Retrieves a block of timed out documents
            </summary>
            <param name="processInternalId">The process internal id</param>
            <param name="currentLocation">The current location</param>
            <param name="maxCount">The max number of docs to retrieve</param>
            <returns>The set of documents</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.UpdateProcessTimeouts(System.Guid,System.String,System.DateTime)">
            <summary>
            Updates all documents under the threshold for th process + location to
            the timeout status.
            </summary>
            <param name="processInternalId">The process internal id</param>
            <param name="currentLocation">The current location</param>
            <param name="threshold">The date threshold - all docs less than this value will be updated</param>
            <returns>The number of rows updated</returns>
        </member>
        <member name="M:Oculus.Services.Data.Document.SetDocumentStatus(System.Guid,Oculus.Services.DocumentStatus)">
            <summary>
            Changes the document status
            </summary>
            <param name="docInternalID">The internal id for the document</param>
            <param name="status">The new status of the document</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.UpdateDocument(System.Guid,Oculus.Services.Helpers.NVPair[],Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Updates any fields on a document, according to the parameters sent.
            </summary>
            <param name="internalDocID">The document to update</param>
            <param name="updateParams">name/value paired array</param>
            <param name="conn">The transaction to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.UpdateDocument(Oculus.Services.Helpers.DocumentRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Updates the following fields on the Documnent.
            DocumentID, ProfileID, DocumentXml, DocXmlHash, Location, LocationType. NB THIS METHOD will NOT update the XML
            with the document and profile ids provided!
            </summary>
            <param name="doc">The document to update</param>
            <param name="conn">The transaction to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.ResetPushScheduleFailures">
            <summary>
            Changes all items from status transfer failure to status transfer out
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Document.ResetTransferFailures">
            <summary>
            Changes all items from status transfer failure to status transfer out
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Document.ResetProcessFailuresForLocationType(Oculus.Services.LocationType)">
            <summary>
            Changes all items from status transfer failure to status transfer out
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Document.UpdateFragmentXml(Oculus.Services.Helpers.FragmentRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Updates the fragment record
            </summary>
            <param name="frag">The fragment</param>
            <param name="conn">The connection</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.DeleteDocument(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Deletes a document and any of its fragments from the database and the filsystem.
            </summary>
            <param name="docInternalID">The internal id of the document</param>
            <param name="conn">The transaction to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.DeleteFragment(System.Guid)">
            <summary>
            Deletes a fragment from the database and the file system.
            </summary>
            <param name="fragInternalID">The internal id of the fragment</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.DeleteFragment(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Deletes a fragment from the database and the file system.
            </summary>
            <param name="fragInternalID">The internal id of the fragment</param>
            <param name="conn">The transaction to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Document.DeleteFragment(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection,System.Boolean)">
            <summary>
            Deletes a fragment from the database and the file system.
            </summary>
            <param name="fragInternalID">The internal id of the fragment</param>
            <param name="conn">The transaction to use</param>
            <param name="shiftFragments">True if you want to readjust any remaining fragments (e.g. frag numbers). False if not</param>
        </member>
        <member name="T:Oculus.Services.Data.Log">
            <summary>
            Contains methods for dealing with the log tables in the database
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Log.SqlInsertLog">
            <summary>
            Adds a log record to the database.
            param 0 -> id;
            param 1 -> date logged;
            param 2 -> log msg;
            param 3 -> ex msg;
            param 4 -> ex stacktrace;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Log.SqlDeleteLogs">
            <summary>
            Removes log records before a certain date from the database.
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Log.s_errorCache">
            <summary>
            Contains a cache of errors to help avoid duplicates
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Log.s_errorCacheHash">
            <summary>
            Contains a quick lookup of which errors we've got
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Log.SqlSelectLogs">
            <summary>
            Gets logs in a date range
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Log.MaxCacheSize">
            <summary>
            The maximum number of errors in the cache
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Log.IsErrorCached(System.Exception,System.String)">
            <summary>
            Checks the error info to see if it's been cached.  If it has, true is returned.
            If it has not, the error info is added to the cache and, if necessary, the old error
            info is popped off the error cache.
            </summary>
            <param name="exception">The exception to write</param>
            <param name="message">The message to write</param>
            <returns>True if the error is currently in the cache, false if not</returns>
        </member>
        <member name="M:Oculus.Services.Data.Log.GetErrorKey(System.Exception,System.String)">
            <summary>
            Returns the key used in the error cache hashtable for the error
            </summary>
            <param name="exception">The exception to write</param>
            <param name="message">The message to write</param>
            <returns>The key to use</returns>
        </member>
        <member name="M:Oculus.Services.Data.Log.DeleteLogs(System.DateTime)">
            <summary>
            Removes all logs prior to the date parameter
            </summary>
            <param name="minDateLogged">The minimum date for any logs remaining</param>
        </member>
        <member name="M:Oculus.Services.Data.Log.SubmitLog(System.String)">
            <summary>
            Writes the message to the logs
            </summary>
            <param name="message">The message to write</param>
        </member>
        <member name="M:Oculus.Services.Data.Log.SubmitLog(System.Exception,System.String)">
            <summary>
            Writes the message and associated exception to the logs. This method will consume ALL errors.
            </summary>
            <param name="exception">The exception to write</param>
            <param name="message">The message to write</param>
        </member>
        <member name="M:Oculus.Services.Data.Log.GetLogs(System.DateTime,System.DateTime)">
            <summary>
            Retrieves the set of logs for the specified date period
            </summary>
            <param name="fromDate">The lower bound</param>
            <param name="toDate">The upper bound</param>
            <returns>The set of logs for the period</returns>
        </member>
        <member name="T:Oculus.Services.Data.Log.ErrorInfo">
            <summary>
            Class used in the error info cache
            </summary>
        </member>
        <member name="T:Oculus.Services.Data.PermissionCache">
            <summary>
            Handles database calls for managing the security cache.  All calls to update can be made even if caching isn't
            enabled, but any calls made to retrieve values will raise an exception.  Calls to update the cache should only
            be made when live information is available, otherwise it's just redundant work.
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.PermissionCache.CachingIsDisabled">
            <summary>
            Error message for cached operations when caching isn't turned on.
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.PermissionCache.ExecCachedLogin">
            <summary>
            Selects the user id for the specified cached login.
            param 0 -> username;
            param 1 -> login hash;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.PermissionCache.DeleteCacheLogin">
            <summary>
            Removes a particular user's cached login data
            param 0 -> user id
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.PermissionCache.InsertCacheLogin">
            <summary>
            Inserts a cache login record
            param 0 -> user id;
            param 1 -> username;
            param 2 -> login hash;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.PermissionCache.SelectCacheData">
            <summary>
            Selects a piece of cached data. Returns the Item Data column.
            format 0 -> fields to use in where clause
            param x -> cache operation;
            param x+1 -> session id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.PermissionCache.DeleteCacheData">
            <summary>
            Deletes a piece of cached data.
            format 0 -> fields to use in where clause
            param x -> cache operation;
            param x+1 -> session id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.PermissionCache.InsertCacheData">
            <summary>
            Inserts a piece of cached data.
            param 0 -> unique id
            param 1 -> id 1;
            param 2 -> id 2;
            param 3 -> id 3;
            param 4 -> field 1;
            param 5 -> cache operation;
            param 6 -> session id;
            param 7 -> item data;
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.VerifyCachingEnabled">
            <summary>
            Checks to see caching is enabled and raises an exception if it's not
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.ComputeInnerSql(System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Helper method for getting/deleting cached data
            </summary>
            <param name="id1">id1 according to op</param>
            <param name="id2">id2 according to op</param>
            <param name="id3">id3 according to op</param>
            <param name="field1">field1 according to op</param>
            <returns>The string to use in the query</returns>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.GetCachedData(System.Guid,System.Guid,System.Guid,System.String,System.String,System.Guid)">
            <summary>
            Retrieves and deserializes a non-null result from the cache data. Use Guid.Empty to specify nulls on guid parameters,
            null to specify null on string parameters.  If result comes back as DBNull, this method will return null.
            </summary>
            <param name="id1">id1 according to op</param>
            <param name="id2">id2 according to op</param>
            <param name="id3">id3 according to op</param>
            <param name="field1">field1 according to op</param>
            <param name="cacheOperation">operation to check cache against</param>
            <param name="userId">id for user session</param>
            <returns>object previously stored on SetCacheData, or null if no cache data exists</returns>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.SetCachedData(System.Guid,System.Guid,System.Guid,System.String,System.String,System.Guid,System.Object)">
            <summary>
            Sets data in the cache data table according to the parameters. This will clear whatever is there currently
            </summary>
            <param name="id1">id1 according to op</param>
            <param name="id2">id2 according to op</param>
            <param name="id3">id3 according to op</param>
            <param name="field1">field1 according to op</param>
            <param name="cacheOperation">operation to check cache against</param>
            <param name="userId">id for user session</param>
            <param name="cacheValue">The value to set as the cache data (must be serializable)</param>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.CachedLogin(System.String,System.String)">
            <summary>
            Performs a login against the cache and initiates a session if the login is successful. The session id
            is returned as a string (Guid -> string).  Returns null if the login failed.
            </summary>
            <param name="username">the username for the login</param>
            <param name="password">the password for the login</param>
            <returns>A logon session id (Guid), or an empty string</returns>
            <exception cref="T:System.ApplicationException">If caching is disabled.</exception>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.CachedFetchGrantedObjectsByID(System.Guid,System.Guid,System.Guid)">
            <summary>
            Returns a list of granted objects according to type and right for the specified session
            </summary>
            <param name="typeID">The type to fetch</param>
            <param name="rightID">The right needed on the objects</param>
            <param name="userId">The session id for the user</param>
            <returns>A list of object ids</returns>
            <exception cref="T:System.ApplicationException">If caching is disabled.</exception>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.CachedFetchGrantedObjectNamesByName(System.Guid,System.Guid,System.Guid)">
            <summary>
            Returns a list of granted objects according to type and right for the specified session
            </summary>
            <param name="typeID">The type to fetch</param>
            <param name="rightID">The right needed on the objects</param>
            <param name="userId">The session id for the user</param>
            <returns>A list of object ids</returns>
            <exception cref="T:System.ApplicationException">If caching is disabled.</exception>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.CachedAccessByRightID(System.Guid,System.Guid,System.Guid)">
            <summary>
            Retrieves the access grant state between the session owner and the target
            against the specified right.
            </summary>
            <param name="targetID">The object against which the right is set</param>
            <param name="rightID">The right being requested</param>
            <param name="userId">the id for the user session</param>
            <returns>The state of access between the user/object/right</returns>
            <exception cref="T:System.ApplicationException">If caching is disabled.</exception>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.CachedAccessByObjectName(System.String,System.Guid,System.Guid,System.Guid)">
            <summary>
            Retrieves the access grant state between the session owner and the target
            against the specified right.
            </summary>
            <param name="targetName">The name of the object to check</param>
            <param name="typeID">The type for the object to check</param>
            <param name="rightID">The right to verify</param>
            <param name="userId">The session id</param>
            <returns>True if the user has access, false if not</returns>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.UpdateCachedObjectByAccessName(System.String,System.Guid,System.Guid,System.Guid,System.Guid,System.Boolean)">
            <summary>			
            Update Right/Type Combination in FB
            Aug2007
            </summary>
            <param name="targetName"></param>
            <param name="typeID"></param>
            <param name="rightID"></param>
            <param name="typeRightID"></param>
            <param name="userId"></param>
            <param name="result"></param>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.UpdateCachedLogin(System.String,System.String,System.Guid)">
            <summary>
            Updates the login table with the login info to enable future disconnected logins. 
            Creates a non-cached session for the user.
            </summary>
            <param name="username">the username for the login</param>
            <param name="password">the password for the login</param>
            <param name="userID">the id of the user logging in</param>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.UpdateCachedFetchGrantedObjectsByID(System.Guid,System.Guid,System.Guid,System.Guid[])">
            <summary>
            Updates the cache with a list of granted objects according to type and right for the specified session
            </summary>
            <param name="typeID">The type to fetch</param>
            <param name="rightID">The right needed on the objects</param>
            <param name="userId">The id of the session whose cache is being updated</param>
            <param name="results">The session id for the user</param>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.UpdateCachedFetchGrantedObjectNamesByName(System.Guid,System.Guid,System.Guid,System.String[])">
            <summary>
            Updates the cache with a list of granted objects according to type and right for the specified session
            </summary>
            <param name="typeID">The type to fetch</param>
            <param name="rightID">The right needed on the objects</param>
            <param name="userId">The id of the session whose cache is being updated</param>
            <param name="results">The session id for the user</param>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.UpdateCachedAccessByRightID(System.Guid,System.Guid,System.Guid,System.Boolean)">
            <summary>
            Updates the cache with the access grant state between the session owner and the target
            against the specified right.
            </summary>
            <param name="targetID">The object against which the right is set</param>
            <param name="rightID">The right being requested</param>
            <param name="userId">The id of the session whose cache is being updated</param>
            <param name="result">The value to set for access</param>
        </member>
        <member name="M:Oculus.Services.Data.PermissionCache.UpdateCachedAccessByObjectName(System.String,System.Guid,System.Guid,System.Guid,System.Boolean)">
            <summary>
            Updates the cache with the access grant state between the session owner and the target
            against the specified right.
            </summary>
            <param name="targetName">The name of the object to check</param>
            <param name="typeID">The type for the object to check</param>
            <param name="rightID">The right to verify</param>
            <param name="userId">The session id</param>
            <param name="result">The value to cache</param>
        </member>
        <member name="T:Oculus.Services.Data.Push">
            <summary>
            Contains methods for dealing with the push/schedule tables in the database
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Push.InsertPush">
            <summary>
            Adds a new row to the push table
            
            param 0 -> id
            param 1 -> destination machine name
            param 2 -> doc internal id
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Push.InsertPushSchedule">
            <summary>
            Adds a new row to the push table
            
            param 0 -> id
            param 1 -> push id
            param 2 -> schedule type
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Push.DeletePush">
            <summary>
            Removes a push record by its id.
            param 0 -> the id for the push
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Push.Add(Oculus.Services.Helpers.PushRecord,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Adds a push record to the database
            </summary>
            <param name="push">The push record to add</param>
            <param name="conn">The connection to use</param>
        </member>
        <member name="M:Oculus.Services.Data.Push.Delete(System.Guid,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Deletes a push record from the database
            </summary>
            <param name="pushID">The id of the record to remove</param>
            <param name="conn">The connection to use</param>
            <returns>The id of the push record</returns>
        </member>
        <member name="T:Oculus.Services.Data.Queue">
            <summary>
            Handles database calls for managing queues.
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Queue.SelectNextDocumentFormat">
            <summary>
            Template used for other query
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Queue.SelectNextDocument">
            <summary>
            grabs the next document in line according to the date it arrived.
            param 0 -> queue name;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Queue.UpdateAllocation">
            <summary>
            Updates a document record with allocation information
            param 0 -> allocated to id;
            param 1 -> time allocated;
            param 2 -> doc internal id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Queue.UpdateClearAllocation">
            <summary>
            Clears an allocation for the specified id/alocated to pair
            param 0 -> doc internal id;
            param 1 -> allocated to;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Queue.SelectAllocation">
            <summary>
            Selects a count on document for the internal id and allocated to columns
            param 0 -> doc internal id;
            param 1 -> allocated to;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Queue.SelectQueueDocList">
            <summary>
            Selects all fragments + document info from a particular queue
            param 0 -> queue name;
            out 0 -> doc id;
            out 1 -> frag count;
            out 2 -> profile id;
            out 3 -> frag id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Queue.SelectQueueDocCount">
            <summary>
            Selects the count of documents in the specified queue
            param 0 -> queue name;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Queue.UpdateClearExpiredItems">
            <summary>
            Clears the allocation according to the time (i.e. items in the queue which have expired
            param 0 -> the date to check against, anything equal to or before will be cleared;
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Queue.RequestDocument(System.Guid,System.String)">
            <summary>
            Retrieves the next document in the queue - this is a synchronized operation. Will 
            return null in the event of no document being found.
            </summary>
            <param name="userId">The id for the current user</param>
            <param name="queueName">The queue to query, cannot be null</param>
            <returns>A populated document object</returns>
        </member>
        <member name="M:Oculus.Services.Data.Queue.CancelRequest(System.Guid,System.Guid)">
            <summary>
            Clears the allocation of the specified document to the specified session 
            </summary>
            <param name="userId">The id for the current user</param>
            <param name="docInternalID">The doc internal id</param>
        </member>
        <member name="M:Oculus.Services.Data.Queue.IsItemAllocatedToSession(System.Guid,System.Guid)">
            <summary>
            Determines if the session has the particular item allocated to it.
            </summary>
            <param name="userId">The id for the current user</param>
            <param name="docInternalID">The internal doc id</param>
            <returns>True if the user owns the item, false if not</returns>
        </member>
        <member name="M:Oculus.Services.Data.Queue.GetQueueTotalCount(System.String)">
            <summary>
            Returns a count for the total number of items in the specified queue
            </summary>
            <param name="queueName">The queue to query, cannot be null</param>
            <returns>The count</returns>
        </member>
        <member name="M:Oculus.Services.Data.Queue.RestoreItems(System.DateTime)">
            <summary>
            Removes all allocations which occurred before the time parameter
            </summary>
            <param name="expiryDate">The date to use as the cut-off point for expired queue items</param>
        </member>
        <member name="M:Oculus.Services.Data.Queue.CheckLocationTimeField">
            <summary>
            Ensures the LOCATION_TIME field is present in the DOCUMENT table
            </summary>
        </member>
        <member name="T:Oculus.Services.Data.Session">
            <summary>
            Utility class which contains mothods for interacting with logon sessions.
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Session.SelectSessionID">
            <summary>
            Verifies the existence of a session.
            param 0 -> session id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Session.SelectSessionIDCached">
            <summary>
            Verifies the existence of a CACHED session.
            param 0 -> session id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Session.InsertSession">
            <summary>
            Adds a record to the session table
            param 0 -> session id;
            param 1 -> user id;
            param 2 -> keep alive;
            param 3 -> is cached;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Session.UpdateSessionKeepAlive">
            <summary>
            Updates the keep alive value for a session.
            param 0 -> keep alive;
            param 1 -> session id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Session.SelectSessionData">
            <summary>
            Selects all relevant data for a session.
            param 0 -> session id;
            </summary>
        </member>
        <member name="F:Oculus.Services.Data.Session.SqlDeleteSessions">
            <summary>
            Deletes all sessions whose keep-alive is older than the specified date.
            param 0 -> keep alive threshold
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Session.DeleteSessions(System.DateTime)">
            <summary>
            Deletes all sessions older than the specified keep-alive
            </summary>
            <param name="keepAliveThreshold">The lower bound for sessions which should be retained in the db</param>
        </member>
        <member name="M:Oculus.Services.Data.Session.IsCachedSessionID(System.Guid)">
            <summary>
            Determines whether or not the session id parameter is a cached session
            </summary>
            <param name="sessionID">The session id to check</param>
            <returns>true if it's a cached session id, false if not</returns>
        </member>
        <member name="M:Oculus.Services.Data.Session.IsKnownSessionID(System.Guid)">
            <summary>
            Determines whether or not the session id parameter is a cached session
            </summary>
            <param name="sessionID">The session id to check</param>
            <returns>true if it's a cached session id, false if not</returns>
        </member>
        <member name="M:Oculus.Services.Data.Session.AddSession(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Adds a session to the USER_SESSION table
            </summary>
            <param name="userID">The user id for the session</param>
            <param name="sessionID">The session id for the session</param>
            <param name="isCached">True if it's a cached session id, false if not</param>
        </member>
        <member name="M:Oculus.Services.Data.Session.AddNonCachedSession(System.Guid,System.Guid)">
            <summary>
            Adds a non-cached session to the database
            </summary>
            <param name="userID">The user id for the session</param>
            <param name="sessionID">The session id for the session</param>
        </member>
        <member name="M:Oculus.Services.Data.Session.NewSession(System.Guid)">
            <summary>
            Initiates a new session for the specified user.
            </summary>
            <param name="userID">The user to initiate the session against</param>
            <returns>The new session id</returns>
        </member>
        <member name="M:Oculus.Services.Data.Session.UpdateKeepAlive(System.Guid)">
            <summary>
            Updates the keep-alive value for a session to the current date/time
            </summary>
            <param name="sessionID">the session id to update</param>
        </member>
        <member name="M:Oculus.Services.Data.Session.CachedGetSessionInfo(System.Guid)">
            <summary>
            Returns session information for the id. Null if no session info exists.
            </summary>
            <param name="sessionID">The session id for the user</param>
            <returns>An object containing the session information</returns>
            <exception cref="T:System.ApplicationException">If caching is disabled.</exception>
        </member>
        <member name="T:Oculus.Services.Data.AdminConfig">
            <summary>
            Contains methods for dealing with the admin config tables in the database
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.AdminConfig.CheckTables">
            <summary>
            Verifies the tables for admin config
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.AdminConfig.SaveConfigRecord(System.String,System.String)">
            <summary>
            Saves a record into the admin config table. This makes the record the current admin config
            </summary>
            <param name="config">The configuration</param>
            <param name="user">The user doing the saving</param>
        </member>
        <member name="M:Oculus.Services.Data.AdminConfig.SaveDeploymentRecord(System.String,System.String)">
            <summary>
            Saves a record into the deployemnt table.
            </summary>
            <param name="config">The configuration</param>
            <param name="user">The user doing the saving</param>
        </member>
        <member name="M:Oculus.Services.Data.AdminConfig.GetAdminConfig">
            <summary>
            Retrieves the most current admin configuration
            </summary>
            <returns>The config</returns>
        </member>
        <member name="T:Oculus.Services.Data.Audit">
            <summary>
            Contains methods for dealing with the audit tables in the database
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Audit.LogDocumentAudit(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Adds an audit log for a completed document process
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Audit.LogDocumentViewAudit(System.String,System.String)">
            <summary>
             Adds an audit log for a document viewded/retrieved
            </summary>
        </member>
        <member name="M:Oculus.Services.Data.Audit.GetAuditDetail(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Gets scan index detail information
            </summary>
            <param name="machine">The machine, can be null</param>
            <param name="user">The user, can be null</param>
            <param name="fromDate">The from date, can be null</param>
            <param name="toDate">The to date, can be null</param>
            <returns>The result data</returns>
        </member>
        <member name="T:Oculus.Services.LocationType">
            <summary>
            Within a process, these are the kinds of locations we can have
            </summary>
        </member>
        <member name="F:Oculus.Services.LocationType.PushQueue">
            <summary>
            Indicates the location is a push queue
            </summary>
        </member>
        <member name="F:Oculus.Services.LocationType.PullQueue">
            <summary>
            Indicates the location is a pull queue
            </summary>
        </member>
        <member name="F:Oculus.Services.LocationType.Capture">
            <summary>
            Indicates the location is an initiating activity, this will usually never
            be in the database, as its outbound transitions are evaluated immediately.
            </summary>
        </member>
        <member name="F:Oculus.Services.LocationType.Store">
            <summary>
            Indicates the location is a storage call
            </summary>
        </member>
        <member name="F:Oculus.Services.LocationType.OutboundTransfer">
            <summary>
            Indicates the item needs to be sent to an external server
            </summary>
        </member>
        <member name="T:Oculus.Services.ScheduleType">
            <summary>
            Contains the different schedule types used by the transfer worker
            </summary>
        </member>
        <member name="F:Oculus.Services.ScheduleType.AlwaysOn">
            <summary>
            Indicates the schedule is always running
            </summary>
        </member>
        <member name="T:Oculus.Services.DocumentStatus">
            <summary>
            Values used as flags in the document status column which indicate various
            states the document can be in
            </summary>
        </member>
        <member name="F:Oculus.Services.DocumentStatus.PendingFragments">
            <summary>
            Indicates the document is awaiting transfer of all its fragments
            </summary>
        </member>
        <member name="F:Oculus.Services.DocumentStatus.Ready">
            <summary>
            Indicatest the document is ready for processing
            </summary>
        </member>
        <member name="F:Oculus.Services.DocumentStatus.ProcessedAwaitPush">
            <summary>
            Indicates the current activity has been completed, and that the pushes for the
            document need to be calculated (e.g. next activities, etc)
            </summary>
        </member>
        <member name="F:Oculus.Services.DocumentStatus.ProcessedAwaitPushError">
            <summary>
            Indicates there was a problem calculating the push schedule.
            </summary>
        </member>
        <member name="F:Oculus.Services.DocumentStatus.PendingTransfer">
            <summary>
            Indicates the document is awaiting transfer to another server
            </summary>
        </member>
        <member name="F:Oculus.Services.DocumentStatus.TransferFailed">
            <summary>
            Indicates the document was waiting for transfer, but then the transfer failed
            </summary>
        </member>
        <member name="F:Oculus.Services.DocumentStatus.ProcessFailed">
            <summary>
            Indicates a general processing error
            </summary>
        </member>
        <member name="F:Oculus.Services.DocumentStatus.ProcessTimedOut">
            <summary>
            Inidicates the document has timed out and is waiting to be auto-forwarded
            within its process
            </summary>
        </member>
        <member name="T:Oculus.Services.LocalDeploymentStatus">
            <summary>
            Enum representing different stages in the deployment process, only applies to the
            local machine
            </summary>
        </member>
        <member name="F:Oculus.Services.LocalDeploymentStatus.Complete">
            <summary>
            Deployment complete or cancelled
            </summary>
        </member>
        <member name="F:Oculus.Services.LocalDeploymentStatus.WaitAll">
            <summary>
            All deployment tasks waiting to be completed
            </summary>
        </member>
        <member name="F:Oculus.Services.LocalDeploymentStatus.NotificationPending">
            <summary>
            Internal plug-in notification is pending
            </summary>
        </member>
        <member name="F:Oculus.Services.LocalDeploymentStatus.AppGetPending">
            <summary>
            Get of all files is pending
            </summary>
        </member>
        <member name="F:Oculus.Services.LocalDeploymentStatus.AppInstallPending">
            <summary>
            Installing apps is pending
            </summary>
        </member>
        <member name="T:Oculus.Services.ServiceHostState">
            <summary>
            This enumeration indicates the current state of the service host.
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceHostState.Initialised">
            <summary>
            Indicates the service host has not yet been run, or encountered an error trying to run.
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceHostState.Running">
            <summary>
            Indicates the service host is currently running.
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceHostState.Stopped">
            <summary>
            Indicates the service host was running, but is now stopped.
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceHostState.Any">
            <summary>
            Indicates that any state is acceptable
            </summary>
        </member>
        <member name="F:Oculus.Services.ServiceHostState.NoChange">
            <summary>
            Indicates no change in state is required
            </summary>
        </member>
        <member name="T:Oculus.Services.ServiceOp">
            <summary>
            Utility enum for submitting batch operations to all services
            </summary>
        </member>
        <member name="T:Oculus.Services.LogLevel">
            <summary>
            Levels for log messages sent through the system
            </summary>
        </member>
        <member name="F:Oculus.Services.LogLevel.Info">
            <summary>Indicates an information-only log</summary>
        </member>
        <member name="F:Oculus.Services.LogLevel.Warning">
            <summary>Indicates a warning log</summary>
        </member>
        <member name="F:Oculus.Services.LogLevel.Error">
            <summary>Indicates an error</summary>
        </member>
        <member name="F:Oculus.Services.LogLevel.Audit">
            <summary>Indicates an audit</summary>
        </member>
        <member name="T:Oculus.Services.DatabaseType">
            <summary>
            Different system databases which can be used in general queries
            </summary>
        </member>
        <member name="F:Oculus.Services.DatabaseType.Acquisition">
            <summary>The acquisition database</summary>
        </member>
        <member name="F:Oculus.Services.DatabaseType.Log">
            <summary>The log database</summary>
        </member>
        <member name="F:Oculus.Services.DatabaseType.Security">
            <summary>The security database</summary>
        </member>
        <member name="F:Oculus.Services.DatabaseType.Audit">
            <summary>The audit database</summary>
        </member>
        <member name="T:Oculus.Services.Environment">
            <summary>
            Contains helpers for interacting with the runtime environment, e.g. for accessing security
            or logging.
            </summary>
        </member>
        <member name="M:Oculus.Services.Environment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="F:Oculus.Services.Environment.ConfigurationChanged">
            <summary>
            Fired whenever the configuration changes in the system.
            Source is always null and args are always empty.
            </summary>
        </member>
        <member name="P:Oculus.Services.Environment.CurrentEnvironment">
            <summary>
            Gets the current environment object
            </summary>
        </member>
        <member name="P:Oculus.Services.Environment.SecurityServer">
            <summary>
            Calculates the security server, this operation is cached.
            </summary>
        </member>
        <member name="P:Oculus.Services.Environment.ApplicationType">
            <summary>
            This application type as defined in the app.config (or web.config) file 
            under the key OculusApplicationType.
            </summary>
        </member>
        <member name="P:Oculus.Services.Environment.ApplicationName">
            <summary>
            Gets the application name as defined in the app.config (or web.config) file 
            under the key OculusApplicationName.
            </summary>
        </member>
        <member name="P:Oculus.Services.Environment.ApplicationVersion">
            <summary>
            Gets the application name as defined in the app.config (or web.config) file 
            under the key OculusApplicationVersion.
            </summary>
        </member>
        <member name="P:Oculus.Services.Environment.UserConfig">
            <summary>
            Get/set the previous username. This will store the value to the file system across
            applications on a single machine.
            </summary>
        </member>
        <member name="P:Oculus.Services.Environment.UserTempFileFolder">
            <summary>
            Returns the folder where temp files should be saved. Use a sub-directory
            within this folder to save your files to avoid naming conflicts.
            </summary>
        </member>
        <member name="M:Oculus.Services.Environment.LoadEnvironment">
            <summary>
            Loads the environment, possibly a custom one
            </summary>
        </member>
        <member name="M:Oculus.Services.Environment.OnConfigurationChanged">
            <summary>
            Raises the ConfigurationChanged event
            </summary>
        </member>
        <member name="M:Oculus.Services.Environment.SaveUserConfig">
            <summary>
            Saves the current user configuration to disk
            </summary>
        </member>
        <member name="M:Oculus.Services.Environment.GetTempFileFolder(System.String)">
            <summary>
            Returns a subfolder with the specified name in the temp file folder. Also ensures
            the directory exists
            </summary>
            <param name="subFolder">The subfolder name</param>
            <returns>The path to the subfolder</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewSecurityManager">
            <summary>
            Retrieves an instance of the security manager on the configured security server 
            for this machine.  If the current machine is not participating in the configuration,
            the default security server for the default branch will be returned.
            </summary>
            <returns>An instance of the security manager pointing to the security server</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewSecurityAdminManager">
            <summary>
            Retrieves an instance of the security manager on the configured security server 
            for this machine.  If the current machine is not participating in the configuration,
            the default security server for the default branch will be returned.
            </summary>
            <returns>An instance of the security manager pointing to the security server</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewConfigManager">
            <summary>Gets a local config manager</summary>
            <returns>A new instance of a config manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewConfigManager(System.String)">
            <summary>Gets a remote config manager</summary>
            <param name="server">The server to connect to</param>
            <returns>A new instance of a config manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewAcquisitionManager">
            <summary>Gets a local acquisition manager</summary>
            <returns>A new instance of a acquisition manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewAcquisitionManager(System.String)">
            <summary>Gets a remote acquisition manager</summary>
            <param name="server">The server to connect to</param>
            <returns>A new instance of a acquisition manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewCachedSecurityManager">
            <summary>Gets a local cached security manager</summary>
            <returns>A new instance of a cached security manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewCachedSecurityManager(System.String)">
            <summary>Gets a remote cached security manager</summary>
            <param name="server">The server to connect to</param>
            <returns>A new instance of a cached security manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewQueueManager">
            <summary>Gets a local queue manager</summary>
            <returns>A new instance of a queue manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewQueueManager(System.String)">
            <summary>Gets a remote queue manager</summary>
            <param name="server">The server to connect to</param>
            <returns>A new instance of a queue manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewLogManager">
            <summary>Gets a local log manager</summary>
            <returns>A new instance of a log manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewLogManager(System.String)">
            <summary>Gets a remote log manager</summary>
            <param name="server">The server to connect to</param>
            <returns>A new instance of a log manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewStorageManager">
            <summary>Gets a local storage manager</summary>
            <returns>A new instance of a storage manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewStorageManager(System.String)">
            <summary>Gets a remote storage manager</summary>
            <param name="server">The server to connect to</param>
            <returns>A new instance of a storage manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewSearchManager">
            <summary>Gets a local search manager</summary>
            <returns>A new instance of a search manager</returns>
        </member>
        <member name="M:Oculus.Services.Environment.NewSearchManager(System.String)">
            <summary>Gets a remote search manager</summary>
            <param name="server">The server to connect to</param>
            <returns>A new instance of a search manager</returns>
        </member>
        <member name="T:Oculus.Services.DocumentNotFoundException">
            <summary>
            Indicates an attempt to operate on a document failed b/c the doc doesn't exist
            </summary>
        </member>
        <member name="M:Oculus.Services.DocumentNotFoundException.#ctor">
            <summary>
            Create a default instance of the exception
            </summary>
        </member>
        <member name="M:Oculus.Services.DocumentNotFoundException.#ctor(System.Guid)">
            <summary>
            Create an instance of the exception against the specified id
            </summary>
            <param name="docInternalID">The id that couldn't be found</param>
        </member>
        <member name="M:Oculus.Services.DocumentNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="P:Oculus.Services.DocumentNotFoundException.DocumentInternalId">
            <summary>
            Get the document internal id associated with the error
            </summary>
        </member>
        <member name="T:Oculus.Services.DocumentAllocationException">
            <summary>
            Indicates an invalid operation against a document in a queue that hasn't been allocated
            to the specified user
            </summary>
        </member>
        <member name="M:Oculus.Services.DocumentAllocationException.#ctor">
            <summary>
            Create a default instance of the exception
            </summary>
        </member>
        <member name="M:Oculus.Services.DocumentAllocationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="P:Oculus.Services.DocumentAllocationException.Message">
            <summary>
            Gets the message for the exception
            </summary>
        </member>
        <member name="T:Oculus.Services.Helpers.Collections.DeploymentRecordList">
            <summary>
            A list of DeploymentRecord objects
            </summary>
        </member>
        <member name="T:Oculus.Services.Helpers.Collections.PushScheduleRecordList">
            <summary>
            A list of PushSheduleRecord objects
            </summary>
        </member>
        <member name="T:Oculus.Services.Helpers.Collections.LogRecordList">
            <summary>
            A list of LogRecord objects
            </summary>
        </member>
        <member name="M:Oculus.Services.Helpers.Collections.LogRecordList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Services.Helpers.Collections.LogRecordList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Services.Helpers.Config">
            <summary>
            Helper class for evaluating expressions against configuration
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Config.s_currentConfig">
            <summary>
            Contains a cached copy of configuration
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Config.s_currentConfigHash">
            <summary>
            Contains the current config hash
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Config.s_syncObj">
            <summary>
            Used for locking/synchronization
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Config.s_appTypeHash">
            <summary>
            Contains a string indexed list of application types
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Config.s_machineTypeHash">
            <summary>
            Contains a string indexed list of machine types
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Config.CurrentConfiguration">
            <summary>
            Contains a cached copy of configuration, please treat this as read-only
            </summary>
        </member>
        <member name="M:Oculus.Services.Helpers.Config.GetConfigHash(System.Xml.XmlDocument)">
            <summary>
            Generates and returns a hash for the configuration parameter.
            </summary>
            <param name="config">The config to hash</param>
            <returns>A hash of the config</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Config.GetDependentMachineNames(System.Xml.XmlDocument,System.String)">
            <summary>
            Selects a list of any dependent machines for the machine parameter. Any machine in 
            in a branch is dependent on that branch's config server, and each branch's config
            server is dependent on the primary branch's config server.
            </summary>
            <param name="config">The configuration to query against</param>
            <param name="machine">The machine to query against</param>
            <returns>A list of machine names dependent on the machine parameter</returns>
        </member>
        <member name="T:Oculus.Services.Helpers.Document">
            <summary>
            Contains helper methods for dealing with documents.
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Document.s_injectProcessTransform">
            <summary>
            Contains the transform which can be used to inject a process definition into a document xml
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Document.s_iptSyncObj">
            <summary>
            object used in sync-locking access to transform variable
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Document.s_dropDocTransform">
            <summary>
            Contains the transform which can be used to inject a process definition into a document xml
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Document.s_ddtSyncObj">
            <summary>
            object used in sync-locking access to transform variable
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Document.InjectProcessTransform">
            <summary>
            Gets the inject process transform and initializes it if necessary
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Document.DropDocumentInfoTransform">
            <summary>
            Gets the drop document info transform and initializes it if necessary
            </summary>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.GetProfileContextId(System.Xml.XmlDocument)">
            <summary>
            Retrieves the context id off the document xml
            </summary>
            <param name="documentXml">The document xml</param>
            <returns>The context id</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.RemovePossibleDefinitionNode(System.Xml.XmlDocument)">
            <summary>
            Removes the definition node from a document xml
            </summary>
            <param name="docXml">The doc xml</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.DRFX_GetID(Oculus.Services.Helpers.DocumentRecord,System.Xml.XmlElement)">
            <summary>
            Sets the document id on the doc record
            </summary>
            <param name="record">the record to modify</param>
            <param name="docNode">the Document node in the xml</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.DRFX_GetProfileInfo(Oculus.Services.Helpers.DocumentRecord,System.Xml.XmlElement,System.Xml.XmlNamespaceManager)">
            <summary>
            Sets the profile version on the doc record
            </summary>
            <param name="record">the record to modify</param>
            <param name="docNode">the Document node in the xml</param>
            <param name="man">the namespace manager</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.DRFX_GetFragmentCount(Oculus.Services.Helpers.DocumentRecord,System.Xml.XmlElement)">
            <summary>
            sets the fragment count on the doc record
            </summary>
            <param name="record">the record to modify</param>
            <param name="docNode">the Document node in the xml</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.DRFX_GetProcessInfo(Oculus.Services.Helpers.DocumentRecord,System.Xml.XmlElement,System.Xml.XmlNamespaceManager)">
            <summary>
            Sets the location, location type, process version id, and process internal id on the record
            </summary>
            <param name="record">the record to modify</param>
            <param name="docNode">the Document node in the xml</param>
            <param name="man">the namespace manager</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.DocRecordFromXml(System.Xml.XmlDocument)">
            <summary>
            Based on the document xml, this method generates a DocumentRecord object. This methods performs a HEAP of validation
            to help ensure the sanctity of the system and sets the location according to the Location node.  If location is missing,
            it defaults to the Initiating Activity, status is set to FragmentsPending.
            </summary>
            <param name="documentXml">The xml for the document</param>
            <returns>The populated record object</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.GetLocationType(System.Xml.XmlElement)">
            <summary>
            Derives and returns the location type for the specified location node
            </summary>
            <param name="locationNode">The node to check, cannot be null</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.InjectProcessDefinition(System.Guid,System.Xml.XmlDocument)">
            <summary>
            Adds the process definition to the xml document. The id can either be a version, a named process, or a process context id.
            The result is returned, the original document IS NOT modified.
            </summary>
            <param name="processID">The (context) id of the process</param>
            <param name="documentXml">The document xml</param>
            <returns>The doc xml with the process definition included</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.FragRecordFromXml(System.Xml.XmlDocument,System.Guid)">
            <summary>
            Based on the fragment xml, this method generates a FragmentRecord object. This methods performs a HEAP of validation
            to help ensure the sanctity of the system and sets the location according to the Location node.  If location is missing,
            it defaults to the Initiating Activity.
            </summary>
            <param name="fragmentXml">The xml for the fragment</param>
            <param name="docInternalID">The internal document id to associate with the fragment record</param>
            <returns>The populated record object</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.GetDocXmlFromFragXml(System.Xml.XmlDocument)">
            <summary>
            Converts a fragment xml document into a document xml document and returns the result
            </summary>
            <param name="fragmentXml">The fragment xml which serves as a basis for the conversion</param>
            <returns>The document xml for the fragment</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.DropDocInfoFromFragXml(System.Xml.XmlDocument)">
            <summary>
            Converts a fragment xml document into a fragment xml document without any document data and returns the result
            </summary>
            <param name="fragmentXml">The fragment xml which serves as a basis for the conversion</param>
            <returns>The fragment xml, sans the document xml baggage</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.AddEventNode(System.Xml.XmlNode,System.String,System.String,System.String,System.String)">
            <summary>
            Navigates to the history node of the parent node parameter containing the specified data.  Will add the 
            history node, if necessary, and will add the event node under the history node.
            </summary>
            <param name="parentNode">The node to which we should append the history, cannot be null</param>
            <param name="appName">The value to use for the Application attribute</param>
            <param name="user">The value to use for the User attribute</param>
            <param name="action">The value to use for the Action attribute</param>
            <param name="queueName">The value to use for the Queue attribute</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.GetProcessInternalID(System.String)">
            <summary>
            For the definition xml parameter, either finds or creates a record corresponding to the definition.
            </summary>
            <param name="processDefinitionXml">The xml to find in the database</param>
            <returns>The unique id for the process xml</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.AddArriveEvent(System.Xml.XmlDocument)">
            <summary>
            Adds an arrive event node to the fragment node parameter, it MUST be in slim mode without the document data
            in order to work.
            </summary>
            <param name="fragmentXml">The fragment xml</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.GetReadOnlyFragmentStream(System.Guid)">
            <summary>
            Returns an opened read-only stream to the fragment data file
            </summary>
            <param name="fragInternalID">The internal id of the fragment</param>
            <returns>A file stream pointing to the fragment</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.GetFragmentsXml(System.Guid)">
            <summary>
            Composes and returns a composite xml document containing all the fragment xml for the specified document
            </summary>
            <param name="internalDocID">The doc id to retrieve</param>
            <returns>A composite xml document</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.GetProcessVersion(System.Xml.XmlDocument)">
            <summary>
            Returns the process id from an acquisition process within document xml.
            </summary>
            <param name="docXml">The doc xml</param>
            <returns>The process version</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.GetBytesForFragmentData(System.Guid)">
            <summary>
            Returns a byte array of all the data for a fragment.
            </summary>
            <param name="fragInternalID">the fragment id</param>
            <returns>The data for the fragment</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.MergeDocXmlIntoFragXml(System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Combines the fragment xml with the document xml and returns the result
            </summary>
            <param name="docXml">The doc xml</param>
            <param name="fragXml">The frag xml</param>
            <returns>The fragment xml, including all document information</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.ConvertForwardToNativeFormat(System.Xml.XmlDocument)">
            <summary>
            Converts a forward fragment call from the old Win32 to the new .NET format. This will ensure the
            Location attribute on the process is in sync with the route specified on the Fragment node.
            </summary>
            <param name="win32FragmentXml">The xml in Win32 format</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.ConvertForwardToWin32Format(System.Xml.XmlDocument)">
            <summary>
            Converts a forward fragment call from the old Win32 to the new .NET format by adding a transition
            Location attribute on the fragment node according to the doc location.
            </summary>
            <param name="nativeFragmentXml">The xml in native format</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.SetAnnotationXml(System.Guid,System.Xml.XmlDocument,Oculus.Storage.Annotations.FragmentAnnotation)">
            <summary>
            Takes the given annotation and updates the fragment xml to contain it
            </summary>
            <param name="fragmentInternalId">The fragment internal id</param>
            <param name="fragXml">The fragment xml</param>
            <param name="fragmentAnnotation">The annotation</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Document.GetAnnotationFromXml(System.String,System.Xml.XmlDocument)">
            <summary>
            Retrieves out the annotation from the fragment xml
            </summary>
            <param name="fragmentId">The fragment id</param>
            <param name="fragXml">The fragment xml</param>
        </member>
        <member name="T:Oculus.Services.Helpers.Files">
            <summary>
            Contains helper methods for dealing with files. This is where we can make the API call to
            use non-cached files.
            </summary>
        </member>
        <member name="M:Oculus.Services.Helpers.Files.NewFileStream(System.String)">
            <summary>
            Returns a new file stream to the specified location with Write/Create.
            </summary>
            <param name="path">The path of the new file to create</param>
            <returns>The opened stream</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Files.NewReadOnlyFileStream(System.String)">
            <summary>
            Returns a new file stream to the specified location with read-only access.
            </summary>
            <param name="path">The path of the file to read</param>
            <returns>The opened stream</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Files.CreateOrReplaceFile(System.String,System.Xml.XmlDocument)">
            <summary>
            Replaces the file at the specified location with the contents of the xml document.
            </summary>
            <param name="path">The path of the file</param>
            <param name="doc">The xml doc to save</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Files.SaveStreamData(System.String,System.IO.Stream)">
            <summary>
            Saves the stream data to the specified file.
            </summary>
            <param name="filePath">The path for the output file</param>
            <param name="inputStream">The stream to use</param>
        </member>
        <member name="T:Oculus.Services.Helpers.Formatter">
            <summary>
            Contains helper methods for dealing with formatting.
            </summary>
        </member>
        <member name="M:Oculus.Services.Helpers.Formatter.GetDerivedPath(System.String,System.Guid)">
            <summary>
            Returns a derived path starting with basePath and using the guid folder structure 
            </summary>
            <param name="basePath">The initial path to use</param>
            <param name="targetItemID">The id of the item you're trying to find</param>
            <returns>The full path (no extension on the file)</returns>
        </member>
        <member name="T:Oculus.Services.Helpers.Mutexes">
            <summary>
            Contains a list of constants used by the services library.
            This class doesn't actually use mutexes, but rather object locks indexed by "mutex" 
            name.
            
            Please note these locks are only valid on a per-AppDomain basis.
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Mutexes.ConfigDeployMutexName">
            <summary>
            Const name used in config deployment operations
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Mutexes.QueueMutexName">
            <summary>
            Const name used in queue operations
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Mutexes.GeneralMutexName">
            <summary>
            Const name used in queue operations
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Mutexes.NativeStoreMutexName">
            <summary>
            Const name used in native storage operations
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Mutexes.PushShedulerMutexName">
            <summary>
            Const name used in push scheduling operations
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Mutexes.ProcessPushMutexName">
            <summary>
            Const name used in push process operations
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Mutexes.ProcessCaptureMutexName">
            <summary>
            Const name used in push capture operations
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Mutexes.FragmentPushMutexName">
            <summary>
            Const name used in push process operations
            </summary>
        </member>
        <member name="M:Oculus.Services.Helpers.Mutexes.GetObjectMutex(System.String)">
            <summary>
            Returns the object associated with the specified lock
            </summary>
            <param name="mutexName">The name of the mutex</param>
            <returns>The object mutex</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Mutexes.GetFragmentPushMutex">
            <summary>
            Creates and returns a mutex used in the fragment push worker
            </summary>
            <returns>The object to use in a lock() statement</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Mutexes.GetProcessPushMutex">
            <summary>
            Creates and returns a mutex used in the process push worker
            </summary>
            <returns>The object to use in a lock() statement</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Mutexes.GetProcessCaptureMutex">
            <summary>
            Creates and returns a mutex used in the process capture worker
            </summary>
            <returns>The object to use in a lock() statement</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Mutexes.GetPushSchedulerMutex">
            <summary>
            Creates and returns a mutex used in the push scheduler worker
            </summary>
            <returns>The object to use in a lock() statement</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Mutexes.GetNativeStoreMutex">
            <summary>
            Creates and returns a mutex used in the native store worker
            </summary>
            <returns>The object to use in a lock() statement</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Mutexes.GetConfigDeployMutex">
            <summary>
            Creates and returns a mutex used in configuration deployment
            </summary>
            <returns>The object to use in a lock() statement</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Mutexes.GetMachineDeploymentMutex(System.String)">
            <summary>
            Creates and returns a mutex used for deploying to a specific machine.
            </summary>
            <returns>The object to use in a lock() statement</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Mutexes.GetQueueMutex(System.String)">
            <summary>
            Creates and returns a mutex used for operating on a specific queue.
            </summary>
            <returns>The object to use in a lock() statement</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Mutexes.GetMutex(System.String)">
            <summary>
            Creates and returns a mutex used for deploying to a specific machine.
            </summary>
            <returns>The object to use in a lock() statement</returns>
        </member>
        <member name="T:Oculus.Services.Helpers.Process">
            <summary>
            Contains helper methods for dealing with processes.
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Process.s_mergeDocTransform">
            <summary>
            Contains the transform which can be used to inject a process definition into a document xml
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Process.s_normalizeProcTransform">
            <summary>
            Contains the transform which can be used to normalize a process definition 
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Process.s_auditProcTransform">
            <summary>
            Contains the transform which can be used to launch audit processes
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Process.s_mdtSyncObj">
            <summary>
            object used in sync-locking access to transform variable
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Process.s_nptSyncObj">
            <summary>
            object used in sync-locking access to transform variable
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Process.s_auditSyncObj">
            <summary>
            object used in sync-locking access to audit variable
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Process.MergeDocumentTransform">
            <summary>
            Gets the inject process transform and initializes it if necessary
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Process.NormalizeProcessTransform">
            <summary>
            Gets the normalize process transform and initializes it if necessary
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Process.AuditProcessTransform">
            <summary>
            Gets the normalize process transform and initializes it if necessary
            </summary>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.InternalLaunchAuditProcess(System.Xml.XmlDocument)">
            <summary>
            Launches an audit process for the particular xml
            </summary>
            <param name="fragOrDocXml">The xml to send along the audit process</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.ProcessOutboundTransitions(Oculus.Services.Helpers.Transition[],Oculus.Services.Helpers.DocumentRecord,System.Boolean)">
            <summary>
            Moves the document along the specified transitions.
            </summary>
            <param name="items">The transitions to follow</param>
            <param name="doc">The document to move along the transitions</param>
            <param name="multiSource">Flag indicating whether or not this can be called multiple times for a single document</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.ProcessDocumentXmlResponse(System.Guid,System.Xml.XmlDocument,System.Boolean,System.String)">
            <summary>
            Helper overload
            </summary>
            <param name="docInternalID">The internal id of the document</param>
            <param name="newDocumentXml">The new xml to merge in, can be null</param>
            <param name="multiSource">True if this is going to be called multiple times for the same doc, False if not</param>
            <param name="username">The name of the user which performed the operation which moved the item to this step</param>
            <exception cref="T:Oculus.Services.DocumentNotFoundException">If the doc doesn't exist</exception>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.ProcessDocumentXmlResponse(System.Guid,System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Helper overload
            </summary>
            <param name="docInternalID">The internal id of the document</param>
            <param name="newDocumentXml">The new xml to merge in, can be null</param>
            <param name="multiSource">True if this is going to be called multiple times for the same doc, False if not</param>
            <exception cref="T:Oculus.Services.DocumentNotFoundException">If the doc doesn't exist</exception>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.ProcessDocumentXmlResponse(Oculus.Services.Helpers.DocumentRecord,System.Xml.XmlDocument,System.Boolean,System.String)">
            <summary>
            Indicates that something has finished processing a document and needs its response
            merged with the current document XML.  Use the multisource parameter to indicate whether or not you'll
            be calling this more than once (or potentially more than once) for this particular id. If so, this
            method will make a copy of the document and mark it as processed
            
            The only things that are merged are index values, context variables, document id, and
            current location in the process.
            </summary>
            <param name="doc">The document to use</param>
            <param name="newDocumentXml">The new xml to merge in, can be null</param>
            <param name="multiSource">True if this is going to be called multiple times for the same doc, False if not</param>
            <param name="username">The name of the user which performed the operation which moved the item to this step</param>
            <exception cref="T:Oculus.Services.DocumentNotFoundException">If the doc doesn't exist</exception>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.ProcessDocumentXmlResponse(Oculus.Services.Helpers.DocumentRecord,System.Xml.XmlDocument,System.Boolean,System.String,System.String)">
            <summary>
            Indicates that something has finished processing a document and needs its response
            merged with the current document XML.  Use the multisource parameter to indicate whether or not you'll
            be calling this more than once (or potentially more than once) for this particular id. If so, this
            method will make a copy of the document and mark it as processed
            
            The only things that are merged are index values, context variables, document id, and
            current location in the process.
            </summary>
            <param name="doc">The document to use</param>
            <param name="newDocumentXml">The new xml to merge in, can be null</param>
            <param name="multiSource">True if this is going to be called multiple times for the same doc, False if not</param>
            <param name="username">The name of the user which performed the operation which moved the item to this step</param>
            <param name="eventName">The name of the event to add to the history</param>
            <exception cref="T:Oculus.Services.DocumentNotFoundException">If the doc doesn't exist</exception>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.MergeDocumentXml(System.Xml.XmlDocument,System.Xml.XmlDocument)">
            <summary>
            Runs the merge of the old and new document xmls. Returns a document which is the result of the merge.
            </summary>
            <param name="oldDocumentXml">The original document xml</param>
            <param name="newDocumentXml">The document xml to merge in</param>
            <returns>The merged xml document</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.GetLocationNode(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String)">
            <summary>
            Returns the location node for a particular activity within the process.
            </summary>
            <param name="documentXml">The source document xml</param>
            <param name="manager">Namespace manager for the document</param>
            <param name="activityName">The name of the activity to retrieve</param>
            <returns>The activity node</returns>
            <exception cref="T:System.ArgumentException">if the activity cannot be found</exception>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.GetCurrentLocation(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Finds and returns the value of the current locatiopn
            </summary>
            <param name="documentXml">The source document xml</param>
            <param name="manager">Namespace manager for the document</param>
            <returns>the current location, or string.empty if it can't be found</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.GetDocumentID(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Finds and returns the document id
            </summary>
            <param name="documentXml">The source document xml</param>
            <param name="manager">Namespace manager for the document</param>
            <returns>the doc id, or guid.empty if it can't be found</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.DeriveActivityLocation(System.Xml.XmlElement)">
            <summary>
            Returns the machine where the specified activity is supposed to take place. If the location
            is templated, the TEMPLATE name will be returned
            </summary>
            <param name="activityNode">The node for the activity</param>
            <returns>The machine for the activity</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.DeriveQueueName(System.Xml.XmlElement)">
            <summary>
            Returns the queue for the specified activity node
            </summary>
            <param name="activityNode">The node for the activity</param>
            <returns>The queue for the activity</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.DeriveTargetAppName(System.Xml.XmlElement,Oculus.Services.LocationType)">
            <summary>
            Returns the target application name for the activity, will be the app name if it exists,
            otherwise Store or OutboundTransfer for storage or shipping out
            </summary>
            <param name="activityNode">The node for the activity</param>
            <param name="activityType">The type of the activity, as previously determined</param>
            <returns>The target app name for the activity</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.DeriveTargetQueue(System.Xml.XmlElement,Oculus.Services.LocationType)">
            <summary>
            Returns the target application name for the activity, will be the app name if it exists,
            otherwise Store or OutboundTransfer for storage or shipping out
            </summary>
            <param name="activityNode">The node for the activity</param>
            <param name="activityType">The type of the activity, as previously determined</param>
            <returns>The target app name for the activity</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.LaunchAuditProcess(Oculus.Services.Helpers.DocumentRecord)">
            <summary>
            Initiates an audit process for the specified document/fragments.
            </summary>
            <param name="doc">The document to launch into an audit process</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.GetOculetForCurrentLocation(Oculus.Services.Helpers.DocumentRecord)">
            <summary>
            Returns an instantiated oculet based on the application assigned to the current location within
            the document.
            </summary>
            <param name="l_doc">The document to use</param>
            <returns>An oculet, provided it can be found</returns>
            <exception cref="T:System.ApplicationException">If the target app for the location isn't an oculet</exception>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.NormalizeProcessXml(System.Xml.XmlDocument)">
            <summary>
            Runs the normalize transform against the process xml document and returns the response
            </summary>
            <param name="processXml">The xml to convert</param>
            <returns>The normalized process xml in native comms format</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.GetLaunchMachine(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Retrieves the machine from the document xml which initially launched the process for a given document (i.e.
            the location machine of the first history node), or the current machine if no node is found.
            </summary>
            <param name="documentXml">The xml for the document</param>
            <param name="manager">A namespace manager for the document</param>
            <returns>The name of the machine</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Process.DeriveTemplateLocation(System.String,System.String,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Finds the specified queue in the branch for baseMachine, according to the config.
            </summary>
            <param name="queueName">The name of the queue to find</param>
            <param name="baseMachine">The name of a machine in the branch we're trying to search</param>
            <param name="config">The xml for configuration</param>
            <param name="manager">Default NS manager for config</param>
            <returns>The name of the server where the queue exists</returns>
            <exception cref="T:System.ApplicationException">If the queue cannot be found in the branch</exception>
        </member>
        <member name="T:Oculus.Services.Helpers.DeploymentRecord">
            <summary>
            Used in working with deployment. We keep the id around to prevent the situation where
            the deployment worker runs, successfully deploys, then updates the current record for that
            machine, which in the meantime has been changed b/c of a new update to config.
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DeploymentRecord.MachineName">
            <summary>
            The name of the machine to deploy to
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DeploymentRecord.RecordID">
            <summary>
            The unique id of the record
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DeploymentRecord.LocalDeploymentStatus">
            <summary>
            The status of deployment for the item, only really applies to 
            the local machine
            </summary>
        </member>
        <member name="T:Oculus.Services.Helpers.DocumentRecord">
            <summary>
            Represents a record in the DOCUMENT table in the database.
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DocumentRecord.InternalID">
            <summary>
            The unique id of the record
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DocumentRecord.DocumentID">
            <summary>
            The document unique id
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DocumentRecord.ProfileID">
            <summary>
            The id of the profile for the document
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DocumentRecord.DocumentXml">
            <summary>
            The xml for the document
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DocumentRecord.Location">
            <summary>
            The current location
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DocumentRecord.FragmentCount">
            <summary>
            The number of fragments
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DocumentRecord.LocationType">
            <summary>
            The type of the current location
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DocumentRecord.DocXmlHash">
            <summary>
            A hash of the document xml
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DocumentRecord.Status">
            <summary>
            The status of the document
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DocumentRecord.ProcessInternalID">
            <summary>
            The id of the process used for this document
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DocumentRecord.XmlProcessVersionID">
            <summary>
            The id of the process version on the acquisition process
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.DocumentRecord.QueueName">
            <summary>
            The current queue for the document, only used at insertion
            </summary>
        </member>
        <member name="T:Oculus.Services.Helpers.FragmentRecord">
            <summary>
            Represents a record in the FRAGMENT table in the database
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.FragmentRecord.InternalID">
            <summary>
            The unique id of the record
            </summary>		
        </member>
        <member name="F:Oculus.Services.Helpers.FragmentRecord.DocInternalID">
            <summary>
            The document unique id
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.FragmentRecord.FragmentID">
            <summary>
            The fragment id as in the xml
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.FragmentRecord.FragmentXml">
            <summary>
            The fragment xml
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.FragmentRecord.PageNo">
            <summary>
            The page number of the fragment (start w/1)
            </summary>
        </member>
        <member name="T:Oculus.Services.Helpers.PushRecord">
            <summary>
            Represents a record in the PUSH table in the database
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.PushRecord.TargetMachine">
            <summary>
            The target machine
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.PushRecord.DocInternalID">
            <summary>
            The document unique id
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.PushRecord.ID">
            <summary>
            The unique id of the record
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.PushRecord.Schedules">
            <summary>
            Get a list of the schedules for this push
            </summary>
        </member>
        <member name="T:Oculus.Services.Helpers.PushScheduleRecord">
            <summary>
            Represents a record in the PUSH_SCHEDULE table in the database
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.PushScheduleRecord.ID">
            <summary>
            The unique id of the record
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.PushScheduleRecord.PushID">
            <summary>
            The push unique id
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.PushScheduleRecord.ScheduleType">
            <summary>
            The schedule type
            </summary>
        </member>
        <member name="T:Oculus.Services.Helpers.ProcessRecord">
            <summary>
            Represents a record in the PROCESS table
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.ProcessRecord.ID">
            <summary>
            The unique id
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.ProcessRecord.Hash">
            <summary>
            The process hash
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.ProcessRecord.XmlDefinition">
            <summary>
            The xml definition
            </summary>
        </member>
        <member name="T:Oculus.Services.Helpers.NVPair">
            <summary>
            Helper class representing a name/value pair
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.NVPair.Name">
            <summary>
            name of the item
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.NVPair.Value">
            <summary>
            value of the item
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.NVPair.DbType">
            <summary>
            The dbtype
            </summary>
        </member>
        <member name="M:Oculus.Services.Helpers.NVPair.#ctor(System.String,System.Object,System.Data.DbType)">
            <summary>
            Initialization constructor
            </summary>
            <param name="name">The name for the object</param>
            <param name="val">The value for the object</param>
            <param name="dbType">The databse type to use</param>
        </member>
        <member name="T:Oculus.Services.Helpers.LogRecord">
            <summary>
            Helper class used for loading log records
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.LogRecord.LogMessage">
            <summary>Get/Set the message for the log</summary>
        </member>
        <member name="P:Oculus.Services.Helpers.LogRecord.ExceptionMessage">
            <summary>Get/Set the exception message for the log</summary>
        </member>
        <member name="P:Oculus.Services.Helpers.LogRecord.DateLogged">
            <summary>Get/Set the date for the log</summary>
        </member>
        <member name="P:Oculus.Services.Helpers.LogRecord.ExceptionStackTrace">
            <summary>Get/Set the stack trace for the log</summary>
        </member>
        <member name="T:Oculus.Services.Helpers.SessionInfo">
            <summary>
            Helper struct for returning information about a session.
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.SessionInfo.LogonItemID">
            <summary>
            The id of the user
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.SessionInfo.Username">
            <summary>
            The username
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.SessionInfo.SessionID">
            <summary>
            The session id 
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.SessionInfo.Created">
            <summary>
            The time the session was created
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.SessionInfo.LastAccessed">
            <summary>
            the last time the session was accessed
            </summary>
        </member>
        <member name="T:Oculus.Services.Helpers.Transition">
            <summary>
            Represents a transition in a process
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Transition.MachineTemplateValue">
            <summary>
            The value used in template queues using the machine name
            </summary>
        </member>
        <member name="F:Oculus.Services.Helpers.Transition.BranchTemplateValue">
            <summary>
            The value used in template queues using the branch name
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Transition.IsLocal">
            <summary>
            Gets whether or not this transition is to a local item or not
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Transition.IsTemplated">
            <summary>
            Get or set the value indicating this transition is a templated transition with resolved values.
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Transition.Name">
            <summary>
            Get or set the name associated with this transition
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Transition.TargetQueue">
            <summary>
            Get or set the target queue for the transition
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Transition.TargetAppName">
            <summary>
            Get or set the target app name associated with this transition
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Transition.TargetActivity">
            <summary>
            Get or set the target activity associated with this transition
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Transition.TargetMachine">
            <summary>
            Get or set the target machine associated with this transition
            </summary>
        </member>
        <member name="P:Oculus.Services.Helpers.Transition.TargetActivityType">
            <summary>
            Get or set the target machine associated with this transition
            </summary>
        </member>
        <member name="M:Oculus.Services.Helpers.Transition.ResolveTemplatedValues(Oculus.Services.Helpers.Transition,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Resolves any templated values for a particular transition. This method handles the following substitutions:
            
              {branch} on a moniker -> finds the queue within the current branch and substitutes the machine 
              {machine} on a queue name -> substitute with the machine name where the first event occurred for the document
              
             Example: Moniker="queue://{branch}/{machine}_X" for server SVR_1 where doc was scanned on SCANPC_1 would first
             resolve to "queue://{branch}/SCANPC_1_X", then find the queue on the server in the branch (say it's on IDXPC_1),
             we get "queue://IDXPC_1/SCANPC_1_X"
            </summary>
            <param name="trans">The transition we're dealing with, can be modified</param>
            <param name="documentXml">The xml for the document</param>
            <param name="docMan">A namespace manager for the document xml</param>
            <param name="configXml">The config for the system</param>
            <param name="configMan">A namespace manager for the configuration</param>
        </member>
        <member name="M:Oculus.Services.Helpers.Transition.ResolveTemplateQueue(System.String@,System.String@,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Resolves the queue name, if it is templated
            </summary>
            <param name="queueName">The queue name, cannot be null</param>
            <param name="scanPc">The scan pc, can be null</param>
            <param name="documentXml">The doc xml, cannot be null</param>
            <param name="docMan">The doc ns manager, cannot be null</param>
            <returns>True if it was templated, false otherwise</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Transition.ResolveTemplateMachine(System.String@,System.String,System.String@,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Takes the machine name + queue and resolves any templated values, modifying the
            argument. The result will be true if the name contained a template, false otherwise
            </summary>
            <param name="machineName">The (possibly templated) machine name, cannot be null</param>
            <param name="queueName">The queue on the machine (used for resolving branch templates), cannot be null/empty if branch template</param>
            <param name="documentXml">The document xml, cannot be null</param>
            <param name="docMan">The document ns manager, cannot be null</param>
            <param name="configXml">The config xml, cannot be null</param>
            <param name="configMan">The config ns manager, cannot be null</param>
            <param name="scanPc">The scan pc (can be null)</param>
            <returns>True if the machine was templated, false otherwise</returns>
        </member>
        <member name="M:Oculus.Services.Helpers.Transition.CalculateOutgoingTransitions(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String)">
            <summary>
            Returns an array of outgoing transitions for the specified source location within the document xml.
            This method will AUTOMATICALLY evaluate any qualifiers and filter the results.
            </summary>
            <param name="documentXml">The document xml including process info</param>
            <param name="manager">namespace manager for the doc</param>
            <param name="sourceLocation">The location to calculate from</param>
            <returns>A list of transitions to be followed by the source location</returns>
        </member>
        <member name="T:Oculus.Services.AssemblyHandler">
            <summary>
            Handles loading of assemblies. This allows Oculus to load the "incorrect" assembly
            when it isn't presently installed on the machine.  ALL requests for assemblies go
            to the version available on the box.
            </summary>
        </member>
        <member name="M:Oculus.Services.AssemblyHandler.BindToCurrentAppDomain">
            <summary>
            Binds the assembly
            </summary>
        </member>
        <member name="M:Oculus.Services.AssemblyHandler.HandleAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Handles the assembly resolve event, when an assembly cannot be loaded
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The args</param>
            <returns>The assembly</returns>
        </member>
        <member name="T:Oculus.Services.Collections.WorkerThreadList">
            <summary>
            Collection class work worker threads
            </summary>
        </member>
        <member name="T:Oculus.Services.CoreHostingService">
            <summary>
            Handles management of all core services. Starting threads, etc, and setting
            database connections. This essentially wraps up all the old Comms functionality.
            </summary>
        </member>
        <member name="F:Oculus.Services.CoreHostingService.AcquisitionDatabaseID">
            <summary>
            The key for the acquisition database
            </summary>
        </member>
        <member name="F:Oculus.Services.CoreHostingService.LogDatabaseID">
            <summary>
            The key for the log database
            </summary>
        </member>
        <member name="F:Oculus.Services.CoreHostingService.AuditDatabaseID">
            <summary>
            The key for the audit database
            </summary>
        </member>
        <member name="F:Oculus.Services.CoreHostingService.AdminConfigDatabaseID">
            <summary>
            The key for the administration config (control centre) database
            </summary>
        </member>
        <member name="F:Oculus.Services.CoreHostingService.SecurityDatabaseID">
            <summary>
            The key for the security database
            </summary>
        </member>
        <member name="M:Oculus.Services.CoreHostingService.GetDatabaseEntry(System.String,System.Xml.XmlElement)">
            <summary>
            Gets a database entry for a specific key from config
            </summary>
            <param name="dbId">The database id</param>
            <param name="config">The configuration element to use</param>
            <returns>The database connection info</returns>
        </member>
        <member name="M:Oculus.Services.CoreHostingService.SetupWorkerThreads">
            <summary>
            Adds worker threads to the pool
            </summary>
        </member>
        <member name="M:Oculus.Services.CoreHostingService.LoadConfigurationConnections(System.Xml.XmlElement)">
            <summary>
            Loads the configuration as defined in the config element
            </summary>
            <param name="config">The configuration node to use</param>
        </member>
        <member name="M:Oculus.Services.CoreHostingService.Start(System.Xml.XmlElement)">
            <summary>
            Starts all services
            </summary>
            <param name="config">Our configuration node</param>
        </member>
        <member name="M:Oculus.Services.CoreHostingService.Stop">
            <summary>
            Stops all workers
            </summary>
        </member>
        <member name="T:Oculus.Services.RemoteLogListener">
            <summary>
            This can be used to listen remotely to logs on another machine. To do this, you'll need to
            initialize remoting within your application, then pass the listener through to the server
            with your custom port number.  From there, the listener will invoke the static event within
            your application
            </summary>
        </member>
        <member name="M:Oculus.Services.RemoteLogListener.#ctor">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="E:Oculus.Services.RemoteLogListener.LogReceived">
            <summary>
            Fires whenever a log is received. Use the log properties to retrieve the log information.
            </summary>
        </member>
        <member name="T:Oculus.Services.RemoteLogListener.LogEventHandler">
            <summary>
            Delegate for handling log events
            </summary>
            <param name="sender">The listener</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Oculus.Services.RemoteLogListener.InitializeRemoting(System.Int32)">
            <summary>
            Initializes a remoting server for the host application on the specified port
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:Oculus.Services.RemoteLogListener.CreateInstance">
            <summary>
            Creates an instance of the remote log listener for the current machine. You must
            initialize remoting PRIOR to this operation.
            </summary>
            <returns>The instance to pass through for log listening</returns>
        </member>
        <member name="M:Oculus.Services.RemoteLogListener.NotifyLog(System.String,System.String,Oculus.Services.LogLevel,System.Exception)">
            <summary>
            Invoked on a log notification
            </summary>
            <param name="source">The log source</param>
            <param name="message">The log message</param>
            <param name="logLevel">The log level</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:Oculus.Services.RemoteLogListener.Equals(System.Object)">
            <summary>
            Override the equals method so that our listener can be removed even when
            serialized. This means we can only have one listener per port per machine, 
            but that's fine.
            </summary>
            <param name="obj">The object to test for equality</param>
            <returns>True if the object is the same, false otherwise</returns>
        </member>
        <member name="M:Oculus.Services.RemoteLogListener.GetHashCode">
            <summary>
            Override for getting a hash code
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="T:Oculus.Services.RemoteLogListener.LogEventArgs">
            <summary>
            Helper class for log event arguments
            </summary>
        </member>
        <member name="P:Oculus.Services.RemoteLogListener.LogEventArgs.Source">
            <summary>Get/set the log source</summary>
        </member>
        <member name="P:Oculus.Services.RemoteLogListener.LogEventArgs.Message">
            <summary>Get/set the log message</summary>
        </member>
        <member name="P:Oculus.Services.RemoteLogListener.LogEventArgs.Level">
            <summary>Get/set the log level</summary>
        </member>
        <member name="P:Oculus.Services.RemoteLogListener.LogEventArgs.Exception">
            <summary>Get/set the log exception</summary>
        </member>
        <member name="T:Oculus.Services.RemoteLogListener.RemoteLogTransporter">
            <summary>
            Used for sending remote messages of logs
            </summary>
        </member>
        <member name="M:Oculus.Services.RemoteLogListener.RemoteLogTransporter.ReceiveLog(Oculus.Services.RemoteLogListener.LogEventArgs)">
            <summary>
            Receives the log from the remote machine and invokes the static event
            </summary>
            <param name="logArgs">The args to use</param>
        </member>
        <member name="T:Oculus.Services.UserConfig">
            <summary>
            Class which is used to save/load user settings from disk
            </summary>
        </member>
        <member name="P:Oculus.Services.UserConfig.PreviousUser">
            <summary>
            Get/Set the previous user logged into the machine
            </summary>
        </member>
        <member name="T:Oculus.Services.WorkerPool">
            <summary>
            Manages worker objects, timeouts, etc. For now, this uses a single thread for each
            worker.
            </summary>
        </member>
        <member name="P:Oculus.Services.WorkerPool.Locked">
            <summary>
            Get/set whether or not the pool is locked. Locking does not allow any new workers to be added. 
            NB adding a worker WILL NOT THROW AN EXCEPTION, it is simply ignored.
            </summary>
        </member>
        <member name="M:Oculus.Services.WorkerPool.AddWorker(Oculus.Services.WorkerThread)">
            <summary>
            Adds the specified worker to the worker pool. If we're already started, automatically starts
            the specified worker. If the pool is locked, the worker will be ignored.
            </summary>
            <param name="worker">The worker to add</param>
        </member>
        <member name="M:Oculus.Services.WorkerPool.Start">
            <summary>
            Run the start operation on all workers
            </summary>
            <exception cref="T:System.ApplicationException">If a second attempt is made to start the threads before stop is called</exception>
        </member>
        <member name="M:Oculus.Services.WorkerPool.Stop">
            <summary>
            Stops all workers
            </summary>
        </member>
        <member name="T:Oculus.Services.Workers.ProcessCaptureWorker">
            <summary>
            Worker component for processing capture steps
            </summary>
        </member>
        <member name="F:Oculus.Services.Workers.ProcessCaptureWorker.m_shouldStop">
            <summary>
            Flag indicating we should stop doing our work
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.ProcessCaptureWorker.NotifyStop">
            <summary>
            Indicates we should stop doing whatever we're doing
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.ProcessCaptureWorker.Run">
            <summary>
            Runs the logic for this worker. Iterates over document records which are destined for storage and 
            submits them to the storage module.
            
            Also checks each process defined in our system against timeouts in their queues.
            These are process-level timeouts which cause documents to automatically be 
            forwarded to the next step in the process.
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.ProcessCaptureWorker.ProcessDocumentCapture(Oculus.Services.Helpers.DocumentRecord)">
            <summary>
            Initiates the document process against a capture (i.e. no-op) step
            </summary>
            <param name="doc">The record to process</param>
        </member>
        <member name="T:Oculus.Services.Workers.SecurityWorker">
            <summary>
            Worker component for managing aspects of the security subsystem. For now,
            this only includes expiring timed out sessions
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.SecurityWorker.NotifyStop">
            <summary>
            Indicates we should stop doing whatever we're doing
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.SecurityWorker.Run">
            <summary>
            Runs the logic for this worker. Each entry in the log table that's older than the specified
            period will be deleted.
            </summary>
        </member>
        <member name="T:Oculus.Services.Workers.DBCleanupWorker">
            <summary>
            Worker component for returning allocated documents from a queue back the the queue for processing
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.DBCleanupWorker.NotifyStop">
            <summary>
            Indicates we should stop doing whatever we're doing
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.DBCleanupWorker.Run">
            <summary>
            Runs the logic for this worker. Each entry in the log table that's older than the specified
            period will be deleted.
            </summary>
        </member>
        <member name="T:Oculus.Services.Workers.DeploymentWorker">
            <summary>
            Worker component for handling deployment tasks (i.e. pushing config to new machines and doing internal notification).
            </summary>
        </member>
        <member name="F:Oculus.Services.Workers.DeploymentWorker.m_shouldStop">
            <summary>
            Flag indicating we should stop doing our work
            </summary>
        </member>
        <member name="F:Oculus.Services.Workers.DeploymentWorker.m_lastConfigPull">
            <summary>
            The time since our last config pull, an initial value of MinValue ensures
            we run the pull on startup
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.DeploymentWorker.NotifyStop">
            <summary>
            Indicates we should stop doing whatever we're doing
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.DeploymentWorker.Run">
            <summary>
            Runs the logic for this worker. Each record in the deployment table listed as waiting will be contacted and deployed
            to over the native comms port.
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.DeploymentWorker.DeployToSelf(System.Xml.XmlDocument,Oculus.Services.LocalDeploymentStatus)">
            <summary>
            Special case where we're deploying to ourselves.  We've already got the current configuration, 
            we just need to notify our plug-ins it's here.
            </summary>
            <param name="config">The configuration to deploy</param>
            <param name="status">The current deployment status</param>
            <returns>True if successful, false if not and any exception was handled</returns>
        </member>
        <member name="M:Oculus.Services.Workers.DeploymentWorker.DeployToMachine(System.Xml.XmlDocument,System.String)">
            <summary>
            Talks to the target machine according to its machine type. That's port 80 on servers, CommsNative on 
            workstations.
            </summary>
            <param name="config">The configuration to deploy</param>
            <param name="machineName">The machine to deploy to</param>
            <returns>True if deployment was successful, false if not and exception raised was handled.</returns>
        </member>
        <member name="M:Oculus.Services.Workers.DeploymentWorker.CopyPackages(System.Xml.XmlDocument)">
            <summary>
            Copies all files from packages to a local _Packages folder
            </summary>
            <remarks>True if all were successful, false if not</remarks>
        </member>
        <member name="M:Oculus.Services.Workers.DeploymentWorker.InstallPackages(System.Xml.XmlDocument)">
            <summary>
            Installs all necessary packages
            </summary>
            <param name="config">The new configuration</param>
            <returns>true if all were successful, false if not</returns>
        </member>
        <member name="M:Oculus.Services.Workers.DeploymentWorker.InstallPackage(System.Guid,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,Oculus.Util.Collections.GuidDictionary,System.String,System.String)">
            <summary>
            Installs the specified package, including any dependencies
            </summary>
            <param name="packageID">The package to install</param>
            <param name="config">Current configuration</param>
            <param name="man">Convenience namespace manager</param>
            <param name="installedItems">Items we've already installed this round (to prevent infinite loops on circular ref, duplicates)</param>
            <param name="ocuInstallDir">The oculus installation directory</param>
            <param name="ocuGroupName">The oculus group name</param>
        </member>
        <member name="M:Oculus.Services.Workers.DeploymentWorker.PackageFileRecordPath(System.Guid,System.String)">
            <summary>
            Returns the path of the 0-length file indicating whether or not this package has been installed against this touch number
            </summary>
            <param name="packageID">The package in question</param>
            <param name="touchNo">The touch num for the package</param>
            <returns>The full path to the file</returns>
        </member>
        <member name="M:Oculus.Services.Workers.DeploymentWorker.RunConfigPull">
            <summary>
            There are many instances where configuration may need to be pulled from a server instead of pushed
            to a workstation. This method will periodically poll the config server and check there isn't a new
            version of configuration available.
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.DeploymentWorker.ShouldRunConfigPull">
            <summary>
            Determines whether or not we should run a pull operation
            </summary>
            <returns>True if we should do it, false otherwise</returns>
        </member>
        <member name="T:Oculus.Services.Workers.NativeStoreWorker">
            <summary>
            Worker component for submitting documents to the engine component for storage
            </summary>
        </member>
        <member name="F:Oculus.Services.Workers.NativeStoreWorker.m_shouldStop">
            <summary>
            Flag indicating we should stop doing our work
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.NativeStoreWorker.NotifyStop">
            <summary>
            Indicates we should stop doing whatever we're doing
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.NativeStoreWorker.Run">
            <summary>
            Runs the logic for this worker. Iterates over document records which are destined for storage and 
            submits them to the storage module.
            </summary>
        </member>
        <member name="T:Oculus.Services.Workers.ProcessPushWorker">
            <summary>
            Worker component for submitting documents to push oculets. Also automatically 
            forwards items stuck in a queue for too long on to the next step in their process
            </summary>
        </member>
        <member name="F:Oculus.Services.Workers.ProcessPushWorker.m_shouldStop">
            <summary>
            Flag indicating we should stop doing our work
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.ProcessPushWorker.NotifyStop">
            <summary>
            Indicates we should stop doing whatever we're doing
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.ProcessPushWorker.Run">
            <summary>
            Runs the logic for this worker. Iterates over document records which are destined for storage and 
            submits them to the storage module.
            
            Also checks each process defined in our system against timeouts in their queues.
            These are process-level timeouts which cause documents to automatically be 
            forwarded to the next step in the process.
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.ProcessPushWorker.ProcessDocumentPush(Oculus.Services.Helpers.DocumentRecord)">
            <summary>
            Runs the document against an oculet.
            </summary>
            <param name="doc">The record to process</param>
        </member>
        <member name="M:Oculus.Services.Workers.ProcessPushWorker.CallNativeOculet(Oculus.Acquisition.Oculets.Interfaces.INativeOculet,Oculus.Services.Helpers.DocumentRecord,Oculus.Services.Helpers.FragmentRecord[])">
            <summary>
            Calls a native oculet for the document + fragments
            </summary>
            <param name="oculet">The oculet to call</param>
            <param name="doc">The document to use</param>
            <param name="frags">The fragments to use</param>
        </member>
        <member name="T:Oculus.Services.Workers.PushSchedulerWorker">
            <summary>
            Worker component for taking documents which are marked "Processed - Awaiting push calculation" and creates
            the push entries for that document.
            </summary>
        </member>
        <member name="F:Oculus.Services.Workers.PushSchedulerWorker.m_shouldStop">
            <summary>
            Flag indicating we should stop doing our work
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.PushSchedulerWorker.NotifyStop">
            <summary>
            Indicates we should stop doing whatever we're doing
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.PushSchedulerWorker.Run">
            <summary>
            Runs the logic for this worker. Eventually, we can get a WHOLE LOT more sophisticated with our pre-scheduling.
            For now, we transfer everything as an always-on
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.PushSchedulerWorker.ProcessRecord(Oculus.Services.Helpers.DocumentRecord)">
            <summary>
            Actually processes the schedules for the document
            </summary>
            <param name="doc">The doument to process</param>
        </member>
        <member name="T:Oculus.Services.Workers.QueueRestoreWorker">
            <summary>
            Worker component for returning allocated documents from a queue back 
            the the queue for processing. 
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.QueueRestoreWorker.NotifyStop">
            <summary>
            Indicates we should stop doing whatever we're doing
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.QueueRestoreWorker.Run">
            <summary>
            Runs the logic for this worker. Each entry in the document table which has an allocation date beyond the timeout
            will be cleared and returned to the queue for allocation.
            </summary>
        </member>
        <member name="T:Oculus.Services.Workers.TransportWorker">
            <summary>
            Worker component for forwarding fragments to other servers
            </summary>
        </member>
        <member name="F:Oculus.Services.Workers.TransportWorker.m_shouldStop">
            <summary>
            Flag indicating we should stop doing our work
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.TransportWorker.NotifyStop">
            <summary>
            Indicates we should stop doing whatever we're doing
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.TransportWorker.Run">
            <summary>
            Runs the logic for this worker. Iterates over document records which are destined for storage and 
            submits them to the storage module.
            </summary>
        </member>
        <member name="M:Oculus.Services.Workers.TransportWorker.TransportDocument(Oculus.Services.Helpers.DocumentRecord)">
            <summary>
            Ships the document and all its fragments to the target server
            </summary>
            <param name="doc">The document to ship across to the other server</param>
        </member>
        <member name="T:Oculus.Services.WorkerThread">
            <summary>
            Helper class which runs a thread against one of the workers in the comms library
            </summary>
        </member>
        <member name="P:Oculus.Services.WorkerThread.WorkerName">
            <summary>
            provides the name of the worker
            </summary>
        </member>
        <member name="M:Oculus.Services.WorkerThread.#ctor(Oculus.Services.Interfaces.IWorker,System.Int32)">
            <summary>
            Create a worker thread that runs the worker object forever in a separate thread
            and waits the specified timeout in between calls.
            </summary>
            <param name="worker">The worker to run</param>
            <param name="timeout">The amount of time to wait, in seconds</param>
        </member>
        <member name="M:Oculus.Services.WorkerThread.Start">
            <summary>
            Starts the thread
            </summary>
        </member>
        <member name="M:Oculus.Services.WorkerThread.Stop">
            <summary>
            Sends a notification to the worker it's time to stop
            </summary>
        </member>
        <member name="M:Oculus.Services.WorkerThread.RunWorker">
            <summary>
            Runs the worker ad infinitum until told to do otherwise
            </summary>
        </member>
        <member name="T:Oculus.Searching.Collections.SearchResultIndexDictionary">
            <summary>
            Collection of search results
            </summary>
        </member>
        <member name="M:Oculus.Searching.Collections.SearchResultIndexDictionary.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Searching.Collections.SearchResultIndexDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Searching.Collections.SearchCriteriaItemList">
            <summary>
            Collection of search criteria
            </summary>
        </member>
        <member name="M:Oculus.Searching.Collections.SearchCriteriaItemList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Searching.Collections.SearchCriteriaItemList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Searching.Collections.SearchResultList">
            <summary>
            Collection of search results
            </summary>
        </member>
        <member name="M:Oculus.Searching.Collections.SearchResultList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Searching.Collections.SearchResultList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Searching.Collections.SortIndexList">
            <summary>
            Collection of sort indexes
            </summary>
        </member>
        <member name="M:Oculus.Searching.Collections.SortIndexList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Searching.Collections.SortIndexList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Searching.Collections.SearchResultDocumentList">
            <summary>
            Collection of search results
            </summary>
        </member>
        <member name="M:Oculus.Searching.Collections.SearchResultDocumentList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Searching.Collections.SearchResultDocumentList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="M:Oculus.Searching.Collections.SearchResultDocumentList.ToStorageDocumentList">
            <summary>
            Creates a list of storage documents from the search result documents. Please
            note, any single error will abort the entire operation
            </summary>
            <returns>The set of storage documents</returns>
        </member>
        <member name="T:Oculus.Searching.Interfaces.ISearchSqlGenerator">
            <summary>
            Interface used to automatically generate sql statements for searches. This allows a standard format
            for plug-ins which doesn't require a full recoding of logic for generating SQL for a search.
            </summary>
        </member>
        <member name="M:Oculus.Searching.Interfaces.ISearchSqlGenerator.Initialize(Oculus.Searching.SearchCriteria)">
            <summary>
            Initialize the generator with the specified search criteria. Called before any other
            methods.
            </summary>
            <param name="searchCriteria">The criteria we'll be generating sql against</param>
        </member>
        <member name="M:Oculus.Searching.Interfaces.ISearchSqlGenerator.GetSortFieldReference(System.String)">
            <summary>
            For the specified field, return the column reference (e.g. Table1.FieldX)
            </summary>
            <param name="fieldName">
            The field to sort against, doc qualifiers will be of the form [NAME] in brackets, otherwise it will be an index name
            </param>
            <returns>The column reference to sort against, or null if it should be ignored</returns>
        </member>
        <member name="M:Oculus.Searching.Interfaces.ISearchSqlGenerator.AddStandardColumns(Oculus.Util.Collections.StringList)">
            <summary>
            Add any standard columns to retrieve, these will be included in the list of columns
            we select
            </summary>
            <param name="columns">The list of columns to add to</param>
        </member>
        <member name="M:Oculus.Searching.Interfaces.ISearchSqlGenerator.GetIndexColumnReference(System.String)">
            <summary>
            Get the fully qualified column reference for the specified index.
            </summary>
            <param name="indexName">The name of the index we're going to retrieve</param>
            <returns>The column reference, or null if it should be ignored</returns>
        </member>
        <member name="M:Oculus.Searching.Interfaces.ISearchSqlGenerator.GetSelectTables">
            <summary>
            Gets the COMPLETE set of tables we're going to be selecting against. Include any aliases.
            </summary>
            <returns>The list of tables to select from</returns>
        </member>
        <member name="M:Oculus.Searching.Interfaces.ISearchSqlGenerator.GetDefaultWhereClause">
            <summary>
            Gets any default where clause. DO NOT include the WHERE keyword.
            </summary>
            <returns>The default where clause, or null if there is none</returns>
        </member>
        <member name="M:Oculus.Searching.Interfaces.ISearchSqlGenerator.GetColumnReference(System.String)">
            <summary>
            Get the fully qualified column reference for the field. Can be index or document field.
            </summary>
            <param name="fieldName">The field name</param>
            <returns>The column name. If null is returned, this field will be ignored</returns>
        </member>
        <member name="M:Oculus.Searching.Interfaces.ISearchSqlGenerator.GetParameterName(Oculus.Searching.SearchCriteriaItem)">
            <summary>
            Get the parameter name for the field. Can be index or document field.
            This would also be a good time to store the parameter name and the item locally so 
            you can use them later, e.g. when setting parameters on your DbCommand.
            </summary>
            <param name="item">The item to retrieve a search for</param>
            <returns>The parameter name. Cannot be null, as GetColumnReference will be called first</returns>
        </member>
        <member name="M:Oculus.Searching.Interfaces.ISearchSqlGenerator.GetArchiveWhereClause(Oculus.Searching.ArchiveState)">
            <summary>
            Gets the relevant where clause for the archive state
            </summary>
            <param name="archiveState">The state requested, will never be "Any"</param>
            <returns>The where clause to use</returns>
        </member>
        <member name="T:Oculus.Searching.SearchCriteriaItem">
            <summary>
            Represents a single criteria against which a search can be performed.
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchCriteriaItem.#ctor">
            <summary>
            Creates a default instance of the object
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchCriteriaItem.#ctor(System.String,Oculus.Searching.SearchCriteriaOp,System.String)">
            <summary>
            Create an instance initialized with the specified values.
            </summary>
            <param name="indexName">The index</param>
            <param name="operation">The operation</param>
            <param name="value">The value</param>
        </member>
        <member name="P:Oculus.Searching.SearchCriteriaItem.IndexName">
            <summary>
            Get/set the index name to query
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchCriteriaItem.Operation">
            <summary>
            Get/set the operation to perform
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchCriteriaItem.Value">
            <summary>
            Get/set the value to compare to
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchCriteriaItem.ToString">
            <summary>
            Returns a string representation of the object
            </summary>
            <returns>The string</returns>
        </member>
        <member name="M:Oculus.Searching.SearchCriteriaItem.GetSymbolForOp(Oculus.Searching.SearchCriteriaOp)">
            <summary>
            Returns the symbolic representation of the criteria operation
            </summary>
            <param name="op">The operation to convert</param>
            <returns>The symbolic representation</returns>
        </member>
        <member name="M:Oculus.Searching.SearchCriteriaItem.GetOpForSymbol(System.String)">
            <summary>
            Returns the operation for the specified symbol
            </summary>
            <param name="symbol">The symbol to convert</param>
            <returns>The operation</returns>
        </member>
        <member name="T:Oculus.Searching.SortIndex">
            <summary>
            Represents a sort field for searching.
            </summary>
        </member>
        <member name="M:Oculus.Searching.SortIndex.#ctor">
            <summary>
            Creates a default instance of the object
            </summary>
        </member>
        <member name="M:Oculus.Searching.SortIndex.#ctor(System.String,Oculus.Searching.SortDirection)">
            <summary>
            Create an instance initialized with the specified values
            </summary>
            <param name="fieldName">The field to sort on</param>
            <param name="direction">The direction to sort</param>
        </member>
        <member name="P:Oculus.Searching.SortIndex.FieldName">
            <summary>
            Get/Set the field name to sort on
            </summary>
        </member>
        <member name="P:Oculus.Searching.SortIndex.SortDirection">
            <summary>
            Get/Set the direction to sort
            </summary>
        </member>
        <member name="T:Oculus.Searching.SortDirection">
            <summary>
            Sort direction for searching
            </summary>
        </member>
        <member name="F:Oculus.Searching.SortDirection.Ascending">
            <summary>Ascending sort</summary>
        </member>
        <member name="F:Oculus.Searching.SortDirection.Descending">
            <summary>Descending sort</summary>
        </member>
        <member name="T:Oculus.Searching.SearchCriteriaOp">
            <summary>
            Operations for search criteria comparisons
            </summary>
        </member>
        <member name="F:Oculus.Searching.SearchCriteriaOp.Equal">
            <summary>Operation '='</summary>
        </member>
        <member name="F:Oculus.Searching.SearchCriteriaOp.NotEqual">
            <summary>Operation '!='</summary>
        </member>
        <member name="F:Oculus.Searching.SearchCriteriaOp.GreaterThan">
            <summary>Operation '&gt;'</summary>
        </member>
        <member name="F:Oculus.Searching.SearchCriteriaOp.LessThan">
            <summary>Operation '&lt;'</summary>
        </member>
        <member name="F:Oculus.Searching.SearchCriteriaOp.GreaterThanOrEqualTo">
            <summary>Operation '&gt;='</summary>
        </member>
        <member name="F:Oculus.Searching.SearchCriteriaOp.LessThanOrEqualTo">
            <summary>Operation '&lt;='</summary>
        </member>
        <member name="T:Oculus.Searching.BooleanOp">
            <summary>
            Boolean operators for searching
            </summary>
        </member>
        <member name="F:Oculus.Searching.BooleanOp.And">
            <summary>AND operation</summary>
        </member>
        <member name="F:Oculus.Searching.BooleanOp.Or">
            <summary>OR operation</summary>
        </member>
        <member name="T:Oculus.Searching.ArchiveState">
            <summary>
            Options for archive state when searching
            </summary>
        </member>
        <member name="F:Oculus.Searching.ArchiveState.Any">
            <summary>Searching for any items</summary>
        </member>
        <member name="F:Oculus.Searching.ArchiveState.NotArchived">
            <summary>Searching for non-archived items</summary>
        </member>
        <member name="F:Oculus.Searching.ArchiveState.Archived">
            <summary>Searching for archived items</summary>
        </member>
        <member name="T:Oculus.Searching.SearchCriteria">
            <summary>
            Represents a set of criteria against which a search can be performed. Supports a number 
            of options including the maximum number of results to retrieve, sorting, etc.
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchCriteria.#ctor">
            <summary>
            Creates a default instance of the object
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchCriteria.ArchiveState">
            <summary>
            Get/Set archive state
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchCriteria.Wildcard">
            <summary>
            Get/Set the wildcard character
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchCriteria.MaxResults">
            <summary>
            Get/Set the maximum number of results to retrieve
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchCriteria.GlobalOp">
            <summary>
            Get/Set the boolean operator used for the criteria of this search
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchCriteria.ProfileContextId">
            <summary>
            Get/Set the profile context id to be used for the search. Must be a valid context. 
            Upon setting, the IndexesToRetrieve collection will be populated.
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchCriteria.ProfileId">
            <summary>
            Get the profile id for this search criteria, auto-populated when setting the profile context
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchCriteria.SortIndexes">
            <summary>
            Get the set of indexes to sort on, if null will default to empty list
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchCriteria.IndexesToRetrieve">
            <summary>
            Gets the set of indexes to retrieve (as defined by the profile context)
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchCriteria.Criteria">
            <summary>
            Gets the set of criteria for this object. If null will default to an empty list
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchCriteria.ToSql(Oculus.Searching.Interfaces.ISearchSqlGenerator)">
            <summary>
            This is a major plug-in helper designed to 
            </summary>
            <param name="pluginProvider">The provider which will contain implementations specific for each plug-in</param>
            <returns>The sql to use for this search, specific to the plugin provider</returns>
        </member>
        <member name="M:Oculus.Searching.SearchCriteria.ValidateObjectIsReadyToSearch">
            <summary>
            Makes sure we have enough values populated that we're ready to search.
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchCriteria.GenerateSql(Oculus.Searching.Interfaces.ISearchSqlGenerator,Oculus.Util.Collections.StringList,Oculus.Util.Collections.StringList,Oculus.Util.Collections.StringList)">
            <summary>
            Generates the SQL from the specified set of prepopulated collections
            </summary>
            <param name="pluginProvider">The provider</param>
            <param name="qualifiers">The set of qualifiers</param>
            <param name="columns">The set of columns to select</param>
            <param name="tablesToSelectFrom">The set of tables to select from</param>
            <returns>The full sql statement</returns>
        </member>
        <member name="M:Oculus.Searching.SearchCriteria.ValidateSelectData(Oculus.Util.Collections.StringList,Oculus.Util.Collections.StringList)">
            <summary>
            Verifies basic data before we return our SQL statement
            </summary>
            <param name="columns">The columns we'll be selecting</param>
            <param name="tablesToSelectFrom">The tables we'll be selecting from</param>
        </member>
        <member name="M:Oculus.Searching.SearchCriteria.AddIndexFields(Oculus.Searching.Interfaces.ISearchSqlGenerator,Oculus.Util.Collections.StringList)">
            <summary>
            Adds index fields to the collection of columns.
            </summary>
            <param name="pluginProvider">The provider</param>
            <param name="columns">The columns to select we'll be adding to</param>
        </member>
        <member name="M:Oculus.Searching.SearchCriteria.EvaluateQualifiers(Oculus.Searching.Interfaces.ISearchSqlGenerator,Oculus.Util.Collections.StringList)">
            <summary>
            Evaluate the set of qualifiers, any qualifiers will be added to the parameter collection
            </summary>
            <param name="pluginProvider">The provider</param>
            <param name="qualifiers">The collection to carry our qualifiers</param>
        </member>
        <member name="M:Oculus.Searching.SearchCriteria.IsLikeComparison(Oculus.Searching.SearchCriteriaItem)">
            <summary>
            Returns true if this should be a like comparison, false otherwise
            </summary>
            <param name="item">The item to check</param>
            <returns>True for a like comparison, false otherwise</returns>
        </member>
        <member name="M:Oculus.Searching.SearchCriteria.EvaluateCriterion(Oculus.Searching.Interfaces.ISearchSqlGenerator,Oculus.Searching.SearchCriteriaItem)">
            <summary>
            Gets a sql string representing the criteria item
            </summary>
            <param name="pluginProvider">The provider</param>
            <param name="item">The item to convert to a SQL qualifier</param>
            <returns>The sql string for the criterion, or null if it can't be done</returns>
        </member>
        <member name="M:Oculus.Searching.SearchCriteria.GetOpForCode(Oculus.Searching.SearchCriteriaOp)">
            <summary>
            Gets the corresponding SQL operation for the criteria operation
            </summary>
            <param name="searchCriteriaOp">The op to convert</param>
            <returns>The SQL value for the operation</returns>
        </member>
        <member name="M:Oculus.Searching.SearchCriteria.GetOrderByClause(Oculus.Searching.Interfaces.ISearchSqlGenerator)">
            <summary>
            Generates the order by clause for the sql statement
            </summary>
            <param name="pluginProvider">The provider</param>
            <returns>The clause, or null if there is no sorting</returns>
        </member>
        <member name="T:Oculus.Searching.SearchResultDocument">
            <summary>
            Indicates a single record in a search result
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchResultDocument.#ctor">
            <summary>
            Create a default instance of the object
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchResultDocument.#ctor(System.String,System.String)">
            <summary>
            Create an instance of the object with the specified values. The moniker
            is automatically populated with the current machine, doc id, and plugin id (library).
            </summary>
            <param name="documentId">The document</param>
            <param name="pluginId">The plug-in id</param>
        </member>
        <member name="P:Oculus.Searching.SearchResultDocument.Moniker">
            <summary>
            Get/Set the moniker for the result.
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchResultDocument.Indexes">
            <summary>
            Get the collection of indexes for this item
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchResultDocument.GetSchema">
            <summary>
            Gets the schema, not implemented here
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Searching.SearchResultDocument.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the xml for our object
            </summary>
            <param name="reader">The reader</param>
        </member>
        <member name="M:Oculus.Searching.SearchResultDocument.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes the xml for our object
            </summary>
            <param name="writer">The writer</param>
        </member>
        <member name="T:Oculus.Searching.SearchResult">
            <summary>
            Search results are returned when searching from either the Search object or individual plug-ins.
            Search results support sorting, but it should be noted each sort field requires the data from
            each plug-in to conform to the required datatype (e.g. int fields need to be ints) or the sort
            will be unable to sort against the value.
            
            Results consist of a collection of mini-document records, containing the document moniker and 
            the requested indexes for the document.
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchResult.#ctor">
            <summary>
            Creates an unlinked search result
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchResult.#ctor(Oculus.Searching.SearchCriteria)">
            <summary>
            Creates a search result linked to the specified search. Please note this object
            *does not* carry a reference to the criteria
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchResult.#ctor(Oculus.Searching.SearchResult)">
            <summary>
            Creates a new search result based on the template
            </summary>
            <param name="template">The template</param>
        </member>
        <member name="F:Oculus.Searching.SearchResult.MonikerColumn">
            <summary>
            The name of the column containing document monikers
            </summary>
        </member>
        <member name="F:Oculus.Searching.SearchResult.ResultDocColumn">
            <summary>
            The name of the column containing the actual SearchResultDocument object
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchResult.PluginExceptions">
            <summary>
            Get the set of plug-in exceptions
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchResult.ConfirmedRecords">
            <summary>
            Get/Set the total number of confirmed records (e.g. guaranteed items, as items can be in flux
            while sorting).  This is only calculated while calling the AddBatch method for unsorted results.  
            Otherwise, it must be set externally.
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchResult.Count">
            <summary>
            The number of results in the result set
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchResult.Item(System.Int32)">
            <summary>
            Gets the result at the specified index
            </summary>
            <param name="index">The index to retrieve</param>
            <returns>The document</returns>
        </member>
        <member name="P:Oculus.Searching.SearchResult.IsSorted">
            <summary>
            Get whether or not this result is sorted
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchResult.IsClosed">
            <summary>
            Get whether or not this result has been closed (i.e. no more results will be added)
            </summary>
        </member>
        <member name="P:Oculus.Searching.SearchResult.MaxRecords">
            <summary>
            Get the maximum number of records for the search - this enforced only within the
            search logic, not here
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchResult.SetupDataTable">
            <summary>
            Sets up the data table for use within the object
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchResult.Initialize(Oculus.Searching.SearchCriteria)">
            <summary>
            This method sets up sort columns, etc
            </summary>
            <param name="searchCriteria">The search criteria to use</param>
            <exception cref="T:System.ArgumentException">If a sort column is not valid for the profile context</exception>
        </member>
        <member name="M:Oculus.Searching.SearchResult.AddExceptionForPlugin(System.Exception,System.String)">
            <summary>
            Adds a plug-in exception to the list of errors.
            </summary>
            <param name="exception">The exception to add</param>
            <param name="pluginId">The plug-in to add it for</param>
        </member>
        <member name="M:Oculus.Searching.SearchResult.Close">
            <summary>
            Closes the result set, finalizes any calculated values.
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchResult.Add(Oculus.Searching.SearchResultDocument)">
            <summary>
            Adds the search result to the list
            </summary>
            <param name="doc">Our document, cannot be null</param>
        </member>
        <member name="M:Oculus.Searching.SearchResult.ToDataTable">
            <summary>
            Converts the search result to a data table. All columns are strings types, and
            the moniker is stored in the _Moniker column. Data table name is always "SearchResult"
            The SearchResultDocument object is *not* in the returned data table
            </summary>
            <returns>A data table representing the result set</returns>
        </member>
        <member name="M:Oculus.Searching.SearchResult.ToDataTable(System.Boolean)">
            <summary>
            Converts the search result to a data table. All columns are strings types, and
            the moniker is stored in the _Moniker column. Data table name is always "SearchResult"
            </summary>
            <param name="includeDocs">If true, a column named </param>
            <returns>A data table representing the result set</returns>
        </member>
        <member name="M:Oculus.Searching.SearchResult.RemoveAt(System.Int32)">
            <summary>
            Removes the document at the specified index
            </summary>
            <param name="index">The index of the document to remove</param>
        </member>
        <member name="M:Oculus.Searching.SearchResult.Add(Oculus.Searching.SearchResult)">
            <summary>
            Adds a single search result as part of a batch
            </summary>
            <param name="result">The search results to add</param>
            <returns>The batch result info, or null if this isn't a sorted set of data</returns>
        </member>
        <member name="M:Oculus.Searching.SearchResult.AddBatch(Oculus.Searching.Collections.SearchResultList)">
            <summary>
            Internal method supporting collation of sorted search results. Adding via this method
            also calculates the number of confirmed records.
            </summary>
            <param name="searchResults">The list of results to add</param>
            <returns>The results of the batch add</returns>
        </member>
        <member name="M:Oculus.Searching.SearchResult.GetRank(Oculus.Searching.SearchResultDocument,System.Int32)">
            <summary>
            Retrieves the rank (i.e. index) of the specified document in the sorted
            list of results. Please note this is a reference-based comparison.
            </summary>
            <param name="searchResultDocument">The doc to find, if null, int.MaxValue will be returned</param>
            <param name="prevRank">The previous rank of this item, we will only look forward from this location</param>
            <returns>The position of the record, or int.MaxValue if it can't be found</returns>
        </member>
        <member name="M:Oculus.Searching.SearchResult.Finalise">
            <summary>
            To be called when no more results will be added to this result set
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchResult.FetchResults(System.Int32,System.Int32)">
            <summary>
            Fetches the specified results into a new object, includes sorting and exceptions.
            Will only return CONFIRMED records.
            </summary>
            <param name="firstRecord">The first record to retrieve</param>
            <param name="numRecords">The maximum number of records to retrieve</param>
            <returns>The result</returns>
        </member>
        <member name="T:Oculus.Searching.SearchResult.AddBatchResultList">
            <summary>Collection class for AddBatchResult</summary>
        </member>
        <member name="T:Oculus.Searching.SearchResult.AddBatchResult">
            <summary>
            Used when doing sorted searches
            </summary>
        </member>
        <member name="F:Oculus.Searching.SearchResult.AddBatchResult.Document">
            <summary>
            The highest ranking document for a batch add (within a single plug-in)
            </summary>
        </member>
        <member name="F:Oculus.Searching.SearchResult.AddBatchResult.Rank">
            <summary>
            The index within the results of the document
            </summary>
        </member>
        <member name="T:Oculus.Searching.Search">
            <summary>
            Contains logic for searching. A search object can handle a single search at any given time.
            Please note that once a new search is performed, previous searches against the same object cannot
            retrieve additional results. Should you require multiple concurrent searches, use multiple instances
            of this class.
            
            This class performs a synchronous search
            </summary>
        </member>
        <member name="M:Oculus.Searching.Search.GetSearchPlugins(System.Guid)">
            <summary>
             Returns an array of plug-in items that correspond to the profile id,
            </summary>
            <param name="profileContextId">
             The profile context id we're interested in.
            </param>
            <returns>The list of plug-ins to use for the profile</returns>
        </member>
        <member name="M:Oculus.Searching.Search.ReleaseActiveSearch">
            <summary>
             Releases search resources on all plug-ins, clears member fields
            </summary>
        </member>
        <member name="M:Oculus.Searching.Search.InitiateRetrieval(Oculus.Searching.SearchCriteria)">
            <summary>
             Retrieves and collates the next n results
            </summary>
            <param name="searchCriteria">
             The search criteris, at this point really just used for sort columns
            </param>        
        </member>
        <member name="M:Oculus.Searching.Search.ReleaseActivePlugins">
             <summary>
              Releases search resources on all plug-ins and erases active plug-in array
            
              This is a thread-safe operation.
             </summary>
        </member>
        <member name="M:Oculus.Searching.Search.ReleasePlugin(Oculus.Plugins.Interfaces.ISearchPlugin)">
            <summary>
             Releases the active search and resources associated with the plug-in
            </summary>
        </member>
        <member name="M:Oculus.Searching.Search.InitiateSearchInternal">
             <summary>
             This method is the entry point for the search thread.
             
             Retrieves search results from the plug-ins and combines their results until results are exhausted
             or the maximum number of results is retrieved
            
             This method is only accessed within the created search thread.
             </summary>
        </member>
        <member name="M:Oculus.Searching.Search.CollateSortedSearchResults">
             <summary>
              Retrieves search results from the plug-ins when sorting *is* involved.
            
              This method is only accessed within the locally created thread.
             </summary>
        </member>
        <member name="M:Oculus.Searching.Search.RecalculateRanks(Oculus.Searching.SearchResult.AddBatchResultList)">
            <summary>
            Recalculates the ranks on the set of batch results
            </summary>
            <param name="batchResults">The results</param>
        </member>
        <member name="M:Oculus.Searching.Search.CalculateLowRankIndex(Oculus.Searching.SearchResult.AddBatchResultList)">
            <summary>
            Within the set of results, finds the index which has the lowest ranking row. This enables
            us to continue retrieving items from that plug-in, as they are the next to go into our
            sorted list.
            
            Also has a side effect of setting the ConfirmedRecords on the active result object.
            </summary>
            <param name="batchResults">The results to examine</param>
            <returns>The index of the lowest ranking item</returns>
        </member>
        <member name="M:Oculus.Searching.Search.RetrieveInitialResults">
            <summary>
            Retrieves the first set of results for each plug-in, used in sorted searches
            </summary>
        </member>
        <member name="M:Oculus.Searching.Search.CollateUnsortedSearchResults">
             <summary>
              Retrieves search results from the plug-ins when no sorting is involved.
            
              This method is only accessed within the locally created thread.
             </summary>
        </member>
        <member name="M:Oculus.Searching.Search.RetrieveUnsortedResultsForPlugin(System.Int32,Oculus.Plugins.Interfaces.ISearchPlugin)">
            <summary>
            Retrieves all results for the specified plug-in until it is exhausted, generates an error,
            or the overall result set has reached the threshold value.
            </summary>
            <param name="recordThreshold">The max number of records to retrieve</param>
            <param name="plugin">The plug-in to retrieve from</param>
        </member>
        <member name="M:Oculus.Searching.Search.NewSearch(Oculus.Searching.SearchCriteria)">
            <summary>
             Initiates a search for documents corresponding to the search criteria.
            </summary>
            <param name="searchCriteria">
             The criteria for the search. Cannot be null
            </param>
            <exception cref="T:System.ArgumentException">
            If the context id on the search has not been specified
            </exception>
        </member>
        <member name="M:Oculus.Searching.Search.Dispose">
            <summary>
            Releases resources on the object
            </summary>
        </member>
        <member name="T:Oculus.Searching.SearchException">
            <summary>
            Exception which represents an error in configuration
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchException.#ctor">
            <summary>
            Create a default instance of the object
            </summary>
        </member>
        <member name="M:Oculus.Searching.SearchException.#ctor(System.String)">
            <summary>
            Create an instance of the exception with the specified message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Oculus.Searching.SearchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="T:Oculus.Storage.Collections.ParameterCollection">
            <summary>
             The moniker class represents a link to any item in the system, be it a plug-in, a
             document, or a fragment.  Use the inheriting classes to take advantage of a particular
             functionality set.
            </summary>
        </member>
        <member name="P:Oculus.Storage.Collections.ParameterCollection.Item(System.String)">
            <summary>
             Get or set an item in the collection. If null, will delete the item from the collection
            </summary>
        </member>
        <member name="P:Oculus.Storage.Collections.ParameterCollection.Keys">
            <summary>
             Returns a list of all names used in the collection.
            </summary>
        </member>
        <member name="P:Oculus.Storage.Collections.ParameterCollection.Count">
            <summary>
             Returns a count of the number of parameters in our collection.
            </summary>
        </member>
        <member name="M:Oculus.Storage.Collections.ParameterCollection.#ctor">
            <summary>
             Default, parameterless constructor
            </summary>
        </member>
        <member name="M:Oculus.Storage.Collections.ParameterCollection.#ctor(Oculus.Storage.Collections.ParameterCollection)">
            <summary>
             Private constructor to create new parameter collections off of existing ones
            </summary>
        </member>
        <member name="M:Oculus.Storage.Collections.ParameterCollection.Get``1(System.String)">
            <summary>
            Returns the object as the specified type
            </summary>
            <typeparam name="T">The type to retrieve</typeparam>
            <param name="name">The key for the object</param>
            <returns>The value for the key</returns>
        </member>
        <member name="M:Oculus.Storage.Collections.ParameterCollection.ToUri">
            <summary>
             Returns a uri object for the Moniker
            </summary>
        </member>
        <member name="M:Oculus.Storage.Collections.ParameterCollection.ToString">
            <summary>
             Returns a string representation of the paramter collection
            </summary>
        </member>
        <member name="M:Oculus.Storage.Collections.ParameterCollection.Clear">
            <summary>
             Returns a string for the name.
            </summary>
        </member>
        <member name="M:Oculus.Storage.Collections.ParameterCollection.GetObjectFromString(System.String)">
            <summary>
             Returns an object of the appropriate type for the specified parameter value from 
             string representation.
            </summary>
        </member>
        <member name="M:Oculus.Storage.Collections.ParameterCollection.Parse(System.String)">
            <summary>
             Parses the string and returns a collection object
            </summary>
        </member>
        <member name="M:Oculus.Storage.Collections.ParameterCollection.ContainsKey(System.String)">
            <summary>
            Determines whether or not the specified key is in the collection
            </summary>
            <param name="key">The key</param>
            <returns>True if the key exists, false otherwise</returns>
        </member>
        <member name="M:Oculus.Storage.Collections.ParameterCollection.GetEnumerator">
            <summary>
            Get the enumerator for the object
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Oculus.Storage.Collections.ParameterCollection.Clone">
            <summary>
            Creates a clone of the current object
            </summary>
            <returns>The clone</returns>
        </member>
        <member name="T:Oculus.Storage.Collections.DocumentList">
            <summary>
            Collection of storage documents
            </summary>
        </member>
        <member name="M:Oculus.Storage.Collections.DocumentList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Storage.Collections.DocumentList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Storage.Collections.FragmentList">
            <summary>
            Collection of storage fragments
            </summary>
        </member>
        <member name="M:Oculus.Storage.Collections.FragmentList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Storage.Collections.FragmentList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Storage.Collections.AuditDetailList">
            <summary>
            Collection of audit detail objects
            </summary>
        </member>
        <member name="M:Oculus.Storage.Collections.AuditDetailList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Storage.Collections.AuditDetailList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Storage.InvalidSchemeException">
            <summary>
             Indicates the specified scheme is invalid. Used in moniker parsing.
            </summary>
        </member>
        <member name="M:Oculus.Storage.InvalidSchemeException.#ctor">
            <summary>
            Creates a new instance of the object
            </summary>
        </member>
        <member name="M:Oculus.Storage.InvalidSchemeException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the object
            </summary>
            <param name="scheme">The invalid scheme</param>
            <param name="typeName">The type</param>
        </member>
        <member name="M:Oculus.Storage.InvalidSchemeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="M:Oculus.Storage.InvalidSchemeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Performs serialization
            </summary>
            <param name="info">serialization info</param>
            <param name="context">serialization context</param>
        </member>
        <member name="P:Oculus.Storage.InvalidSchemeException.Message">
            <summary>
            Gets the message for the exception
            </summary>
        </member>
        <member name="T:Oculus.Storage.StorageDocument">
             <summary>
              Documents are "nonactive" objects until they are added successfully to the DMS.
              Active documents must be loaded via Moniker.GetObject method
              The active status determines which operations may or may not be performed and which
              properties are modifiable/how they are modified.
            
              In order to perform *any* operations, you must at least set
              the ProfileContextId property. These values are used in permission validations.
             </summary>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.#ctor(Oculus.Storage.ItemMoniker)">
            <summary>
            Initialize with the specified document moniker
            </summary>
            <param name="documentMoniker">The moniker to use, cannot be null</param>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.#ctor(System.Guid)">
            <summary>
            Initialize for a document add. Will automatically set the system moniker property
            with an unknown plug-in and a guid id
            </summary>
            <param name="profileContextId">The context id</param>
        </member>
        <member name="P:Oculus.Storage.StorageDocument.Name">
            <summary>
            Get/Set the name for the document
            </summary>
        </member>
        <member name="P:Oculus.Storage.StorageDocument.Description">
            <summary>
            Get/Set the description for the document
            </summary>
        </member>
        <member name="P:Oculus.Storage.StorageDocument.Fragments">
            <summary>
            Get the set of fragments for the document
            </summary>
        </member>
        <member name="P:Oculus.Storage.StorageDocument.Indexes">
            <summary>
            Get the set of index values for the document
            </summary>
        </member>
        <member name="P:Oculus.Storage.StorageDocument.Metadata">
            <summary>
            Get/Set the description for the document
            </summary>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.ChangeDescription(System.String)">
            <summary>
            Changes the description
            </summary>
            <param name="newDescription">the new description</param>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.ChangeName(System.String)">
            <summary>
            Changes the name
            </summary>
            <param name="newName">the new name</param>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.ChangeMetadata(System.Xml.XmlDocument)">
            <summary>
            Changes the metadata
            </summary>
            <param name="newMetadata">the new metadata. If null, indicates a deletion</param>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.ChangeProfile(System.Guid,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Changes the profile
            </summary>
            <param name="newProfileId">the new profile id</param>
            <param name="newIndexes">The new set of indexes. Cannot be null.</param>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.Reindex(Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Assigns a new set of indexes to the document
            </summary>
            <param name="newIndexes">The new set of indexes. Cannot be null.</param>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.Delete">
            <summary>
            Deletes the document from its plug-in
            </summary>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.Add">
            <summary>
            Adds the document to the current active plug-in
            </summary>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.AddToPlugin(System.String)">
            <summary>
            Adds the document to the specified plug-in
            </summary>
            <param name="pluginId">The plug-in to add to. Cannot be null</param>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.GetProfileContext">
            <summary>
            Helper method for retrieving the profile context of the current document. This context is based on 
            the ProfileContextId value. Please note if the context is invalid an exception will be raised.
            </summary>
            <returns>The ProfileContext</returns>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.ConsolidatedWrite(Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of ALL the fragments in the moniker. Obviously, this can only be 
            done with certain data types. This functionality will generally only be used in situations where
            the content is known ahead of time to be TIFF data. All images within the document should be combined
            </summary>
            <param name="outputStream">The stream to write to</param>
            <param name="mimeType">The target mime type</param>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.GetAuditDetail">
            <summary>
            Retrieves the collection of audit information for the moniker
            </summary>
            <returns>The collection of audit information</returns>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.GetInitializedDocument(Oculus.Storage.ItemMoniker)">
            <summary>
             Creates and returns a storage document, or a remote storage document, depending on the 
             location defined in the moniker.  The document is ONLY initialized with the moniker so
             that basic operations may be performed.
            </summary>
            <param name="documentMoniker">
             The moniker of the particular document requested. Cannot be null.
            </param>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.Load(Oculus.Storage.ItemMoniker)">
            <summary>
             Retrieves all information relating to a particular document, including basic fragment detail.
             This may be used to load remote monikers.
            </summary>
            <param name="documentMoniker">
             The moniker of the particular document requested. Cannot be null.
            </param>
        </member>
        <member name="M:Oculus.Storage.StorageDocument.GetProfileIDForDocument(Oculus.Storage.ItemMoniker)">
            <summary>
             Returns the profile id for the document id from the specified plug-in.
            </summary>
        </member>
        <member name="T:Oculus.Storage.StorageFragment">
            <summary>
             Fragment objects are mainly used to retrieve binary data for the fragment and 
             for adding data initially to a document.
            </summary>
        </member>
        <member name="M:Oculus.Storage.StorageFragment.#ctor">
            <summary>
             Creates an empty Fragment object.
            </summary>
        </member>
        <member name="M:Oculus.Storage.StorageFragment.#ctor(Oculus.Storage.ItemMoniker)">
            <summary>
             Creates a fragment object intialized with the specified moniker.
            </summary>
        </member>
        <member name="M:Oculus.Storage.StorageFragment.#ctor(System.String,Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Create a fragment with the specified filename, with fragment data.
            This constructor will typically only be used when adding new fragments to 
            the system.
            </summary>
        </member>
        <member name="P:Oculus.Storage.StorageFragment.DocumentMoniker">
            <summary>
             Get/Set the system moniker uniquely identifying the document
            </summary>
        </member>
        <member name="P:Oculus.Storage.StorageFragment.DataLocationMoniker">
            <summary>
            Indicates where the fragment data exists if it's not in the local store
            </summary>
        </member>
        <member name="P:Oculus.Storage.StorageFragment.Filename">
            <summary>
             The original filename for the fragment.
            </summary>
        </member>
        <member name="P:Oculus.Storage.StorageFragment.MimeType">
            <summary>
             The mime type for this fragment.
            </summary>
        </member>
        <member name="P:Oculus.Storage.StorageFragment.IsImage">
            <summary>
            Convience method which gets whether or not the associated mime type is an image type.
            Please note this is not verified against the actual fragment data.
            </summary>
        </member>
        <member name="P:Oculus.Storage.StorageFragment.Data">
             <summary>
              Provides access to the document fragment's in-memory stream of data as set either by the 
              initialise method or retrieved from the server.
            
              This property is vital for the performance of the system, in that fragment streams need
              to be optimised so that their data is only loaded as needed.  It may be that a mediator
              will have to convert streams as they are passed around the network.
             </summary>
        </member>
        <member name="P:Oculus.Storage.StorageFragment.IsArchived">
            <summary>
             Returns true if the fragment has been archived (aka the plug-in itself cannot retrieve the fragment 
             data but rather defers to a separate plug-in).
            </summary>
        </member>
        <member name="P:Oculus.Storage.StorageFragment.IsFullLoad">
            <summary>
            Get/Set whether or not this object was initialized using the "Load" method, indicating when we perform
            certain operations we can be sure our current data is correct.
            </summary>
        </member>
        <member name="M:Oculus.Storage.StorageFragment.WriteToStream(Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes all data for the fragment to the specified stream. This method assumes the current data is correct. 
            That means if you don't do a proper Load with the s
            </summary>
            <param name="outputStream">The output stream</param>
        </member>
        <member name="M:Oculus.Storage.StorageFragment.Delete">
            <summary>
            Deletes the fragment
            </summary>
        </member>
        <member name="M:Oculus.Storage.StorageFragment.SetDataLocation(Oculus.Storage.ItemMoniker)">
            <summary>
            Sets the data location for this fragment
            </summary>
            <param name="newLocation">The new location of the fragment data, cannot be null</param>
        </member>
        <member name="M:Oculus.Storage.StorageFragment.DeleteLocalData">
            <summary>
            Delete the local data for this fragment. The fragment record remains, but no
            file data exists on disk
            </summary>
        </member>
        <member name="M:Oculus.Storage.StorageFragment.GetInitializedFragment(Oculus.Storage.ItemMoniker)">
            <summary>
             Creates and returns a storage fragment, or a remote storage fragment, depending on the 
             location defined in the moniker.  The fragment is ONLY initialized with the moniker so
             that basic operations may be performed.
            </summary>
            <param name="fragmentMoniker">
             The moniker of the particular document requested. Cannot be null.
            </param>
        </member>
        <member name="M:Oculus.Storage.StorageFragment.Load(Oculus.Storage.ItemMoniker)">
            <summary>
             Retrieves all information relating to a particular fragment;
            </summary>
            <param name="fragmentMoniker">
             The moniker of the particular fragment requested. Cannot be null.
            </param>
        </member>
        <member name="M:Oculus.Storage.StorageFragment.GetByteLength(Oculus.Storage.ItemMoniker)">
            <summary>
             Returns the length of the fragment data as specified in the moniker - does not require an initialised fragment
             or any particular permissions.
            </summary>
            <param name="fragmentMoniker">The fragment to check</param>
        </member>
        <member name="T:Oculus.Storage.IO.Interfaces.IStream">
            <summary>
             Interface defining basic streaming methods. The idea of this interface is that streaming 
             will be handled differently on various platforms, and that the O8E itself never deals 
             with streams, but facilitates the movement of data from plug-ins to O8E consumers by providing
             streaming methods.  This will cut down on overhead by allowing the two sides of the O8E to
            communicate directly with one another via these streams.
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.Interfaces.IStream.ReadBytes(System.Int32)">
            <summary>
             Reads the specified number of bytes from the stream.  If the requested number of bytes
             is not available, the stream will return whatever bytes remain in an appropriate sized
             array.  If there is no data available, a ZERO-LENGTH array will be returned.
            </summary>
            <param name="numBytes">
             The number of bytes to read from the stream into the return array.
            </param>
        </member>
        <member name="M:Oculus.Storage.IO.Interfaces.IStream.WriteBytes(System.Byte[])">
            <summary>
             Writes the entire byte array to the stream
            </summary>
            <param name="bytes">
             The array of bytes to write to the stream.
            </param>
        </member>
        <member name="M:Oculus.Storage.IO.Interfaces.IStream.Open">
            <summary>
             Opens the stream for reading/writing - all data required for opening the stream must be available 
             internally to the object *before* this object is called.  All stream consumers should open and close a stream
             for themselves.
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.Interfaces.IStream.Close">
            <summary>
             Indicates the stream is no longer required and that all associated resources can be released.
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.Interfaces.IStream.WriteStream(Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the *entire* source stream to our stream
            </summary>
            <param name="sourceStream">The source stream</param>
        </member>
        <member name="T:Oculus.Storage.IO.ClrStream">
            <summary>
             Wraps up any arbitrary .NET System.IO.Stream descendant. Performs NO operations on the stream other than
             read/write.  This means the creator of the stream must open/close it for the consumer.
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.ClrStream.#ctor(System.IO.Stream)">
            <summary>
             Create an instance of clr stream
            </summary>
            <param name="stream">The stream to use</param>
        </member>
        <member name="M:Oculus.Storage.IO.ClrStream.Open">
            <summary>
             DOES NOTHING
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.ClrStream.Close">
            <summary>
             DOES NOTHING
            </summary>
        </member>
        <member name="T:Oculus.Storage.IO.FileStream">
            <summary>
             Handles basic read/write streams.  This class *is not* thread safe.
            </summary>
        </member>
        <member name="F:Oculus.Storage.IO.FileStream.m_path">
            <summary>
            The underlying file path for the stream
            </summary>
        </member>
        <member name="F:Oculus.Storage.IO.FileStream.m_mode">
            <summary>
            The mode (read/write)
            </summary>
        </member>
        <member name="F:Oculus.Storage.IO.FileStream.m_readOnly">
            <summary>
            Whether or not we're doing a read-only stream
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.FileStream.#ctor(System.IO.FileStream)">
            <summary>
            Initialize with a specific file stream
            </summary>
            <param name="fileStream">The underlying file stream to use, cannot be null</param>
        </member>
        <member name="M:Oculus.Storage.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.Boolean)">
            <summary>
             Create a stream against the specified path and opens the stream automatically.
            </summary>
            <param name="path">The path to the file</param>
            <param name="mode">The mode to use for the stream</param>
            <param name="readOnly">Whether or not the stream is read only</param>
        </member>
        <member name="M:Oculus.Storage.IO.FileStream.Open">
            <summary>
            Open the specified stream.  If the stream object already exists, don't recreate it, just
            seek to position zero.
            </summary>
        </member>
        <member name="T:Oculus.Storage.IO.MemoryStream">
            <summary>
             Handles basic memory streams.
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.MemoryStream.#ctor">
            <summary>
             Create an empty stream object
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.MemoryStream.#ctor(System.IO.MemoryStream)">
            <summary>
             Provides the ability to create a stream on a MemoryStream object
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.MemoryStream.Open">
            <summary>
            Opens the stream. If no stream has been specified, creates a new memory stream to use. 
            If the stream object already exists seek to position zero.
            </summary>
        </member>
        <member name="T:Oculus.Storage.IO.NetworkStream">
            <summary>
             Handles basic network streams.
            
             Please note that this method *does not* contain methods for initialising the stream.
            
             Basically, it's use should be:
               +create the stream in your .NET code
               +call the engine requesting the stream be written to by a plug-in
               +handle the response from the plug-in
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.NetworkStream.#ctor(System.Net.Sockets.NetworkStream)">
            <summary>
             Provides the ability to works with a NetworkStream object
            </summary>
            <param name="stream">The stream to use, cannot be null</param>
        </member>
        <member name="M:Oculus.Storage.IO.NetworkStream.Open">
            <summary>
             Does nothing
            </summary>
        </member>
        <member name="T:Oculus.Storage.IO.OcuStream">
            <summary>
             Handles basic streams, acts as a COM proxy to various sub objects
            </summary>
        </member>
        <member name="P:Oculus.Storage.IO.OcuStream.IOStream">
            <summary>
             Provides access to the CLR stream type for CLR clients so they can deal
             with the stream explicitly.  If this value is nothing, the object has not
             yet been initialised (see Open method or Constructor).
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.OcuStream.Close">
            <summary>
             Close the file stream
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.OcuStream.ReadBytes(System.Int32)">
            <summary>
             Reads the number of bytes
            </summary>
            <param name="numBytes">
             The number of bytes to read from the stream into the return array.
            </param>
        </member>
        <member name="M:Oculus.Storage.IO.OcuStream.WriteBytes(System.Byte[])">
            <summary>
             Writes the entire byte array to the stream
            </summary>
            <param name="bytes">
             The array of bytes to write to the stream.
            </param>
        </member>
        <member name="M:Oculus.Storage.IO.OcuStream.WriteStream(Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes the *entire* source stream to our stream
            </summary>
            <param name="sourceStream">The source stream</param>
        </member>
        <member name="M:Oculus.Storage.IO.OcuStream.Open">
            <summary>
             Inheriting classes need to write this method for themselves to open the streams
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.OcuStream.Dispose">
            <summary>
            Releases the underlying stream
            </summary>
        </member>
        <member name="T:Oculus.Storage.IO.OffsetStream">
            <summary>
            Represents a file stream with an offset.  The offset is used as the starting point for the 
            stream.  When the stream is opened, the position for the stream will be the offset.
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.OffsetStream.#ctor(System.Int64,System.IO.FileStream)">
            <summary>
             Create an offset stream against the specified file with the specified offset.
            </summary>
            <param name="offset">The offset</param>
            <param name="fileStream">The stream to use</param>
        </member>
        <member name="P:Oculus.Storage.IO.OffsetStream.Offset">
            <summary>
            Get/Set the offset for this stream
            </summary>
        </member>
        <member name="M:Oculus.Storage.IO.OffsetStream.Open">
            <summary>
            Open the specified stream.  If the stream object already exists, don't recreate it. resets 
            existing streams to the offset position
            </summary>
        </member>
        <member name="T:Oculus.Storage.BaseMonikerEnabled">
            <summary>
             Parent class for engine objects that houses logic relating to System Monikers.
            </summary>
        </member>
        <member name="P:Oculus.Storage.BaseMonikerEnabled.Id">
            <summary>
             The unique id of the document as specified in the system moniker.
            </summary>
        </member>
        <member name="P:Oculus.Storage.BaseMonikerEnabled.ProfileContextId">
            <summary>
             The profile context id as specified in the system moniker.
            </summary>
        </member>
        <member name="P:Oculus.Storage.BaseMonikerEnabled.SystemMoniker">
            <summary>
             The system moniker uniquely identifying the object
            </summary>
        </member>
        <member name="P:Oculus.Storage.BaseMonikerEnabled.PluginId">
            <summary>
             The id of the plug-in to which the document belongs as specified in the system moniker
            </summary>
        </member>
        <member name="M:Oculus.Storage.BaseMonikerEnabled.VerifyMonikerExistsAndHasContext">
            <summary>
             Verifies the system moniker exists and has a context specified.
            </summary>
        </member>
        <member name="T:Oculus.Storage.ItemMoniker">
            <summary>
             Moniker representing a library in the system.
            </summary>
        </member>
        <member name="M:Oculus.Storage.ItemMoniker.#ctor">
            <summary>
             Default constructor to enable serialization
            </summary>
        </member>
        <member name="M:Oculus.Storage.ItemMoniker.#ctor(Oculus.Storage.ItemMoniker.ItemType,System.String,System.String)">
            <summary>
            Create an instance with the specified values on the current machine
            </summary>
            <param name="type">The scheme for the moniker</param>
            <param name="pluginId">The plugin id for the moniker</param>
            <param name="itemId">The id for the item</param>
        </member>
        <member name="M:Oculus.Storage.ItemMoniker.#ctor(Oculus.Storage.ItemMoniker.ItemType,System.String,System.String,System.String)">
            <summary>
            Create an instance with the specified values on the current machine
            </summary>
            <param name="type">The scheme for the moniker</param>
            <param name="host">The host for the moniker</param>
            <param name="pluginId">The plugin id for the moniker</param>
            <param name="itemId">The id for the item</param>
        </member>
        <member name="M:Oculus.Storage.ItemMoniker.#ctor(System.String)">
            <summary>
            Performs a "parse into" for the moniker argument
            </summary>
            <param name="moniker">The moniker, cannot be null</param>
        </member>
        <member name="M:Oculus.Storage.ItemMoniker.#ctor(Oculus.Storage.Moniker)">
            <summary>
            Performs a copy to for the moniker argument
            </summary>
            <param name="baseMoniker">The moniker to convert to an item moniker, cannot be null</param>
        </member>
        <member name="T:Oculus.Storage.ItemMoniker.ItemType">
            <summary>
             An enumeration of the various library types permitted
            </summary>
        </member>
        <member name="F:Oculus.Storage.ItemMoniker.ItemType.Document">
            <summary>
            Indicates the moniker points to a document
            </summary>
        </member>
        <member name="F:Oculus.Storage.ItemMoniker.ItemType.Fragment">
            <summary>
            Indicates the moniker points to a fragment
            </summary>
        </member>
        <member name="F:Oculus.Storage.ItemMoniker.CONTEXT_ID_KEY">
            <summary>
            The parameter key for the profile context id
            </summary>
        </member>
        <member name="F:Oculus.Storage.ItemMoniker.ITEM_ID_KEY">
            <summary>
            The parameter key for the item's unique id
            </summary>
        </member>
        <member name="P:Oculus.Storage.ItemMoniker.PluginId">
            <summary>
            Get/set the id of the plug-in for this item, is just a redirect to the Library property
            </summary>
        </member>
        <member name="P:Oculus.Storage.ItemMoniker.ProfileContextId">
            <summary>
             Get or set the context id for this request. Returns Guid.Empty if no context id has been set.
            </summary>
        </member>
        <member name="P:Oculus.Storage.ItemMoniker.ItemId">
            <summary>
             Get or set the item id for this request. Cannot be set to null.
            </summary>
        </member>
        <member name="P:Oculus.Storage.ItemMoniker.HasContext">
            <summary>
            Get whether or not this moniker has a context id defined
            </summary>
        </member>
        <member name="M:Oculus.Storage.ItemMoniker.GetObject``1">
            <summary>
            this is the templated call to get object
            </summary>
            <typeparam name="T">the type of the object to instanciate</typeparam>
            <returns>an instance of the typeed moniker instance</returns>
        </member>
        <member name="M:Oculus.Storage.ItemMoniker.GetObject">
             <summary>
              Creates and returns an object representing this moniker.  The objects returned are...
               For scheme "plugin", IDMSPlugin
               For scheme "storage", IMonikerHandler
            
              This method will, if necessary, create the object on the remote host.
             </summary>
        </member>
        <member name="M:Oculus.Storage.ItemMoniker.ValidateScheme(System.String)">
            <summary>
             Throws an InvalidSchemeException if the scheme is not valid for the type.
            </summary>
        </member>
        <member name="M:Oculus.Storage.ItemMoniker.FromBaseMoniker(Oculus.Storage.Moniker)">
            <summary>
             Returns a library moniker from a base moniker.
            </summary>
        </member>
        <member name="M:Oculus.Storage.ItemMoniker.GetScheme(Oculus.Storage.ItemMoniker.ItemType)">
            <summary>
             Returns the scheme for the particular library type.
            </summary>
        </member>
        <member name="T:Oculus.Storage.LibraryMoniker">
            <summary>
             Moniker representing a library (plug-in) in the system.
            </summary>
        </member>
        <member name="M:Oculus.Storage.LibraryMoniker.#ctor">
            <summary>
             Default constructor to enable serialization
            </summary>
        </member>
        <member name="M:Oculus.Storage.LibraryMoniker.#ctor(Oculus.Storage.LibraryMoniker.LibraryType,System.String)">
            <summary>
            Create an instance with the specified values on the current machine
            </summary>
            <param name="type">The scheme for the moniker</param>
            <param name="library">The library for the moniker</param>
        </member>
        <member name="M:Oculus.Storage.LibraryMoniker.#ctor(Oculus.Storage.LibraryMoniker.LibraryType,System.String,System.String)">
            <summary>
            Create an instance with the specified values on the current machine
            </summary>
            <param name="type">The scheme for the moniker</param>
            <param name="host">The host for the moniker</param>
            <param name="library">The library for the moniker</param>
        </member>
        <member name="T:Oculus.Storage.LibraryMoniker.LibraryType">
            <summary>
            An enumeration of the various library types permitted. From v9, these
            values are equivalent
            </summary>
        </member>
        <member name="F:Oculus.Storage.LibraryMoniker.LibraryType.Plugin">
            <summary>
            Indicates the underlying library is a standard plug-in
            </summary>
        </member>
        <member name="F:Oculus.Storage.LibraryMoniker.LibraryType.Storage">
            <summary>
            Indicates the underlying library is a storage plug-in
            </summary>
        </member>
        <member name="M:Oculus.Storage.LibraryMoniker.GetObject">
             <summary>
              Creates and returns an object representing this moniker.  The objects returned are...
               For scheme "plugin", IPlugin
               For scheme "storage", IFragmentHandler
            
              This method will, if necessary, create the object on the remote host.
             </summary>
        </member>
        <member name="M:Oculus.Storage.LibraryMoniker.ValidateScheme(System.String)">
            <summary>
             Throws an InvalidSchemeException if the scheme is not valid for the type.
            </summary>
        </member>
        <member name="M:Oculus.Storage.LibraryMoniker.FromBaseMoniker(Oculus.Storage.Moniker)">
            <summary>
             Returns a library moniker from a base moniker.
            </summary>
        </member>
        <member name="M:Oculus.Storage.LibraryMoniker.GetScheme(Oculus.Storage.LibraryMoniker.LibraryType)">
            <summary>
             Returns the scheme for the particular library type.
            </summary>
        </member>
        <member name="T:Oculus.Storage.Moniker">
            <summary>
             The moniker class represents a link to any item in the system, be it a plug-in, a
             document, or a fragment.  Use the inheriting classes to take advantage of a particular
             functionality set.
            </summary>
        </member>
        <member name="M:Oculus.Storage.Moniker.#ctor">
            <summary>
            Create a default instance of the object
            </summary>
        </member>
        <member name="M:Oculus.Storage.Moniker.#ctor(System.String,System.String,System.String)">
            <summary>
            Create an instance with the specified values
            </summary>
            <param name="scheme">The scheme for the moniker</param>
            <param name="host">The host for the moniker</param>
            <param name="library">The library for the moniker</param>
        </member>
        <member name="P:Oculus.Storage.Moniker.Host">
            <summary>
             Returns the host for the object, this can be a machine name, an IP address, or a dns name. This value
             is LOWERCASE
            </summary>
        </member>
        <member name="P:Oculus.Storage.Moniker.Library">
            <summary>
             Returns the plug-in/library identifier for the moniker, this may not contain escaping or slashes
             (formatting not currently enforced)
            </summary>
        </member>
        <member name="P:Oculus.Storage.Moniker.Scheme">
            <summary>
             Provides read-only access to the scheme.  The scheme is VALIDATED when set.
            </summary>
        </member>
        <member name="P:Oculus.Storage.Moniker.Parameters">
            <summary>
             Returns the parameter collection associated with this moniker.
            </summary>
        </member>
        <member name="P:Oculus.Storage.Moniker.Item(System.String)">
            <summary>
            Accessor which points to the parameters collection
            </summary>
            <param name="key">The key within the parameters</param>
            <returns>The value for the key</returns>
        </member>
        <member name="P:Oculus.Storage.Moniker.IsLocal">
            <summary>
             Returns true if the moniker host is the local machine, false if not.
             Please note, this currently only works off Host names
            </summary>
        </member>
        <member name="M:Oculus.Storage.Moniker.ToString">
            <summary>
             Returns the string representation of the Moniker ("S" for string, "Q" for querystring).
             Please note that strings will be double-encoded for QueryString formats.
            </summary>
        </member>
        <member name="M:Oculus.Storage.Moniker.Parse(System.String)">
            <summary>
             Returns the default string representation of the Moniker ("S").
            </summary>
            <param name="moniker">The moniker to parse</param>
            <exception cref="T:System.FormatException">If the moniker isn't valid</exception>
        </member>
        <member name="M:Oculus.Storage.Moniker.ParseInto(System.String)">
            <summary>
             Parses the moniker string into the current object.
            </summary>
            <param name="moniker">The moniker to parse</param>
        </member>
        <member name="M:Oculus.Storage.Moniker.Equals(System.Object)">
            <summary>
            Checks the contents of the moniker for equality. Parameters can be in a different order, but
            it is case sensitive for keys and values
            </summary>
            <param name="obj">The object to compare to</param>
            <returns>True if content is the same, false otherwise</returns>
        </member>
        <member name="M:Oculus.Storage.Moniker.GetHashCode">
            <summary>
            Gets the hash code - defers to base implementation
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Oculus.Storage.Moniker.GetObject">
            <summary>
             Returns the system object associated with the moniker.  May not be called on the base
             class.
            </summary>
        </member>
        <member name="M:Oculus.Storage.Moniker.ValidateScheme(System.String)">
            <summary>
             Throws an InvalidSchemeException if the scheme is not valid for the type.  All schemes are valid on
             the base class.
            </summary>
            <param name="scheme">The scheme to verify</param>
        </member>
        <member name="M:Oculus.Storage.Moniker.CopyTo(Oculus.Storage.Moniker)">
            <summary>
             Copies the values from the current moniker to the target moniker
            </summary>
            <param name="targetMoniker">The moniker to copy to</param>
        </member>
        <member name="M:Oculus.Storage.Moniker.Clone">
            <summary>
             Clones the current moniker
            </summary>
        </member>
        <member name="T:Oculus.Storage.Annotations.Annotations">
            <summary>
            Represents a set of annotations against a document
            </summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.Annotations.Fragments">
            <summary>
            Get/set the collection of fragments
            </summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.Annotations.ToXml">
            <summary>
            Converts the object to xml
            </summary>
            <returns>The object as xml</returns>
        </member>
        <member name="T:Oculus.Storage.Annotations.Point">
            <summary>
            Represents a point in a line
            </summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.Point.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialization constructor
            </summary>
            <param name="x">X-coordinate of point</param>
            <param name="y">Y-coordinate of point</param>
        </member>
        <member name="P:Oculus.Storage.Annotations.Point.X">
            <summary>Get/Set the x value</summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.Point.Y">
            <summary>Get/Set the y value</summary>
        </member>
        <member name="T:Oculus.Storage.Annotations.FragmentAnnotation">
            <summary>
            Set of annotations against a fragment
            </summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.FragmentAnnotation.MonikerID">
            <summary>Get/Set the moniker id</summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.FragmentAnnotation.Rotation">
            <summary>
            Get/Set the rotation. Will automatically scale to within 0 (inclusive) to 360 (exclusive) when set
            </summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.FragmentAnnotation.Highlights">
            <summary>Get/Set the highlight annotations</summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.FragmentAnnotation.Lines">
            <summary>Get/Set the line annotations</summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.FragmentAnnotation.Texts">
            <summary>Get/Set the text annotations</summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.FragmentAnnotation.GetDrawableItems">
            <summary>
            Retrieves a combined list of all sub-items
            </summary>
            <returns>The collection of items</returns>
        </member>
        <member name="M:Oculus.Storage.Annotations.FragmentAnnotation.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the set of annotations against the graphics object.
            NB this will NOT apply the rotation, that must be done externally
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Oculus.Storage.Annotations.FragmentAnnotation.GetBoundingBox">
            <summary>
            This doesn't really apply to us
            </summary>
            <returns>Rectangle.Empty</returns>
        </member>
        <member name="T:Oculus.Storage.Annotations.BaseAnnotation">
            <summary>
            Base class for annotations
            </summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.BaseAnnotation.Top">
            <summary>Get/Set the top</summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.BaseAnnotation.Left">
            <summary>Get/Set the left</summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.BaseAnnotation.Height">
            <summary>Get/Set the height</summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.BaseAnnotation.Width">
            <summary>Get/Set the width</summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.BaseAnnotation.Color">
            <summary>Get/Set the color</summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.BaseAnnotation.GetColor">
            <summary>
            Gets the color for the current color string
            </summary>
            <returns>The color value</returns>
        </member>
        <member name="M:Oculus.Storage.Annotations.BaseAnnotation.GetRectangle">
            <summary>
            Gets the rectangle assocatiated with the shape. This rectangle is NORMALIZED so
            that the height and width are always positive.
            </summary>
            <returns>The rectangle</returns>
        </member>
        <member name="M:Oculus.Storage.Annotations.BaseAnnotation.GetBoundingBox">
            <summary>
            Gets a bounding box for the object
            </summary>
            <returns>The bounding box</returns>
        </member>
        <member name="M:Oculus.Storage.Annotations.BaseAnnotation.GetColor(System.String)">
            <summary>
            Gets the color assocatiated with the shape
            </summary>
            <returns>The color</returns>
        </member>
        <member name="T:Oculus.Storage.Annotations.TextAnnotation">
            <summary>
            Text annotation
            </summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.TextAnnotation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.TextAnnotation.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initialization constructor
            </summary>
            <param name="rect">The rectangle to use for the dimensions</param>
        </member>
        <member name="P:Oculus.Storage.Annotations.TextAnnotation.Font">
            <summary>Get/Set the font</summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.TextAnnotation.Size">
            <summary>Get/Set the size</summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.TextAnnotation.Value">
            <summary>Get/Set the value</summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.TextAnnotation.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the annotation against the graphics
            </summary>
            <param name="g">The graphics object</param>
        </member>
        <member name="T:Oculus.Storage.Annotations.HighlightAnnotation">
            <summary>
            A highlight annotation
            </summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.HighlightAnnotation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.HighlightAnnotation.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initialization constructor
            </summary>
            <param name="rect">The rectangle to use for the dimensions</param>
        </member>
        <member name="M:Oculus.Storage.Annotations.HighlightAnnotation.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the annotation against the graphics
            </summary>
            <param name="g">The graphics object</param>
        </member>
        <member name="T:Oculus.Storage.Annotations.LineAnnotation">
            <summary>
            A collection of points
            </summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.LineAnnotation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.LineAnnotation.Color">
            <summary>Get/Set the color</summary>
        </member>
        <member name="P:Oculus.Storage.Annotations.LineAnnotation.Points">
            <summary>Get/Set the set of points</summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.LineAnnotation.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the annotation against the graphics
            </summary>
            <param name="g">The graphics object</param>
        </member>
        <member name="M:Oculus.Storage.Annotations.LineAnnotation.GetBoundingBox">
            <summary>
            Gets a bounding box for the object
            </summary>
            <returns>The bounding box</returns>
        </member>
        <member name="T:Oculus.Storage.Annotations.Collections.FragmentAnnotationList">
            <summary>
            Collection of fragment annotations
            </summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.Collections.FragmentAnnotationList.FindById(System.String)">
            <summary>
            Finds the annotation with a moniker id the same as the parameter
            </summary>
            <param name="monikerId">The id of the item to find. This is typically just an id. Cannot be null</param>
            <returns>The annotation object, or null if not found</returns>
        </member>
        <member name="T:Oculus.Storage.Annotations.Collections.TextAnnotationList">
            <summary>
            Collection of text annotations
            </summary>
        </member>
        <member name="T:Oculus.Storage.Annotations.Collections.LineAnnotationList">
            <summary>
            Collection of line annotations
            </summary>
        </member>
        <member name="T:Oculus.Storage.Annotations.Collections.HighlightAnnotationList">
            <summary>
            Collection of highlight annotations
            </summary>
        </member>
        <member name="T:Oculus.Storage.Annotations.Collections.PointList">
            <summary>
            Collection of points
            </summary>
        </member>
        <member name="M:Oculus.Storage.Annotations.Collections.PointList.ToDrawingPoints">
            <summary>
            Converts the list of points to an array of drawing points
            </summary>
            <returns>The array of drawing points</returns>
        </member>
        <member name="T:Oculus.Storage.AuditDetail">
            <summary>
            Represents a piece of audit information in the system
            </summary>
        </member>
        <member name="P:Oculus.Storage.AuditDetail.DocumentMoniker">
            <summary>
            Get/set the document moniker
            </summary>
        </member>
        <member name="P:Oculus.Storage.AuditDetail.FragmentMoniker">
            <summary>
            Get/set the fragment moniker
            </summary>
        </member>
        <member name="P:Oculus.Storage.AuditDetail.AuditOperation">
            <summary>
            Get/set the audit operation
            </summary>
        </member>
        <member name="P:Oculus.Storage.AuditDetail.UserId">
            <summary>
            Get/set the user id
            </summary>
        </member>
        <member name="P:Oculus.Storage.AuditDetail.DateOccurred">
            <summary>
            Get/set the date of the operation
            </summary>
        </member>
        <member name="P:Oculus.Storage.AuditDetail.Comment">
            <summary>
            Get/set the comment
            </summary>
        </member>
        <member name="T:Oculus.Storage.AuditOperation">
            <summary>
            The availale operations for auditing
            </summary>
        </member>
        <member name="F:Oculus.Storage.AuditOperation.Create">
            <summary>
            When an item is added to the plug-in
            </summary>
        </member>
        <member name="F:Oculus.Storage.AuditOperation.Edit">
            <summary>
            Changes to indexes, annotations, or other metadata
            </summary>
        </member>
        <member name="F:Oculus.Storage.AuditOperation.Delete">
            <summary>
            Deletion of a document or fragment
            </summary>
        </member>
        <member name="F:Oculus.Storage.AuditOperation.Retrieve">
            <summary>
            Load of the document object, or writing of fragment data
            NOT load of fragment object
            </summary>
        </member>
        <member name="T:Oculus.Storage.EmailHelper">
            <summary>
            Assists in the logic of emailing documents
            </summary>
        </member>
        <member name="P:Oculus.Storage.EmailHelper.MergeImages">
            <summary>
            Get/set whether or not to merge images
            </summary>
        </member>
        <member name="P:Oculus.Storage.EmailHelper.MimeMergeType">
            <summary>
            Get/set the mime merge type to use
            </summary>
        </member>
        <member name="P:Oculus.Storage.EmailHelper.MergeFilename">
            <summary>
            Get/set the merged filename to use
            </summary>
        </member>
        <member name="P:Oculus.Storage.EmailHelper.MergeExtension">
            <summary>
            Get the extension to use for merged files
            </summary>
        </member>
        <member name="M:Oculus.Storage.EmailHelper.SendMail(Oculus.Storage.Collections.DocumentList)">
            <summary>
            Sends a mail for the collection of documents
            </summary>
            <param name="docsToSend">The documents to send</param>
        </member>
        <member name="M:Oculus.Storage.EmailHelper.SendMail(System.Collections.Generic.List{System.String},System.Guid,System.String)">
            <summary>
            Sends a mail for the collection of documents
            </summary>
            <param name="docsToSend">The documents to send</param>
        </member>
        <member name="T:Oculus.Storage.PrintHelper">
            <summary>
            Used to aid in printing. Can handle a single document or a batch print. Only image data
            will be printed.
            </summary>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.#ctor(Oculus.Storage.StorageDocument)">
            <summary>
            Initialization constructor
            </summary>
            <param name="docToPrint">The document to print, cannot be null</param>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.#ctor(Oculus.Storage.Collections.DocumentList)">
            <summary>
            Initialization constructor
            </summary>
            <param name="docsToPrint">The set of documents to print, cannot be null</param>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.#ctor(System.Collections.Generic.List{System.String},System.Guid,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="docsToPrint">The set of documents to print, cannot be null</param>
        </member>
        <member name="P:Oculus.Storage.PrintHelper.HasImageData">
            <summary>
            Get whether or not we have any image data. If false, printing will produce an empty page.
            This should be checked PRIOR to printing a page
            </summary>
        </member>
        <member name="P:Oculus.Storage.PrintHelper.PrintDocument">
            <summary>
            Get the print document to use with the standard print dialogs. Please note
            this can be reused.
            </summary>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.ProcessDocument(System.String,System.Guid,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.InitializePrintDocument">
            <summary>
            Initialize the print document member
            </summary>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.InitializePrintSilverlightDocument">
            <summary>
            Initialize the print document member
            </summary>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.CalculateImageData">
            <summary>
            Determine whether or not our document has any image data
            </summary>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.HandlePrintPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Handles a print
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.HandlePrintSilverlightPage(System.Object,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Handles a print
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.PrintFragment(System.Drawing.Printing.PrintPageEventArgs,Oculus.Storage.StorageFragment)">
            <summary>
            Print the fragment to the page
            </summary>
            <param name="e">The page args</param>
            <param name="fragToPrint">The fragment to print</param>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.PrintFragment(System.Drawing.Printing.PrintPageEventArgs,System.Drawing.Image)">
            <summary>
            Print the fragment to the page
            </summary>
            <param name="e">The page args</param>
            <param name="fragToPrint">The fragment to print</param>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.GetNextFragToPrint(System.Boolean)">
            <summary>
            Grabs the next fragment to print and increments the document and fragment counters
            as necessary, provided we aren't in peek mode
            </summary>
            <param name="isPeek">Set to true if we are only peeking</param>
            <returns>The next fragment to print, or null if none</returns>
        </member>
        <member name="M:Oculus.Storage.PrintHelper.Dispose">
            <summary>
            Releases all resources
            </summary>
        </member>
        <member name="T:Oculus.Storage.RemoteStorageFragment">
            <summary>
             Used for operating on remotely stored fragments
            </summary>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageFragment.#ctor">
            <summary>
             Creates an empty Fragment object.
            </summary>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageFragment.#ctor(Oculus.Storage.ItemMoniker)">
            <summary>
             Creates a fragment object intialized with the specified moniker.
            </summary>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageFragment.#ctor(Oculus.Storage.StorageFragment)">
            <summary>
            Create an instance to be used with remoting based on the specified fragment.
            </summary>
            <param name="baseFragment">The fragment to use, cannot be null. SystemMoniker must also not be null</param>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageFragment.NewStorageManager">
            <summary>
            Gets a storage manager for remote calls
            </summary>
            <returns>The manager</returns>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageFragment.WriteToStream(Oculus.Storage.IO.Interfaces.IStream)">
            <summary>
            Writes all data for the fragment to the specified stream. This method assumes the current data is correct. 
            That means if you don't do a proper Load with the s
            </summary>
            <param name="outputStream">The output stream</param>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageFragment.Delete">
            <summary>
            Deletes the fragment
            </summary>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageFragment.SetDataLocation(Oculus.Storage.ItemMoniker)">
            <summary>
            Sets the data location for this fragment
            </summary>
            <param name="newLocation">The new location of the fragment data, cannot be null</param>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageFragment.DeleteLocalData">
            <summary>
            Sets the data location for this fragment
            </summary>
        </member>
        <member name="T:Oculus.Storage.RemoteStorageDocument">
            <summary>
             This object is used to perform operations on a remote storage document object.
             This object can be serialized over remoting boundaries
            </summary>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.#ctor(Oculus.Storage.ItemMoniker)">
            <summary>
            Initialize the remote storage document with the specified moniker
            </summary>
            <param name="documentMoniker">The moniker to use</param>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.#ctor(Oculus.Storage.StorageDocument)">
            <summary>
            Creates a document object that can cross remoting boundaries and call back
            to its source server. Copies all values from the base document and creates
            remote fragment objects for each fragment.
            </summary>
            <param name="baseDocument">The populated document, cannot be null. System moniker can also not be null</param>
        </member>
        <member name="P:Oculus.Storage.RemoteStorageDocument.Metadata">
            <summary>
            Get/Set the metadata for the document. To prevent errors in remoting (XmlDocument is NOT
            serializable), the document is NEVER stored in memory and is generated each time on the fly.
            </summary>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.NewStorageManager">
            <summary>
            Gets a storage manager for remote calls
            </summary>
            <returns>The manager</returns>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.ChangeDescription(System.String)">
            <summary>
            Changes the description
            </summary>
            <param name="newDescription">the new description</param>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.ChangeName(System.String)">
            <summary>
            Changes the name
            </summary>
            <param name="newName">the new name</param>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.ChangeMetadata(System.Xml.XmlDocument)">
            <summary>
            Changes the metadata
            </summary>
            <param name="newMetadata">the new metadata. If null, indicates a deletion</param>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.ChangeProfile(System.Guid,Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Changes the profile
            </summary>
            <param name="newProfileId">the new profile id</param>
            <param name="newIndexes">The new set of indexes. Cannot be null.</param>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.Reindex(Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Assigns a new set of indexes to the document
            </summary>
            <param name="newIndexes">The new set of indexes. Cannot be null.</param>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.Delete">
            <summary>
            Deletes the document from its plug-in
            </summary>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.Add">
            <summary>
            Cannot be called on a remote storage document
            </summary>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.AddToPlugin(System.String)">
            <summary>
            Cannot be called on a remote storage document
            </summary>
            <param name="pluginId">Ignored</param>
        </member>
        <member name="M:Oculus.Storage.RemoteStorageDocument.ConsolidatedWrite(Oculus.Storage.IO.Interfaces.IStream,System.String)">
            <summary>
            Performs a consolidated write of ALL the fragments in the moniker. Obviously, this can only be 
            done with certain data types. This functionality will generally only be used in situations where
            the content is known ahead of time to be TIFF data. All images within the document should be combined
            </summary>
            <param name="outputStream">The stream to write to</param>
            <param name="mimeType">The target mime type</param>
        </member>
        <member name="T:Oculus.Storage.Utility">
            <summary>
            Utility class for storage-related functionality
            </summary>
        </member>
        <member name="M:Oculus.Storage.Utility.GetAnnotation(System.Xml.XmlDocument)">
            <summary>
            Normalizes the annotation xml to the Oculus 10 format and deserializes to the
            annotation objects.
            </summary>
            <param name="annotationXml">The xml to normalize/deserialize</param>
            <returns>The deserialized, denormalized xml. If the argument is null or has no document element, null is returned</returns>
        </member>
        <member name="M:Oculus.Storage.Utility.NormalizeAnnotationXml(System.Xml.XmlDocument)">
            <summary>
            Normalizes the annotation xml to the Oculus 10 format
            </summary>
            <param name="annotationXml">The xml to normalize</param>
            <returns>The normalized xml. If the argument is null, or contains no document element, null is returned</returns>
        </member>
        <member name="M:Oculus.Storage.Utility.ConvertAnnotationToV8(System.Xml.XmlDocument,System.String)">
            <summary>
            Converts the annotation xml from v.9 to v.8 format
            </summary>
            <param name="annotationXml">The annotation xml</param>
            <param name="pluginId">The id of the plug-in - this is REQUIRED as it forms part of the fragment id</param>
            <returns>Annotation xml in v.8 format</returns>
        </member>
        <member name="T:Oculus.Applications.Console.HostHelper">
            <summary>
            Contains static methods used within the console host application for cross-platform reduction
            in redundant code
            </summary>
        </member>
        <member name="M:Oculus.Applications.Console.HostHelper.#ctor(Oculus.Applications.Interfaces.Forms.IDialogProvider)">
            <summary>
            Create a new instance of the host helper
            </summary>
            <param name="dialogProvider">The dialog provider to use</param>
        </member>
        <member name="P:Oculus.Applications.Console.HostHelper.Configuration">
            <summary>
            Gets the configuration for the system
            </summary>
        </member>
        <member name="M:Oculus.Applications.Console.HostHelper.HandleAuthenticate(Oculus.Applications.Interfaces.Console.IConsoleApplication)">
            <summary>
            Checks the instance for whether or not it requires authentication and performs the authentication as required
            </summary>
            <param name="instance">The instance to check, cannot be null</param>
            <returns>True if successfully authenticated or no authenication required</returns>
        </member>
        <member name="M:Oculus.Applications.Console.HostHelper.LoadApplication(System.String,Oculus.Applications.Interfaces.Console.IConsoleApplication@,System.Boolean@)">
            <summary>
            Loads the SINGLE application into the console
            </summary>
            <param name="selectedApplication">The application, this could either be a Guid (linking to config) or a class name</param>
            <param name="instance">The instance to show</param>
            <param name="shouldContinue">Whether or not the app should continue and load or shut down</param>
        </member>
        <member name="M:Oculus.Applications.Console.HostHelper.LoadApplicationsList(Oculus.Applications.Interfaces.Console.Collections.ConsoleApplicationCollection@,System.Boolean@)">
            <summary>
            Get a list of all available console apps on the current machine
            </summary>
            <param name="applications">The list of applications available</param>
            <param name="shouldContinue">Whether or not the app should continue after running this method</param>
        </member>
        <member name="T:Oculus.Applications.Console.ApplicationDetail">
            <summary>
            Contains detail information on a console application - used in display.
            </summary>
        </member>
        <member name="M:Oculus.Applications.Console.ApplicationDetail.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="P:Oculus.Applications.Console.ApplicationDetail.Name">
            <summary>
            Get/set the name of the application to display
            </summary>
        </member>
        <member name="P:Oculus.Applications.Console.ApplicationDetail.Image">
            <summary>
            Get/set the image associated with the application
            </summary>
        </member>
        <member name="T:Oculus.Applications.Defaults.SearchPlugin">
            <summary>
            Default (empty) implementation of the indexing validation plug-in
            </summary>
        </member>
        <member name="M:Oculus.Applications.Defaults.SearchPlugin.PostprocessResults(Oculus.Searching.SearchResult)">
            <summary>
            Does nothing
            </summary>
            <param name="result">Ignored</param>
        </member>
        <member name="M:Oculus.Applications.Defaults.SearchPlugin.PreprocessSearch(Oculus.Searching.SearchCriteria)">
            <summary>
            Does nothing
            </summary>
            <param name="criteria">Ignored</param>
        </member>
        <member name="M:Oculus.Applications.Defaults.SearchPlugin.PreprocessProfile(Oculus.Configuration.ProfileContext)">
            <summary>
            Does nothing
            </summary>
            <param name="profile">Ignored</param>
        </member>
        <member name="T:Oculus.Applications.Defaults.Authenticator">
            <summary>
            Default implementation of the authenticator interface
            </summary>
        </member>
        <member name="P:Oculus.Applications.Defaults.Authenticator.ShouldAuthenticate">
            <summary>
            Yes, we need to authenticate
            </summary>
        </member>
        <member name="M:Oculus.Applications.Defaults.Authenticator.Authenticate(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Handles authentication against local comms, stores user information for subsequent requests
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
            <param name="raiseError">true to raise the exception to the calling application</param>
            <returns>True if authenticated succeeded, false otherwise</returns>
        </member>
        <member name="T:Oculus.Applications.Defaults.IndexingProvider">
            <summary>
            Default (empty) implementation of the indexing validation plug-in
            </summary>
        </member>
        <member name="M:Oculus.Applications.Defaults.IndexingProvider.PreprocessDocument(Oculus.Configuration.ProfileContext,Oculus.Storage.StorageDocument)">
            <summary>
            Does nothing
            </summary>
            <param name="profileContext">ignored</param>
            <param name="document">ignored</param>
        </member>
        <member name="M:Oculus.Applications.Defaults.IndexingProvider.PreprocessDocument(Oculus.Configuration.ProfileContext,Oculus.Acquisition.IndexDocument)">
            <summary>
            Does nothing
            </summary>
            <param name="profileContext">ignored</param>
            <param name="document">ignored</param>
        </member>
        <member name="M:Oculus.Applications.Defaults.IndexingProvider.ValidateIndexes(Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList,Oculus.Storage.StorageDocument)">
            <summary>
            Returns null
            </summary>
            <param name="profileContext">ignored</param>
            <param name="newIndexes">ignored</param>
            <param name="document">ignored</param>
            <returns>null</returns>
        </member>
        <member name="M:Oculus.Applications.Defaults.IndexingProvider.ValidateIndexes(Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList,Oculus.Acquisition.IndexDocument)">
            <summary>
            Returns null
            </summary>
            <param name="profileContext">ignored</param>
            <param name="newIndexes">ignored</param>
            <param name="document">ignored</param>
            <returns>null</returns>
        </member>
        <member name="M:Oculus.Applications.Defaults.IndexingProvider.ProcessEvent(Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList,Oculus.Storage.StorageDocument,System.String,Oculus.Applications.IndexEvent)">
            <summary>
            Does nothing
            </summary>
            <param name="profileContext">ignored</param>
            <param name="editIndexes">ignored</param>
            <param name="document">ignored</param>
            <param name="indexName">ignored</param>
            <param name="indexEvent">ignored</param>
            <returns>ignored</returns>
        </member>
        <member name="M:Oculus.Applications.Defaults.IndexingProvider.ProcessEvent(Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList,Oculus.Acquisition.IndexDocument,System.String,Oculus.Applications.IndexEvent)">
            <summary>
            Does nothing
            </summary>
            <param name="profileContext">ignored</param>
            <param name="editIndexes">ignored</param>
            <param name="document">ignored</param>
            <param name="indexName">ignored</param>
            <param name="indexEvent">ignored</param>
            <returns>ignored</returns>
        </member>
        <member name="T:Oculus.Applications.Indexing.IndexEventResponse">
            <summary>
            For future use...
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.IndexEventResponse.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Oculus.Applications.Indexing.IndexingConfiguration">
            <summary>
            Can be used to deserialize indexing configuration into an object
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.IndexingConfiguration.ShowQueueCount">
            <summary>
            Get/Set whether or not we should display the queue count
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.IndexingConfiguration.AllowDocDelete">
            <summary>
            Get/Set whether or not we should display the queue count
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.IndexingConfiguration.AllowPageDelete">
            <summary>
            Get/Set whether or not we should allow page deletions
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.IndexingConfiguration.AllowAnnotationEdits">
            <summary>
            Get/Set whether or not we should allow annotation edits
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.IndexingConfiguration.AddIn">
            <summary>
            Get/Set the add in type name for indexing
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.IndexingConfiguration.IndexerAddIn">
            <summary>
            Get/Set the indexer add in type name for indexing
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.IndexingConfiguration.AllowMultiIndex">
            <summary>
            Get/Set whether or not we should allow multiple indexes for a single document
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.IndexingConfiguration.ShowAllBranchQueues">
            <summary>
            Get/Set whether or not we should display all queues in the branch or only those from the current machine
            </summary>
        </member>
        <member name="T:Oculus.Applications.Indexing.Collections.IndexingErrorList">
            <summary>
            A list of indexing error objects
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Collections.IndexingErrorList.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Collections.IndexingErrorList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="M:Oculus.Applications.Indexing.Collections.IndexingErrorList.GetError(System.String)">
            <summary>
            Returns the error for the index name, or null if there is none
            </summary>
            <param name="indexName">The name of the index to retrieve, cannot be null</param>
            <returns>The error message, or null if not present</returns>
        </member>
        <member name="T:Oculus.Applications.Indexing.IndexingError">
            <summary>
            Represents an error in indexing. Links an error message to an index name
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.IndexingError.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.IndexingError.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="indexName">The index name</param>
            <param name="errorMessage">The error message</param>
        </member>
        <member name="P:Oculus.Applications.Indexing.IndexingError.IndexName">
            <summary>
            Get/set the index name
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.IndexingError.ErrorMessage">
            <summary>
            Get/set the error message
            </summary>
        </member>
        <member name="T:Oculus.Applications.Indexing.Manager">
            <summary>
            This manager can be used to handle basic indexing functions. There is a current "limitation" that
            only queues to which the user has access can be accessed. This may be modified later to allow connecting
            to any arbitrary machine/queue, but for now the queue must exist in the current branch and the user
            must have use access to it.
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.#ctor">
            <summary>
            Creates an instance of the manager which has access to all queues in the current branch.
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.#ctor(System.Boolean)">
            <summary>
            Initialization constructor
            </summary>
            <param name="accessAllQueuesInBranch">
            Set to true to access all queues within the current branch. False will only access queues
            on the current machine
            </param>
        </member>
        <member name="E:Oculus.Applications.Indexing.Manager.IndexDocumentChanged">
            <summary>
            Fires when the index document has changed
            </summary>
        </member>
        <member name="E:Oculus.Applications.Indexing.Manager.SelectedQueueChanged">
            <summary>
            Fires when the selected queue has changed
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.OnIndexDocumentChanged">
            <summary>
            Raises the IndexDocumentChanged event
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.OnSelectedQueueChanged">
            <summary>
            Raises the SelectedQueueChanged event
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.Manager.SelectedMachine">
            <summary>
            Get the machine name for the currently selected queue, will be null
            if no queue is currently selected
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.Manager.AvailableQueues">
            <summary>
            Get the list of queues available to the user. Please note this is a cached value
            from the first time it is accessed.
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.Manager.SelectedQueue">
            <summary>
            Get/Set the currently selected queue. Setting this value will clear the current
            index document, if there is one, WITHOUT releasing it.
            Please note the queue change event will fire AFTER the index document event, unless the
            index document is already null, in which case the index document change event will not 
            fire at all.
            </summary>
            <exception cref="T:System.ArgumentException">
            On set, if the queue is not one to which the user has access. Null is an acceptable value
            </exception>
        </member>
        <member name="P:Oculus.Applications.Indexing.Manager.IndexDocument">
            <summary>
            Get/Set the active index document. Generally you shouldn't set this value, but sometime
            it may be useful to do so.
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.Manager.QueueCount">
            <summary>
            Gets the total number of items in the selected queue
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.Manager.HasDocument">
            <summary>
            Gets whether or not we currently have a document
            </summary>
        </member>
        <member name="P:Oculus.Applications.Indexing.Manager.HasQueue">
            <summary>
            Gets whether or not we currently have an selected queue
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.VerifyDocument">
            <summary>
            Ensures there is a document we can use for an operation
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.VerifyQueue">
            <summary>
            Ensures there is a document we can use for an operation
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.NewQueueManager">
            <summary>
            Retrieves a queue manager for the currently selected queue
            </summary>
            <returns>The manager linked to the appropriate server</returns>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.LoadAvailableQueues">
            <summary>
            Loads the available queues for the currently logged in user. Modifies both the 
            m_queueToMachineLink and m_availableQueues members
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.RequestDocument">
            <summary>
            Retrieves the next document in the queue. This will be populated into the IndexDocument
            property, but it will also be returned as the result of this method. If there is currently
            an active document, the document WILL NOT be released automatically, allowing a user to 
            cycle through all the documents in the queue
            </summary>
            <returns>The index document, or null if there are no documents available</returns>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.ReleaseDocument">
            <summary>
            Release ownership of the specfied document
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.ProcessDocument">
            <summary>
            Indicates document processing has completed. Submits the document XML to the server for processing
            but DOES NOT release the current document. This method should be used for multiple indexing.
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.CompleteDocument">
            <summary>
            Indicates document processing has completed. Clears the current index document. YOU MUST call process document first,
            else the document will not carry on in its process
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.DeleteDocument">
            <summary>
            Deletes the specified document
            </summary>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.DeletePage(System.Int32,System.Boolean)">
            <summary>
            Deletes the specified page from the active document. If the document only has one
            page, it will only delete the page, not the document, unless the delete flag is set to true.
            </summary>
            <param name="pageIndex">The index of the page to delete</param>
            <param name="deleteDocIfSinglePage">If true, deletes the entire document if there is only one page</param>
            <exception cref="T:System.IndexOutOfRangeException">If the index specified is invalid</exception>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.DeletePage(Oculus.Storage.StorageFragment,System.Boolean)">
            <summary>
            Deletes the specified page from the active document. If the document only has one
            page, it will only delete the page, not the document, unless the delete flag is set to true.
            </summary>
            <param name="page">The page to delete. The value is NOT verified to be part of the document</param>
            <param name="deleteDocIfSinglePage">If true, deletes the entire document if there is only one page</param>
        </member>
        <member name="M:Oculus.Applications.Indexing.Manager.GetStorageDocument">
            <summary>
            Gets the active document as a storage document
            </summary>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Console.Collections.ConsoleApplicationCollection">
            <summary>
            Collection class for console applications
            </summary>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Console.IConsoleApplication">
            <summary>
            Represents an application which can be hosted within the imaging console. This object
            should not be the form itself in order to help with load times.
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Console.IConsoleApplication.RequireAuthentication">
            <summary>
            Indicates whether or not the application requires authentication
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Console.IConsoleApplication.Instance">
            <summary>
            Provides the form instance that is to be hosted by the console and presented to the user
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Console.IConsoleApplication.ItemDetail">
            <summary>
            Provides information about the console item for display
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Console.IConsoleApplication.RequireValidLicense">
            <summary>
            If true, a valid, compliant Oculus license will be required for the application to load.
            </summary>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft">
            <summary>
            Represents an image viewer control with basic viewing operations
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.Image">
            <summary>
            Get/set the active image
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.CursorMode">
            <summary>
            Get/set the cursor mode for the image viewer
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.LoadFragment(Oculus.Storage.ItemMoniker,Oculus.Storage.Annotations.FragmentAnnotation)">
            <summary>
            Load the display from a Fragment
            </summary>
            <param name="fragmentMoniker">the fragment moniker</param>
            <param name="annotation">the annotations for the fragment</param>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.Zoom">
            <summary>
            Get/set the zoom percentage against the control (100 = full size)
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.FitToHeight">
            <summary>
            Fit the current image to height
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.FitToWidth">
            <summary>
            Fit the current image to width
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.ZoomIn">
            <summary>
            Zooms into the image
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.ZoomOut">
            <summary>
            Zooms out from the image
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.AllowAnnotationEdits">
            <summary>
            Get/set whether or not annotation edits can be made. Default is true.
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.GetAnnotations">
            <summary>
            Gets the current set of annotations for the viewer, may be null
            </summary>
            <returns>The set of annotations</returns>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.DeleteSelectedAnnotations">
            <summary>
            Deletes the currently selected annotation items
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.Rotate(Oculus.Applications.RotateType)">
            <summary>
            Rotate the image according to the rotation
            </summary>
            <param name="rotation">The rotation to perform</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.GetRotatedImage">
            <summary>
            Returns a *copy* of the image with the current rotation
            </summary>
            <returns>The image</returns>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.Clear">
            <summary>
            Clear the current image
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.ImageDataChanged">
            <summary>
            Fires when the actual image data changes (e.g. on flip or rotate)
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.KeyUp">
            <summary>
            Fires on key press
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.ZoomChanged">
            <summary>
            Fires when the zoom level changes
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IImageViewerAccusoft.CursorModeChanged">
            <summary>
            Fires when the cursor mode changes
            </summary>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Controls.Collections.MenuItemCollection">
            <summary>
            Collection class for menu items
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.Collections.MenuItemCollection.GetItemForName(System.String)">
            <summary>
            Retrieves a menu item with the specified name
            </summary>
            <param name="name">The name of the menu item</param>
            <returns>The menu item, or null if it can't be found</returns>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Controls.IFragmentPicker">
            <summary>
            Interface for controls used to pick fragments from a document
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IFragmentPicker.Document">
            <summary>
            The storage document loaded into the fragment picker
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IFragmentPicker.SelectedFragment">
            <summary>
            Get/set the currently selected fragment
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IFragmentPicker.FragmentSelected">
            <summary>
            Indicates that the selected fragment has changed
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IFragmentPicker.DocumentChanged">
            <summary>
            Indicates the selected document has changed
            </summary>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Controls.IIndexEditor">
            <summary>
            Interface for controls used at indexing
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IIndexEditor.ValueChange">
            <summary>
            Fires when the value is changed by the user (committed to the control)
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IIndexEditor.Value">
            <summary>
            Get/Set the value for the index control
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IIndexEditor.Color">
            <summary>
            Get/Set the value for the index control
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IIndexEditor.Index">
            <summary>
            Get/set the index assocated with the control. Must be set
            prior to setting a value
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IIndexEditor.ValidateValue">
            <summary>
            Runs validation on the current value
            </summary>
            <returns>The error message, or null if no errors</returns>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IIndexEditor.SetError(System.String)">
            <summary>
            Set or clear the error
            </summary>
            <param name="error">the error to display or empty string to clear error</param>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Controls.IIndexingControl">
            <summary>
            The indexing control interface
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IIndexingControl.ProfileContextChanged">
            <summary>
            Raised when the profile context changes
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IIndexingControl.IndexEvent">
            <summary>
            Raised for any index events
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IIndexingControl.ProfileContext">
            <summary>
            The from file context to work from
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IIndexingControl.GetIndexValue(System.String)">
            <summary>
            Get a specific index value
            </summary>
            <param name="indexName">the name of the index to get the value for</param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IIndexingControl.GetIndexValues">
            <summary>
            Get all the values for all the indexes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IIndexingControl.SetIndexValue(Oculus.Configuration.Components.IndexValue)">
            <summary>
            Set the value for a specific inex
            </summary>
            <param name="indexValue">the index</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IIndexingControl.SetIndexValueColor(Oculus.Configuration.Components.IndexValue,System.Drawing.Color)">
            <summary>
            Set the value and color for a specific inex
            </summary>
            <param name="indexValue">the index</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IIndexingControl.SetIndexValues(Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Set all the indexes's values
            </summary>
            <param name="indexValues">the list of index name/value collection</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IIndexingControl.ValidateIndexes">
            <summary>
            Validates the values for the current index editors based on the profile context indexes
            </summary>
            <returns>true if the index values is valid</returns>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IIndexingControl.SetIndexErrors(Oculus.Applications.Indexing.Collections.IndexingErrorList)">
            <summary>
            set the error on the index editors based on the index name
            </summary>
            <param name="errors">the list of index errors indexed by the index name</param>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IIndexingControlExtendedFunctionality.IndexEditors">
            <summary>
            Pass a dictionary as additional parameters -
            </summary>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Controls.IMenuItem">
            <summary>
            Menu item in an application
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IMenuItem.Enabled">
            <summary>
            Get/set whether or not the menu item is enabled
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IMenuItem.Name">
            <summary>
            Gets the name associated with the menu item
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IMenuItem.Checked">
            <summary>
            For menu items that have a check state, use this property to
            get or change the check state. Will always be false for menu
            items without a check state
            </summary>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Controls.IImageViewer">
            <summary>
            Represents an image viewer control with basic viewing operations
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IImageViewer.Image">
            <summary>
            Get/set the active image
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IImageViewer.CursorMode">
            <summary>
            Get/set the cursor mode for the image viewer
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewer.LoadFragment(Oculus.Storage.ItemMoniker,Oculus.Storage.Annotations.FragmentAnnotation)">
            <summary>
            Load the display from a Fragment
            </summary>
            <param name="fragmentMoniker">the fragment moniker</param>
            <param name="annotation">the annotations for the fragment</param>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IImageViewer.Zoom">
            <summary>
            Get/set the zoom percentage against the control (100 = full size)
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewer.FitToHeight">
            <summary>
            Fit the current image to height
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewer.FitToWidth">
            <summary>
            Fit the current image to width
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewer.ZoomIn">
            <summary>
            Zooms into the image
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewer.ZoomOut">
            <summary>
            Zooms out from the image
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IImageViewer.AllowAnnotationEdits">
            <summary>
            Get/set whether or not annotation edits can be made. Default is true.
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewer.GetAnnotations">
            <summary>
            Gets the current set of annotations for the viewer, may be null
            </summary>
            <returns>The set of annotations</returns>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewer.DeleteSelectedAnnotations">
            <summary>
            Deletes the currently selected annotation items
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewer.Rotate(Oculus.Applications.RotateType)">
            <summary>
            Rotate the image according to the rotation
            </summary>
            <param name="rotation">The rotation to perform</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewer.GetRotatedImage">
            <summary>
            Returns a *copy* of the image with the current rotation
            </summary>
            <returns>The image</returns>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IImageViewer.Clear">
            <summary>
            Clear the current image
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IImageViewer.ImageDataChanged">
            <summary>
            Fires when the actual image data changes (e.g. on flip or rotate)
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IImageViewer.KeyUp">
            <summary>
            Fires on key press
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IImageViewer.ZoomChanged">
            <summary>
            Fires when the zoom level changes
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IImageViewer.CursorModeChanged">
            <summary>
            Fires when the cursor mode changes
            </summary>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Controls.IThumbnailViewer">
            <summary>
            Represents a thumbnail image viewer control
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IThumbnailViewer.Images">
            <summary>
            The set of images to display
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Controls.IThumbnailViewer.SelectedImageIndex">
            <summary>
            Get/Set the index of the current active image
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IThumbnailViewer.KeyUp">
            <summary>
            Fires on key press
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Controls.IThumbnailViewer.SelectionChanged">
            <summary>
            Fires when selection changes
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IThumbnailViewer.SetCaptions(System.String[],System.Int32)">
            <summary>
            Set captions against the thumbnails starting at the offset
            </summary>
            <param name="captions">The list of captions to set</param>
            <param name="offset">The offset (starting point) for the captions</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Controls.IThumbnailViewer.RefreshThumbnail(System.Int32)">
            <summary>
            Requests a refresh of the thumbnail at the specified index
            </summary>
            <param name="index">The index of the thumbnail to reload</param>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Indexing.IDynamicIndexPlugin">
            <summary>
            The interface for working with dynamic indexinges. Please note, this inherits all methods
            from the validation plugin
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Indexing.IDynamicIndexPlugin.ProcessEvent(Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList,Oculus.Storage.StorageDocument,System.String,Oculus.Applications.IndexEvent)">
            <summary>
            Process an event for a storage document during reindexing. The profile context can be modified
            to change index constraints (including list indexes), but indexes cannot be added or removed
            at this time, nor can their type be changed.  The values in editIndexes are used to update the display,
            and original versions of the values can be found on the document object.
            </summary>
            <param name="profileContext">The profile context for the operation</param>
            <param name="editIndexes">The current set of index values, as entered by the user</param>
            <param name="document">The document being reindexed</param>
            <param name="indexName">The name of the index which raised the event</param>
            <param name="indexEvent">The event raised</param>
            <returns>Ignored, can be null. In future, this object could allow for more complex actions</returns>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Indexing.IDynamicIndexPlugin.ProcessEvent(Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList,Oculus.Acquisition.IndexDocument,System.String,Oculus.Applications.IndexEvent)">
            <summary>
            Process an event for a index document during reindexing. The profile context can be modified
            to change index constraints (including list indexes), but indexes cannot be added or removed
            at this time, nor can their type be changed.  The values in editIndexes are used to update the display,
            and original versions of the values can be found on the document object.
            </summary>
            <param name="profileContext">The profile context for the operation</param>
            <param name="editIndexes">The current set of index values, as entered by the user</param>
            <param name="document">The document being reindexed</param>
            <param name="indexName">The name of the index which raised the event</param>
            <param name="indexEvent">The event raised</param>
            <returns>Ignored, can be null. In future, this object could allow for more complex actions</returns>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Indexing.IIndexValidationPlugin">
            <summary>
            The interface for working with indexing validation
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Indexing.IIndexValidationPlugin.PreprocessDocument(Oculus.Configuration.ProfileContext,Oculus.Acquisition.IndexDocument)">
            <summary>
            Preprocessing for an index document. Use this opportunity to prepulate indexes on the document
            object or to modify the indexes within the profile context. This method will be called for documents
            at indexing during the acquisition phase.
            </summary>
            <param name="profileContext">The profile context for the operation</param>
            <param name="document">The document to be indexed</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Indexing.IIndexValidationPlugin.PreprocessDocument(Oculus.Configuration.ProfileContext,Oculus.Storage.StorageDocument)">
            <summary>
            Preprocessing for a storage document. Use this opportunity to prepulate indexes on the document
            object or to modify the indexes within the profile context. This method will be called for documents
            during reindexing during the storage phase.
            </summary>
            <param name="profileContext">The profile context for the operation</param>
            <param name="document">The document to be reindexed</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Indexing.IIndexValidationPlugin.ValidateIndexes(Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList,Oculus.Acquisition.IndexDocument)">
            <summary>
            Performs an index validation. Return a collection of errors to HALT the indexing operation
            and display the errors to the user. You may use this opportunity to change the profile context,
            alter the new set of index values, or modify the index document directly. Please note that any
            index values on the document will be OVERWRITTEN by the same indexes from the index set.
            
            This will only be called AFTER the initial index validation (according to index type) has been
            performed. If you want to add indexes which aren't in the list, add them directly to the document.
            </summary>
            <param name="profileContext">The profile context, as specified in preprocessing</param>
            <param name="newIndexes">The new set of indexes, as specified by the user</param>
            <param name="document">The document being indexed</param>
            <returns>The set of errors if there are any, otherwise null or an empty list to signify no errors</returns>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Indexing.IIndexValidationPlugin.ValidateIndexes(Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList,Oculus.Storage.StorageDocument)">
            <summary>
            Performs an index validation. Return a collection of errors to HALT the reindexing operation
            and display the errors to the user. You may use this opportunity to change the profile context,
            alter the new set of index values, or modify the storage document directly. Please note that any
            index values on the document will be OVERWRITTEN by the same indexes from the index set.
            
            This will only be called AFTER the initial index validation (according to index type) has been
            performed. If you want to add indexes which aren't in the list, add them directly to the document.
            </summary>
            <param name="profileContext">The profile context, as specified in preprocessing</param>
            <param name="newIndexes">The new set of indexes, as specified by the user</param>
            <param name="document">The document being reindexed</param>
            <returns>The set of errors if there are any, otherwise null or an empty list to signify no errors</returns>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Forms.IDialogProvider">
            <summary>
            Helper interface designed to allow customized dialogs throughout our applications
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Forms.IDialogProvider.ShowMessageBox(System.String,System.String)">
            <summary>
            Shows a message box with the specified message and caption
            </summary>
            <param name="message">The main message to display</param>
            <param name="caption">The caption for the dialog window</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Forms.IDialogProvider.ShowLoginForm">
            <summary>
            Shows the standard login form
            </summary>
            <returns>The result of the form, should be OK if login successful, all else is considered failure</returns>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Forms.IDialogProvider.ShowErrorBox(System.String,System.Exception)">
            <summary>
            Displays the standard error form
            </summary>
            <param name="message">The message to display</param>
            <param name="exception">The associated exception</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Forms.IDialogProvider.ShowPrompt(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Displays a prompt to the user
            </summary>
            <param name="message">The main message to display</param>
            <param name="caption">The caption for the dialog window</param>
            <param name="messageBoxButtons">The set of buttons to display</param>
            <returns>The result, should be within the set of requested buttons</returns>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Forms.IDialogProvider.ValidateLicense(Oculus.Configuration.Components.Configuration)">
            <summary>
            Validates the current available license and shows the validation failed dialog
            if validation fails.
            </summary>
            <param name="configuration">The configuration to use</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="T:Oculus.Applications.Interfaces.ControlCentre.IDesigner">
            <summary>
            Used when designing individual components like appliations or plug-ins, a designer
            is a windows control which implements this interface.
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.ControlCentre.IDesigner.Settings">
            <summary>
            Get/Set the configuration for the particular component
            </summary>
        </member>
        <member name="T:Oculus.Applications.Interfaces.ControlCentre.IManager">
            <summary>
            Represents a top-level manager object in control centre, a windows form control associated
            with a section of configuration
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.ControlCentre.IManager.Configuration">
            <summary>
            Sets the configuration object against the manager
            </summary>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Scanning.IAcquisitionDestination">
            <summary>
            Represents an object against which documents can be saved
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Scanning.IAcquisitionDestination.Save(Oculus.Acquisition.Collections.DocumentList)">
            <summary>
            Save the set of documents to the object's destination
            </summary>
            <param name="documents">The documents to save</param>
            <returns>The return value contains the list of document that failed to save</returns>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Scanning.IAcquisitionSource">
            <summary>
            Represents a control that can be used for acquisition.
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IAcquisitionSource.PageAcquired">
            <summary>
            Fired whenever a page is acquired, may be more than one.
            Images *MUST* be saved to disk before being returned.
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IAcquisitionSource.ExceptionEncountered">
            <summary>
            Used to fire errors, must still raise the complete event
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IAcquisitionSource.AcquireComplete">
            <summary>
            Fires when all pages have been acquired
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Scanning.IAcquisitionSource.SelectSource">
            <summary>
            Called to select the source for the control, e.g. a TWAIN source
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Scanning.IAcquisitionSource.AcquireStart(Oculus.Configuration.AppConfigSection)">
            <summary>
            Acquires images from the source.
            </summary>
            <param name="parameters">The set of overriding parameters for the operation</param>
            <returns>The list of paths to images on the file system</returns>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Scanning.IConfigurable">
            <summary>
            Base interface allows the maintaining configuration for an object.
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IConfigurable.Config">
            <summary>
            this is the configuration used for each control 
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Scanning.IConfigurable.EditConfiguration">
            <summary>
            this is the entry point for configuring this Config
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Scanning.IConfigurable.SaveConfiguration(Oculus.Configuration.AppConfigDocument)">
            <summary>
            Saves the configuration to the section
            </summary>
            <param name="configuration">The section to save to</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Scanning.IConfigurable.LoadConfiguration(Oculus.Configuration.AppConfigDocument)">
            <summary>
            Loads the configuration from the specified configuration object
            </summary>
            <param name="configuration">The configuration</param>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Scanning.IDocumentManager">
            <summary>
            Interface which gives access to the 
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IDocumentManager.Documents">
            <summary>
            Get/set the running list of documents
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IDocumentManager.Profiles">
            <summary>
            Get/set the profiles available
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IDocumentManager.AllImages">
            <summary>
            Get/set the list of *all* images
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IDocumentManager.SelectedDocument">
            <summary>
            Get the current, active document
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IDocumentManager.SelectedDocumentIndex">
            <summary>
            Get the current active document index, this is based on the selected image index
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IDocumentManager.SelectedDocumentImageIndex">
            <summary>
            Get the current active image index relative to its document
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IDocumentManager.SelectedImageIndex">
            <summary>
            Get/set the current selected image index, refers to the index within the overall images collection
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IDocumentManager.IsImageSelected">
            <summary>
            Returns a boolean indicating whether or not an image is currently selected
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IDocumentManager.SelectedImageChange">
            <summary>
            Indicates a change of image has taken place
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Scanning.IDocumentManager.SelectNextDocument">
            <summary>
            Selects the next document in the manager
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Scanning.IDocumentManager.SelectPreviousDocument">
            <summary>
            Selects the previous document in the manager
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Scanning.IDocumentManager.SelectDocument(System.Int32)">
            <summary>
            Selects the first page in the specified document
            </summary>
            <param name="documentIndex">The index of the document to select</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Scanning.IDocumentManager.SelectPage(System.Int32)">
            <summary>
            this should change the selected page for the active document
            </summary>
            <param name="pageIndex">the page index for the active document</param>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Scanning.IBarcodeReader">
            <summary>
            Used to extract data from a set of images
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Scanning.IBarcodeReader.ReadBarcodes(Oculus.Acquisition.Image)">
            <summary>
            The only job is to read the set of barcodes from an image
            </summary>
            <param name="image">The image to read</param>
            <returns>The set of barcodes for the image</returns>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Scanning.IProfileProvider">
            <summary>
            Represents an object handling authentication
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IProfileProvider.Profiles">
            <summary>
            Retrieves the list of profiles available to the user
            </summary>
            <returns>The set of profiles</returns>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IProfileProvider.SelectedProfileContext">
            <summary>
            this is the selected profile
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IProfileProvider.SelectedProfileChanged">
            <summary>
            Fires when the selected profile changes
            </summary>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Scanning.IScanApplication">
            <summary>
            Represents a scanning application
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IScanApplication.DeletePage">
            <summary>
            Fires when a page is deleted
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IScanApplication.DeleteDocument">
            <summary>
            Fires when a document is deleted
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IScanApplication.DeleteBatch">
            <summary>
            Fires when a whole batch is deleted
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IScanApplication.AcquireStart">
            <summary>
            Fires when an acquisition is starting
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IScanApplication.AcquirePage">
            <summary>
            Fires when a page is acquired between start and complete. The last image will be available
            int the AllImages collection on the DocumentManager.
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IScanApplication.AcquireComplete">
            <summary>
            Fires when acquisition is complete
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IScanApplication.SaveStart">
            <summary>
            Fires when saving starts
            </summary>
        </member>
        <member name="E:Oculus.Applications.Interfaces.Scanning.IScanApplication.SaveComplete">
            <summary>
            Fires when saving completes
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IScanApplication.ImageViewer">
            <summary>
            the image viewer
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IScanApplication.ThumbnailViewer">
            <summary>
            the Thumbnail Viewer
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IScanApplication.DocumentManager">
            <summary>
            Gets the document manager associated with the application
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IScanApplication.ProfileProvider">
            <summary>
            Gets the profile provider for the application
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IScanApplication.BarcodeReader">
            <summary>
            Gets the image analyzer for the application
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IScanApplication.MenuItems">
            <summary>
            Gets the menu items associated with the application
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.Scanning.IScanApplication.DialogProvider">
            <summary>
            Get the dialog provider for the application
            </summary>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Scanning.IScanPlugin">
            <summary>
            Represents a custom plug-in for scanning
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Scanning.IScanPlugin.Initialize(Oculus.Applications.Interfaces.Scanning.IScanApplication)">
            <summary>
            Called when the plug-in is added to the scan application
            </summary>
            <param name="scanApplication">The application to which the plug-in is added</param>
        </member>
        <member name="T:Oculus.Applications.Interfaces.IAuthenticator">
            <summary>
            Represents an object handling authentication
            </summary>
        </member>
        <member name="P:Oculus.Applications.Interfaces.IAuthenticator.ShouldAuthenticate">
            <summary>
            Return true if authentication is required
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.IAuthenticator.Authenticate(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Performs authentication with the username and password.
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
            <param name="raiseError">Set to true to raise an exception if encountered, false to consume (but still log) the exception</param>
            <returns>true for successful authentication, false otherwise</returns>
        </member>
        <member name="T:Oculus.Applications.Interfaces.Search.ISearchPlugin">
            <summary>
            Represents a custom plug-in for web search
            </summary>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Search.ISearchPlugin.PreprocessProfile(Oculus.Configuration.ProfileContext)">
            <summary>
            Allows modification of a profile prior to searching. Please note this will be called 
            EACH TIME a profile context is selected, and can be called multiple times for the same
            profile object
            </summary>
            <param name="profile">The profile - any modifications will affect what is displayed to the user</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Search.ISearchPlugin.PreprocessSearch(Oculus.Searching.SearchCriteria)">
            <summary>
            Optionally modify the search criteria before being submitted
            </summary>
            <param name="criteria">The search criteria</param>
        </member>
        <member name="M:Oculus.Applications.Interfaces.Search.ISearchPlugin.PostprocessResults(Oculus.Searching.SearchResult)">
            <summary>
            Optionally alter the result set returned to the user
            </summary>
            <param name="result">The set of results</param>
        </member>
        <member name="T:Oculus.Applications.Scanning.Collections.DocumentErrorDictionary">
            <summary>
            Contains document error objects indexed by integer
            </summary>
        </member>
        <member name="M:Oculus.Applications.Scanning.Collections.DocumentErrorDictionary.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Oculus.Applications.Scanning.Collections.DocumentErrorDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Required constructor for serialization.</summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Oculus.Applications.Scanning.DocumentError">
            <summary>
            Error when saving documents
            </summary>
        </member>
        <member name="M:Oculus.Applications.Scanning.DocumentError.#ctor(System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the AcquisitionDestinationError class.
            </summary>
            <param name="documentIndex"></param>
            <param name="exception"></param>
        </member>
        <member name="P:Oculus.Applications.Scanning.DocumentError.DocumentIndex">
            <summary>
            DocumentIndex
            </summary>
        </member>
        <member name="P:Oculus.Applications.Scanning.DocumentError.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="T:Oculus.Applications.Scanning.ImageAcquiredEventArgs">
            <summary>
            Contains details relating to image acquisition
            </summary>
        </member>
        <member name="M:Oculus.Applications.Scanning.ImageAcquiredEventArgs.#ctor(Oculus.Acquisition.Image)">
            <summary>
            Initialization constructor
            </summary>
            <param name="image">The image, cannot be null</param>
        </member>
        <member name="P:Oculus.Applications.Scanning.ImageAcquiredEventArgs.Image">
            <summary>
            Get/set the image acquired
            </summary>
        </member>
        <member name="T:Oculus.Applications.Scanning.ImageAcquiredEventHandler">
            <summary>
            Delegate for events using image acquisition
            </summary>
            <param name="source">The source object</param>
            <param name="args">The args</param>
        </member>
        <member name="T:Oculus.Applications.Scanning.MenuConstants">
            <summary>
            Constants for the menu item identifiers
            </summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.BarcodeConfig">
            <summary>ID for barcode configuration</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.BitDepth">
            <summary>ID for bit depth</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.DeleteAllPages">
            <summary>ID for delete all pages</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.DeletePage">
            <summary>ID for delete single page</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.FlipImage">
            <summary>ID for flip image 180</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.InsertPage">
            <summary>ID for insert page</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.LoadGlobal">
            <summary>ID for load global settings</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.MultiPage">
            <summary>ID for multipage</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.NetworkScanningConfig">
            <summary>ID for network scanning configuration</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.RemoveSeparator">
            <summary>ID for remove separator page</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.Rescan">
            <summary>ID for rescan page</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.RotateLeft">
            <summary>ID for rotate CCW</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.RotateRight">
            <summary>ID for rotate CW</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.Save">
            <summary>ID for save all</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.Scan">
            <summary>ID for scan</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.TWAINConfig">
            <summary>ID for TWAIN configuration</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.AcquireConfig">
            <summary>ID for application configuration</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.SelectSource">
            <summary>ID for select source drop-down</summary>
        </member>
        <member name="F:Oculus.Applications.Scanning.MenuConstants.SelectProfile">
            <summary>ID for select profile drop-down</summary>
        </member>
        <member name="T:Oculus.Applications.Toolbox.ActiveConfig">
            <summary>
            Wrapper around config settings for standalone mode
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.ActiveConfig.ConfigServer">
            <summary>
            Get/set the config server
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.ActiveConfig.SecurityServer">
            <summary>
            Get/set the security server
            </summary>
        </member>
        <member name="T:Oculus.Applications.Toolbox.AppConfig">
            <summary>
            Contains the current settings for the application
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.AppConfig.ApplicationMode">
            <summary>
            Get/set the application mode
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.AppConfig.StandaloneConfig">
            <summary>
            Get/set the standalone configuration
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.AppConfig.ActiveConfig">
            <summary>
            Get/set the standalone configuration
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.AppConfig.ConfigurationXml">
            <summary>
            Get/set the configuration xml
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.AppConfig.Configuration">
            <summary>
            Gets the configuration (based on the config xml)
            </summary>
        </member>
        <member name="T:Oculus.Applications.Toolbox.ApplicationMode">
            <summary>
            The modes in which the toolbox application can run
            </summary>
        </member>
        <member name="F:Oculus.Applications.Toolbox.ApplicationMode.Standalone">
            <summary>Standalone mode for the application - requires a local database connection</summary>
        </member>
        <member name="F:Oculus.Applications.Toolbox.ApplicationMode.Active">
            <summary>Active mode for the application - requires a server and a valid login</summary>
        </member>
        <member name="F:Oculus.Applications.Toolbox.ApplicationMode.Limited">
            <summary>Limited mode for the application - requires a server and has access to limited range of functionality</summary>
        </member>
        <member name="T:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper">
            <summary>
            Contains methods and queries for working with the acquisition database
            </summary>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.#ctor(Oculus.Applications.Toolbox.AppConfig)">
            <summary>
            Initialization constructor
            </summary>
            <param name="appConfig">The config to use</param>
        </member>
        <member name="P:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.Server">
            <summary>
            Get/set the server to use, only valid for active mode
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.Config">
            <summary>
            Get/set the application config to use
            </summary>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.VerifyConfigState">
            <summary>
            Ensures our object is in a valid state to query a source
            </summary>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.GetLocationSummary">
            <summary>
            Returns queue data from a server, fields are CNT, LOCATION, LOCATION_TYPE, QUEUE_NAME
            </summary>
            <returns>The queue data</returns>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.GetLocationCount(Oculus.Applications.Toolbox.Helpers.LocationInfo)">
            <summary>
            Retrieves the count for a specific location
            </summary>
            <param name="info">The info</param>
            <returns>The count</returns>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.SearchByIndex(System.String,System.String)">
            <summary>
            Searches the document records for the specified index and value
            </summary>
            <param name="indexName">The index name</param>
            <param name="indexValue">The index value</param>
            <returns>The result</returns>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.GetLocationData(Oculus.Applications.Toolbox.Helpers.LocationInfo,System.Int32,System.Int32)">
            <summary>
            Gets the data for the location
            </summary>
            <param name="info">The location</param>
            <param name="startRecord">The first record</param>
            <param name="maxRecords">The max no of records</param>
            <returns>The result</returns>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.GetDocumentFragments(System.Guid)">
            <summary>
            Fetches the fragment data for a document
            </summary>
            <param name="documentId">The document id</param>
            <returns>The fragment data</returns>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.UpdateDocumentXml(System.Guid,System.String)">
            <summary>
            Updates the xml for the document
            </summary>
            <param name="docInternalId">The doc id</param>
            <param name="newXml">The xml to use</param>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.GetConfig">
            <summary>
            Retrieves the xml configuration as a string
            </summary>
            <returns>The config</returns>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.DeleteDocument(System.Guid)">
            <summary>
            Deletes the document with the specified id
            </summary>
            <param name="documentId">The id</param>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.GetFragmentData(System.Guid)">
            <summary>
            Fetches the data for a fragment
            </summary>
            <param name="fragmentId">The fragment id</param>
            <returns>The fragment data</returns>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.AcquisitionDbHelper.DeallocateQueue(System.String)">
            <summary>
            Deallocates all items in the specified queue
            </summary>
            <param name="queueName">The queue</param>
        </member>
        <member name="T:Oculus.Applications.Toolbox.Helpers.DbHelper">
            <summary>
            Contains methods and queries for working with the databases
            </summary>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.DbHelper.#ctor(Oculus.Applications.Toolbox.AppConfig)">
            <summary>
            Initialization constructor
            </summary>
            <param name="appConfig">The config to use</param>
        </member>
        <member name="P:Oculus.Applications.Toolbox.Helpers.DbHelper.Server">
            <summary>
            Get/set the server to use, only valid for active mode
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.Helpers.DbHelper.Config">
            <summary>
            Get/set the application config to use
            </summary>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.DbHelper.VerifyConfigState(Oculus.Services.DatabaseType)">
            <summary>
            Ensures our object is in a valid state to query a source
            </summary>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.DbHelper.Execute(System.String,Oculus.Services.DatabaseType)">
            <summary>
            Run the sql and return the result
            </summary>
            <param name="sql">The query to run</param>
            <param name="dbType">The database to run against</param>
            <returns>The result</returns>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.DbHelper.LoadLogs(System.DateTime,System.DateTime)">
            <summary>
            Loads logs from the specified time frame
            </summary>
            <param name="dateFrom">The from date, inclusive</param>
            <param name="dateTo">The to date, inclusive</param>
            <returns>The results</returns>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.DbHelper.LoadAuditLogs(System.Object,System.Object,System.String,System.String,System.String,System.String)">
            <summary>
            Load logs from the database
            </summary>
            <param name="dateFrom">The date to search from</param>
            <param name="dateTo">The date to search to</param>
            <param name="indexMachine">The index machine</param>
            <param name="scanMachine">The scan machine</param>
            <param name="indexName">The index name</param>
            <param name="indexValue">The index value</param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.DbHelper.LoadConfiguration">
            <summary>
            Loads the currently active configuration. If in active mode, server will be used,
            otherwise uses the connection string.
            </summary>
            <returns>The configuration</returns>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.DbHelper.DirectDelploy(System.String)">
            <summary>
            Runs a direct deployment of the config
            </summary>
            <param name="configXml">The config xml</param>
        </member>
        <member name="T:Oculus.Applications.Toolbox.Helpers.LocationInfo">
            <summary>
            Wrapper class for managing location information
            </summary>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.LocationInfo.#ctor(System.Data.DataRow)">
            <summary>
            Initialization constructor
            </summary>
            <param name="row">The row which contains our data</param>
        </member>
        <member name="P:Oculus.Applications.Toolbox.Helpers.LocationInfo.Location">
            <summary>
            Get/set the location
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.Helpers.LocationInfo.Queue">
            <summary>
            Get/set the queue
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.Helpers.LocationInfo.LocationType">
            <summary>
            Get/set the location type
            </summary>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.LocationInfo.ToString">
            <summary>
            Gets a string representation of the object
            </summary>
            <returns>The string</returns>
        </member>
        <member name="T:Oculus.Applications.Toolbox.Helpers.VirtualLocationData">
            <summary>
            Represents a data souce for documents in the acquisition database
            based on a specific location type.
            </summary>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.VirtualLocationData.#ctor(Oculus.Applications.Toolbox.AppConfig,System.String,Oculus.Applications.Toolbox.Helpers.LocationInfo)">
            <summary>
            Initialization constructor
            </summary>
            <param name="appConfig">The config to use</param>
            <param name="server">The server to connect to</param>
            <param name="info">The location we're using</param>
        </member>
        <member name="P:Oculus.Applications.Toolbox.Helpers.VirtualLocationData.Data">
            <summary>
            Get the data for the object
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.Helpers.VirtualLocationData.HasMoreRows">
            <summary>
            Get whether or not we have more data
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.Helpers.VirtualLocationData.Server">
            <summary>
            Get the server
            </summary>
        </member>
        <member name="P:Oculus.Applications.Toolbox.Helpers.VirtualLocationData.Count">
            <summary>
            Get the count for the number of items at the server/location
            </summary>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.VirtualLocationData.FetchMoreData(System.Int32)">
            <summary>
            Fetches more data into the dataset
            </summary>
            <param name="numRows">The number of rows to retrieve</param>
        </member>
        <member name="M:Oculus.Applications.Toolbox.Helpers.VirtualLocationData.Dispose">
            <summary>
            Release any resources
            </summary>
        </member>
        <member name="T:Oculus.Applications.Toolbox.StandaloneConfig">
            <summary>
            Wrapper around config settings for standalone mode
            </summary>
        </member>
        <member name="M:Oculus.Applications.Toolbox.StandaloneConfig.HasConnection(Oculus.Services.DatabaseType)">
            <summary>
            Get whether or not the specified connection has been defined
            </summary>
            <param name="dbType">The database type</param>
            <returns>True if defined, false otherwise</returns>
        </member>
        <member name="P:Oculus.Applications.Toolbox.StandaloneConfig.StoreLocation">
            <summary>
            Get/set the store location
            </summary>
        </member>
        <member name="M:Oculus.Applications.Toolbox.StandaloneConfig.NewConnection(Oculus.Services.DatabaseType)">
            <summary>
            Gets a new connection to a database
            </summary>
            <param name="dbType">The database to connect to</param>
            <returns>The connection, or null if we don't have one</returns>
        </member>
        <member name="M:Oculus.Applications.Toolbox.StandaloneConfig.SetConnection(Oculus.Data.Connections.Interfaces.IOcuConnection,Oculus.Services.DatabaseType)">
            <summary>
            Sets the database for the specific type
            </summary>
            <param name="connection">The connection to use</param>
            <param name="dbType">The type to use</param>
        </member>
        <member name="T:Oculus.Applications.ViewerManager">
            <summary>
            Handles default behavior linking a viewer to a fragment picker
            </summary>
        </member>
        <member name="M:Oculus.Applications.ViewerManager.#ctor(Oculus.Applications.Interfaces.Controls.IFragmentPicker,Oculus.Applications.Interfaces.Controls.IImageViewer)">
            <summary>
            Initialization constructor
            </summary>
            <param name="picker">The fragment picker to link to, cannot be null</param>
            <param name="viewer">The viewer to link to, cannot be null</param>
        </member>
        <member name="P:Oculus.Applications.ViewerManager.FragmentPicker">
            <summary>
            Get the fragment picker associated with the manager
            </summary>
        </member>
        <member name="P:Oculus.Applications.ViewerManager.ImageViewer">
            <summary>
            Get the image viewer associated with the manager
            </summary>
        </member>
        <member name="P:Oculus.Applications.ViewerManager.DefaultImage">
            <summary>
            Get the default image for the manager
            </summary>
        </member>
        <member name="M:Oculus.Applications.ViewerManager.GenerateDefaultImage">
            <summary>
            Generates the default image to use within the manager
            </summary>
        </member>
        <member name="M:Oculus.Applications.ViewerManager.HandleDocumentChanged(System.Object,Oculus.Applications.DocumentSelectedEventArgs)">
            <summary>
            Handles document change on the picker. Auto-select the first, but only if it's an image
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The args</param>
        </member>
        <member name="M:Oculus.Applications.ViewerManager.HandleFragmentChanged(System.Object,Oculus.Applications.FragmentSelectedEventArgs)">
            <summary>
            Displays the new fragment in the viewer if it's an image
            </summary>
            <param name="sender">The picker</param>
            <param name="e">The args</param>
        </member>
        <member name="M:Oculus.Applications.ViewerManager.OpenWithDefaultFileType(Oculus.Storage.StorageFragment)">
            <summary>
            Opens the fragment with the default file type, first saving the file to a directory
            </summary>
            <param name="fragment">The fragment to open</param>
        </member>
        <member name="M:Oculus.Applications.ViewerManager.ShowDefaultImage">
            <summary>
            Shows the default image in the viewer
            </summary>
        </member>
        <member name="M:Oculus.Applications.ViewerManager.SaveAnnotations">
            <summary>
            Saves the current set of annotations against the selected fragment
            </summary>
        </member>
        <member name="M:Oculus.Applications.ViewerManager.Dispose">
            <summary>
            Frees resources associated with the manager
            </summary>
        </member>
        <member name="T:Oculus.Applications.RotateType">
            <summary>
            The rotation types available for rotating images
            </summary>
        </member>
        <member name="F:Oculus.Applications.RotateType.Clockwise">
            <summary>Clockwise rotation</summary>
        </member>
        <member name="F:Oculus.Applications.RotateType.CounterClockwise">
            <summary>Counter-clockwise rotation</summary>
        </member>
        <member name="F:Oculus.Applications.RotateType.Rotate180">
            <summary>180 degree rotation</summary>
        </member>
        <member name="T:Oculus.Applications.ImageViewerCursorMode">
            <summary>
            The different modes the image viewer can be in
            </summary>
        </member>
        <member name="F:Oculus.Applications.ImageViewerCursorMode.MouseZoom">
            <summary>Use the mouse to zoom in on a portion of the image</summary>
        </member>
        <member name="F:Oculus.Applications.ImageViewerCursorMode.Drag">
            <summary>Use the mouse to scroll the image</summary>
        </member>
        <member name="F:Oculus.Applications.ImageViewerCursorMode.Highlight">
            <summary>Create a highlight annotation</summary>
        </member>
        <member name="F:Oculus.Applications.ImageViewerCursorMode.Text">
            <summary>Create a text annotation</summary>
        </member>
        <member name="F:Oculus.Applications.ImageViewerCursorMode.Line">
            <summary>Create a line annotation</summary>
        </member>
        <member name="F:Oculus.Applications.ImageViewerCursorMode.Selector">
            <summary>Allows for selection of annotation items</summary>
        </member>
        <member name="T:Oculus.Applications.IndexEvent">
            <summary>
            Used when firing events from a specific index at indexing
            </summary>
        </member>
        <member name="F:Oculus.Applications.IndexEvent.ValueChange">
            <summary>Indicates the index value has changed</summary>
        </member>
        <member name="T:Oculus.Applications.SelectionEventArgs`1">
            <summary>
            Indicates a selection has changed
            </summary>
            <typeparam name="T">The type of the selection change arcument</typeparam>
        </member>
        <member name="M:Oculus.Applications.SelectionEventArgs`1.#ctor(`0)">
            <summary>
            Initialization constructor
            </summary>
            <param name="tag">The tag to use</param>
        </member>
        <member name="P:Oculus.Applications.SelectionEventArgs`1.Tag">
            <summary>
            Get/set the tag for the arguments
            </summary>
        </member>
        <member name="T:Oculus.Applications.IndexSelectedEventArgs">
            <summary>
            Integer based selection change
            </summary>
        </member>
        <member name="M:Oculus.Applications.IndexSelectedEventArgs.#ctor(System.Int32)">
            <summary>Initialization constructor</summary>
            <param name="tag">The tag to use</param>
        </member>
        <member name="T:Oculus.Applications.FragmentSelectedEventArgs">
            <summary>
            Fragment based selection change
            </summary>
        </member>
        <member name="M:Oculus.Applications.FragmentSelectedEventArgs.#ctor(Oculus.Storage.StorageFragment)">
            <summary>Initialization constructor</summary>
            <param name="tag">The tag to use</param>
        </member>
        <member name="T:Oculus.Applications.DocumentSelectedEventArgs">
            <summary>
            Document based selection change
            </summary>
        </member>
        <member name="M:Oculus.Applications.DocumentSelectedEventArgs.#ctor(Oculus.Storage.StorageDocument)">
            <summary>Initialization constructor</summary>
            <param name="tag">The tag to use</param>
        </member>
        <member name="T:Oculus.Applications.SearchResultDocumentSelectedEventArgs">
            <summary>
            Fragment based selection change
            </summary>
        </member>
        <member name="M:Oculus.Applications.SearchResultDocumentSelectedEventArgs.#ctor(Oculus.Searching.SearchResultDocument)">
            <summary>Initialization constructor</summary>
            <param name="tag">The tag to use</param>
        </member>
        <member name="T:Oculus.Applications.ApplicationEventArgs">
            <summary>
            Represents arguments inside a scan application
            </summary>
        </member>
        <member name="M:Oculus.Applications.ApplicationEventArgs.#ctor">
            <summary>
            Create a default instance
            </summary>
        </member>
        <member name="P:Oculus.Applications.ApplicationEventArgs.CancelEvent">
            <summary>
            Get/set whether or not the event should be cancelled
            </summary>
        </member>
        <member name="T:Oculus.Applications.ApplicationEventHandler">
            <summary>
            Delegate for handling scan application events.
            </summary>
            <param name="sender">The scan application</param>
            <param name="args">The args</param>
        </member>
        <member name="T:Oculus.Applications.IndexEventArgs">
            <summary>
            Represents index event args inside an indexing application
            </summary>
        </member>
        <member name="M:Oculus.Applications.IndexEventArgs.#ctor">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:Oculus.Applications.IndexEventArgs.#ctor(Oculus.Configuration.ProfileContext,Oculus.Configuration.Components.Collections.IndexValueList,Oculus.Configuration.Components.Index,Oculus.Applications.IndexEvent)">
            <summary>
            Initialization constructor
            </summary>
            <param name="profileContext">The current profile context, cannot be null</param>
            <param name="indexValues">The current set of index values, cannot be null</param>
            <param name="source">The source of the event, cannot be null</param>
            <param name="indexEvent">The event being raised</param>
        </member>
        <member name="P:Oculus.Applications.IndexEventArgs.ProfileContext">
            <summary>Get the profile context for the args</summary>
        </member>
        <member name="P:Oculus.Applications.IndexEventArgs.IndexValues">
            <summary>Get the values for the args</summary>
        </member>
        <member name="P:Oculus.Applications.IndexEventArgs.Source">
            <summary>Get the source for the args</summary>
        </member>
        <member name="P:Oculus.Applications.IndexEventArgs.IndexEvent">
            <summary>Get the event for the args</summary>
        </member>
        <member name="T:Oculus.Applications.IndexEventHandler">
            <summary>
            Delegate for handling index event args.
            </summary>
            <param name="sender">The source</param>
            <param name="args">The args</param>
        </member>
        <member name="T:Oculus.Applications.ExceptionEventArgs">
            <summary>
            Represents event args reporting an exception
            </summary>
        </member>
        <member name="M:Oculus.Applications.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Create a default instance
            </summary>
        </member>
        <member name="P:Oculus.Applications.ExceptionEventArgs.Exception">
            <summary>
            Get/set the exception
            </summary>
        </member>
        <member name="T:Oculus.Applications.ExceptionEventHandler">
            <summary>
            Delegate for handling scan application events.
            </summary>
            <param name="sender">The scan application</param>
            <param name="args">The args</param>
        </member>
        <member name="T:Oculus.Applications.BaseConfigurable`1">
            <summary>
            Used as the base class for configurable objects, includes type abstraction for 
            the configuration object used for config of this item
            </summary>
            <typeparam name="T">
            The type for the configuration object when serializing/deserializing, should inherit
            from AppConfigSection
            </typeparam>
        </member>
        <member name="M:Oculus.Applications.BaseConfigurable`1.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="P:Oculus.Applications.BaseConfigurable`1.Config">
            <summary>
            The Configuration
            </summary>
        </member>
        <member name="P:Oculus.Applications.BaseConfigurable`1.MyConfig">
            <summary>
            Gets the configuration as the specified type
            </summary>
        </member>
        <member name="P:Oculus.Applications.BaseConfigurable`1.Section">
            <summary>
            The section of configuration for this object, should be unique for each type.
            </summary>
        </member>
        <member name="M:Oculus.Applications.BaseConfigurable`1.SetupConfig">
            <summary>
            if you neeed to do some setup you should override this method
            </summary>
        </member>
        <member name="M:Oculus.Applications.BaseConfigurable`1.EditConfiguration">
            <summary>
            you have to do this to seport configuration
            </summary>
        </member>
        <member name="M:Oculus.Applications.BaseConfigurable`1.SaveConfiguration(Oculus.Configuration.AppConfigDocument)">
            <summary>
            this will save the confiuration to the xml file
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Oculus.Applications.BaseConfigurable`1.LoadConfiguration(Oculus.Configuration.AppConfigDocument)">
            <summary>
            this will load the configuration from teh xml file
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="T:Oculus.Diagnostics.DiagnosticLogging.LogData">
            <summary>
            Handels the logging of data to logfiles and\or the event log
            </summary>
        </member>
        <member name="M:Oculus.Diagnostics.DiagnosticLogging.LogData.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Diagnostics.DiagnosticLogging.LogData.WriteCodeTrackLog(System.String)">
            <summary>
            Used to write general logging data to file.
            Specifically used to log code comments etc.
            </summary>
            <param name="p_dataStringToLog">The data string to write to the log</param>
        </member>
        <member name="M:Oculus.Diagnostics.DiagnosticLogging.LogData.SubmitDataToFile(System.String)">
            <summary>
            Submit data to a file on disk. The file will be in the working folder and named 'LogFile.txt'
            </summary>
            <param name="p_dataStringToLog">The data to write</param>
        </member>
        <member name="M:Oculus.Diagnostics.DiagnosticLogging.LogData.SubmitDataToFile(System.String,System.String)">
            <summary>
            Submit data to a file on the disk
            </summary>
            <param name="p_dataStringToLog">The data to log</param>
            <param name="p_fileToWriteTo">The disk file to write to</param>
        </member>
        <member name="M:Oculus.Diagnostics.DiagnosticLogging.LogData.SubmitDataToEventLog(System.String,Oculus.Services.LogLevel)">
            <summary>
            Submit data to the eventlog
            </summary>
            <param name="p_dataStringToLog">The data to log</param>
            <param name="p_LogEventType">The type of eventlog entry</param>
        </member>
        <member name="M:Oculus.Diagnostics.DiagnosticLogging.LogData.SubmitToBoth(System.String,System.String,Oculus.Services.LogLevel)">
            <summary>
            Submit data to a disk file as well as the eventlog
            </summary>
            <param name="p_dataStringToLog">The data to write to the log</param>
            <param name="p_fileToWriteTo">The disk file to write to</param>
            <param name="p_LogEventType">The event log level to uses when writing to the event log</param>
        </member>
        <member name="M:Oculus.Diagnostics.DiagnosticLogging.LogData.SubmitToBoth(System.String,Oculus.Services.LogLevel)">
            <summary>
            Submit data to a default disk file as well as the eventlog
            </summary>
            <param name="p_dataStringToLog">The data to write to the log</param>
            <param name="p_LogEventType">The event log level to uses when writing to the event log</param>
        </member>
        <member name="M:Oculus.Diagnostics.DiagnosticLogging.LogData.LogLevel">
            <summary>
            Check registry to see if we may write log data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oculus.Diagnostics.DiagnosticLogging.LogData.GetCallingFunction(System.String@)">
            <summary>
            Navigates the stacktrace tree and determines the name of the function that initiated the log procedure
            </summary>
            <param name="p_callingAssembly">The name of the running assembly in from which the call was made</param>
            <returns></returns>
        </member>
        <member name="T:Oculus.Diagnostics.AcquisitionDatabaseRestorer">
            <summary>
            Tool which can be used to restore an acquisition database from the files on the file
            system.  Please note this will not create tables, only populate them.
            
            Please note this should NOT be invoked within the Oculus service, as it will overwrite
            the service connection to perform the work.
            
            This will NOT restore fragment files to the requisite location. This also needs to be 
            done manually.
            </summary>
        </member>
        <member name="M:Oculus.Diagnostics.AcquisitionDatabaseRestorer.#ctor(System.Xml.XmlDocument,System.String,Oculus.Data.Connections.Interfaces.IOcuConnection)">
            <summary>
            Initialization constructor
            </summary>
            <param name="config">The config to use, cannot be null</param>
            <param name="storeFolder">The store folder to find all docs/frags, cannot be null</param>
            <param name="connection">The (closed) connection to run against, cannot be null</param>
        </member>
        <member name="E:Oculus.Diagnostics.AcquisitionDatabaseRestorer.LogMessage">
            <summary>
            Logs a message - the source argument is the actual string
            </summary>
        </member>
        <member name="M:Oculus.Diagnostics.AcquisitionDatabaseRestorer.RestoreProcesses">
            <summary>
            Restores processes from the file system to the database
            </summary>
        </member>
        <member name="M:Oculus.Diagnostics.AcquisitionDatabaseRestorer.RestoreDocs">
            <summary>
            Restores docs from the file system to the database
            </summary>
        </member>
        <member name="M:Oculus.Diagnostics.AcquisitionDatabaseRestorer.RestoreFrags">
            <summary>
            Restores frag records to the database
            </summary>
        </member>
        <member name="M:Oculus.Diagnostics.AcquisitionDatabaseRestorer.Restore">
            <summary>
            Restores the database from the file system, logs available through the LogMessage event
            </summary>
        </member>
        <member name="T:Oculus.OculusException">
            <summary>
            Safe exception to use over remoting boundaries.
            </summary>
        </member>
        <member name="M:Oculus.OculusException.#ctor">
            <summary>
            Creates an instance of the object using the default parameters.
            </summary>
        </member>
        <member name="M:Oculus.OculusException.#ctor(System.Exception)">
            <summary>
            Create an instance of the exception which wraps the exception parameter
            </summary>
            <param name="ex">The exception to base ourselves on, cannot be null</param>
        </member>
        <member name="M:Oculus.OculusException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for serialization purposes
            </summary>
        </member>
        <member name="P:Oculus.OculusException.InnerExType">
            <summary>
            Get/Set the name of the exception we're wrapping
            </summary>
        </member>
        <member name="P:Oculus.OculusException.InnerStackTrace">
            <summary>
            Get/Set the stack trace from the exception we're wrapping
            </summary>
        </member>
        <member name="P:Oculus.OculusException.InnerMessage">
            <summary>
            Get/Set the message from the exception we're wrapping
            </summary>
        </member>
        <member name="P:Oculus.OculusException.InnerSource">
            <summary>
            Get/Set the source from the exception we're wrapping
            </summary>
        </member>
        <member name="P:Oculus.OculusException.Message">
            <summary>
            Returns the inner message
            </summary>
        </member>
        <member name="P:Oculus.OculusException.InnerFullDetail">
            <summary>
            Gets the full exception string from the inner exception
            </summary>
        </member>
        <member name="M:Oculus.OculusException.ToString">
            <summary>
            Outputs ex info from the wrapped exception
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:Oculus.OculusException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Performs serialization
            </summary>
            <param name="info">serialization info</param>
            <param name="context">serialization context</param>
        </member>
        <member name="T:Oculus.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Oculus.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Oculus.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Oculus.Properties.Resources.Logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Oculus.Upgrade.Version8">
            <summary>
            This class contains helper classes for upgrading from version 8 of oculus.
            </summary>
        </member>
        <member name="T:Oculus.Upgrade.Version8.SecurityImporter">
            <summary>
            This class can be used to copy security details from an Oculus 8 security database (SQL Server Only)
            to the current security system. Log messages are raised as events.
            </summary>
        </member>
        <member name="M:Oculus.Upgrade.Version8.SecurityImporter.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="connectionString">The connection string to use - should be a SQL Server connection string</param>
        </member>
        <member name="E:Oculus.Upgrade.Version8.SecurityImporter.LogMessage">
            <summary>
            Logs a message - the source argument is the actual string
            </summary>
        </member>
        <member name="M:Oculus.Upgrade.Version8.SecurityImporter.ImportAllSettings">
            <summary>
            Imports all settings from the version 8 security database to the current security system
            </summary>
        </member>
        <member name="T:Oculus.Upgrade.Version8.ProcessLayoutImporter">
            <summary>
            This class can be used to read process layouts from a version 8 config database
            </summary>
        </member>
        <member name="M:Oculus.Upgrade.Version8.ProcessLayoutImporter.#ctor(System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="connectionString">The connection string to use - should be a SQL Server connection string</param>
        </member>
        <member name="M:Oculus.Upgrade.Version8.ProcessLayoutImporter.GetProcessLayouts">
            <summary>
            Reads and returns a set of process layouts from the config database
            </summary>
            <returns>The set of converted layouts</returns>
        </member>
        <member name="T:Oculus.RetrieveWS.Retrieve">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.#ctor">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.LoadDocumentCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.GetProfileIDForDocumentCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.ChangeDocumentDescriptionCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.ChangeDocumentNameCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.ChangeDocumentMetadataCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.ChangeDocumentProfileCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.ReindexDocumentCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.DeleteDocumentCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.GetConsolidatedDocumentBytesCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.GetDocumentAsPDFCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.LoadFragmentCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.GetFragmentByteLengthCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.DeleteFragmentCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.SetFragmentDataLocationCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.DeleteLocalFragmentDataCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.GetFragmentBytesCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.GetConvertedFragmentBytesCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.PreprocessDocumentForReindexCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.ProcessReindexingEventCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.RetrieveWS.Retrieve.ValidateReindexDocumentCompleted">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.LoadDocument(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.LoadDocumentAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.LoadDocumentAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetProfileIDForDocument(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetProfileIDForDocumentAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetProfileIDForDocumentAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ChangeDocumentDescription(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ChangeDocumentDescriptionAsync(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ChangeDocumentDescriptionAsync(System.Guid,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ChangeDocumentName(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ChangeDocumentNameAsync(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ChangeDocumentNameAsync(System.Guid,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ChangeDocumentMetadata(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ChangeDocumentMetadataAsync(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ChangeDocumentMetadataAsync(System.Guid,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ChangeDocumentProfile(System.Guid,System.String,System.Guid,Oculus.RetrieveWS.Index[])">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ChangeDocumentProfileAsync(System.Guid,System.String,System.Guid,Oculus.RetrieveWS.Index[])">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ChangeDocumentProfileAsync(System.Guid,System.String,System.Guid,Oculus.RetrieveWS.Index[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ReindexDocument(System.Guid,System.String,Oculus.RetrieveWS.Index[])">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ReindexDocumentAsync(System.Guid,System.String,Oculus.RetrieveWS.Index[])">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ReindexDocumentAsync(System.Guid,System.String,Oculus.RetrieveWS.Index[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.DeleteDocument(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.DeleteDocumentAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.DeleteDocumentAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetConsolidatedDocumentBytes(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetConsolidatedDocumentBytesAsync(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetConsolidatedDocumentBytesAsync(System.Guid,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetDocumentAsPDF(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetDocumentAsPDFAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetDocumentAsPDFAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.LoadFragment(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.LoadFragmentAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.LoadFragmentAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetFragmentByteLength(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetFragmentByteLengthAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetFragmentByteLengthAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.DeleteFragment(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.DeleteFragmentAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.DeleteFragmentAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.SetFragmentDataLocation(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.SetFragmentDataLocationAsync(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.SetFragmentDataLocationAsync(System.Guid,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.DeleteLocalFragmentData(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.DeleteLocalFragmentDataAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.DeleteLocalFragmentDataAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetFragmentBytes(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetFragmentBytesAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetFragmentBytesAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetConvertedFragmentBytes(System.Guid,System.String,Oculus.RetrieveWS.ConversionType,System.Int32@,System.Int32@)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetConvertedFragmentBytesAsync(System.Guid,System.String,Oculus.RetrieveWS.ConversionType)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.GetConvertedFragmentBytesAsync(System.Guid,System.String,Oculus.RetrieveWS.ConversionType,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.PreprocessDocumentForReindex(System.Guid,System.String,Oculus.RetrieveWS.ProfileIndex[]@)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.PreprocessDocumentForReindexAsync(System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.PreprocessDocumentForReindexAsync(System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ProcessReindexingEvent(System.Guid,System.String,Oculus.RetrieveWS.IndexEventArgs,Oculus.RetrieveWS.IndexEventResponse@)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ProcessReindexingEventAsync(System.Guid,System.String,Oculus.RetrieveWS.IndexEventArgs)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ProcessReindexingEventAsync(System.Guid,System.String,Oculus.RetrieveWS.IndexEventArgs,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ValidateReindexDocument(System.Guid,Oculus.RetrieveWS.Index[],System.String,Oculus.RetrieveWS.ProfileIndex[],Oculus.RetrieveWS.Index[]@,Oculus.RetrieveWS.ProfileIndex[]@)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ValidateReindexDocumentAsync(System.Guid,Oculus.RetrieveWS.Index[],System.String,Oculus.RetrieveWS.ProfileIndex[])">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.ValidateReindexDocumentAsync(System.Guid,Oculus.RetrieveWS.Index[],System.String,Oculus.RetrieveWS.ProfileIndex[],System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.RetrieveWS.Retrieve.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.Document">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Document.Name">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Document.Description">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Document.Metadata">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Document.SystemMoniker">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Document.Indexes">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Document.Fragments">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.Index">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Index.Name">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Index.Value">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.IndexingError">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.IndexingError.IndexName">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.IndexingError.ErrorMessage">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.IndexEventResponse">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.IndexEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.IndexEventArgs.ProfileIndexes">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.IndexEventArgs.IndexEvent">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.IndexEventArgs.Index">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.IndexEventArgs.IndexValues">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.IndexEventArgs.DocumentXml">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.ProfileIndex">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ProfileIndex.Type">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ProfileIndex.Description">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ProfileIndex.Length">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ProfileIndex.Custom">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ProfileIndex.Name">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ProfileIndex.IndexBehaviour">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ProfileIndex.IndexAttribute">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ProfileIndex.ListItems">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.IndexType">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexType.AlphaNumeric">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexType.Boolean">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexType.Currency">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexType.Date">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexType.DateTime">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexType.List">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexType.Numeric">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexType.RegularExpression">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexType.Text">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexType.Time">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.IndexBehaviour">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexBehaviour.Normal">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexBehaviour.WriteOnce">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexBehaviour.ReadOnly">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexBehaviour.Hidden">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.IndexAttribute">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexAttribute.None">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexAttribute.Searchable">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexAttribute.Mandatory">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexAttribute.Barcode">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexAttribute.Dynamic">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.ProfileIndexListItem">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ProfileIndexListItem.Description">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ProfileIndexListItem.Value">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.IndexEvent">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.IndexEvent.ValueChange">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.Fragment">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Fragment.SystemMoniker">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Fragment.DocumentMoniker">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Fragment.DataLocationMoniker">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Fragment.Filename">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.Fragment.IsImage">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.ConversionType">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.ConversionType.None">
            <remarks/>
        </member>
        <member name="F:Oculus.RetrieveWS.ConversionType.ToPng">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.LoadDocumentCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.LoadDocumentCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.LoadDocumentCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.GetProfileIDForDocumentCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.GetProfileIDForDocumentCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.GetProfileIDForDocumentCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.ChangeDocumentDescriptionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.ChangeDocumentNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.ChangeDocumentMetadataCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.ChangeDocumentProfileCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.ReindexDocumentCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.DeleteDocumentCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.GetConsolidatedDocumentBytesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.GetConsolidatedDocumentBytesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.GetConsolidatedDocumentBytesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.GetDocumentAsPDFCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.GetDocumentAsPDFCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.GetDocumentAsPDFCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.LoadFragmentCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.LoadFragmentCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.LoadFragmentCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.GetFragmentByteLengthCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.GetFragmentByteLengthCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.GetFragmentByteLengthCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.DeleteFragmentCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.SetFragmentDataLocationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.DeleteLocalFragmentDataCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.GetFragmentBytesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.GetFragmentBytesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.GetFragmentBytesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.GetConvertedFragmentBytesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.GetConvertedFragmentBytesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.GetConvertedFragmentBytesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.GetConvertedFragmentBytesCompletedEventArgs.width">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.GetConvertedFragmentBytesCompletedEventArgs.height">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.PreprocessDocumentForReindexCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.PreprocessDocumentForReindexCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.PreprocessDocumentForReindexCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.PreprocessDocumentForReindexCompletedEventArgs.outProfileIndexes">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.ProcessReindexingEventCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.ProcessReindexingEventCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ProcessReindexingEventCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ProcessReindexingEventCompletedEventArgs.outResponse">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.ValidateReindexDocumentCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.RetrieveWS.ValidateReindexDocumentCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ValidateReindexDocumentCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ValidateReindexDocumentCompletedEventArgs.outIndexes">
            <remarks/>
        </member>
        <member name="P:Oculus.RetrieveWS.ValidateReindexDocumentCompletedEventArgs.outProfileIndexes">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.Security">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.#ctor">
            <remarks/>
        </member>
        <member name="E:Oculus.SecurityWS.Security.LoginFailReasonCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.SecurityWS.Security.LoginAndChangePasswordFailReasonCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.SecurityWS.Security.LoginCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.SecurityWS.Security.LoginAndChangePasswordCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.SecurityWS.Security.LogoutCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.SecurityWS.Security.GetSessionInfoCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.SecurityWS.Security.GetGrantedObjectNamesCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.SecurityWS.Security.GetGrantedObjectIdsCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.SecurityWS.Security.HasAccessByNameCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.SecurityWS.Security.HasAccessByIdCompleted">
            <remarks/>
        </member>
        <member name="E:Oculus.SecurityWS.Security.GetUsersCompleted">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LoginFailReason(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LoginFailReasonAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LoginFailReasonAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LoginAndChangePasswordFailReason(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LoginAndChangePasswordFailReasonAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LoginAndChangePasswordFailReasonAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.Login(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LoginAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LoginAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LoginAndChangePassword(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LoginAndChangePasswordAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LoginAndChangePasswordAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.Logout(System.Guid)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LogoutAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.LogoutAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.GetSessionInfo(System.Guid)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.GetSessionInfoAsync(System.Guid)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.GetSessionInfoAsync(System.Guid,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.GetGrantedObjectNames(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.GetGrantedObjectNamesAsync(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.GetGrantedObjectNamesAsync(System.Guid,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.GetGrantedObjectIds(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.GetGrantedObjectIdsAsync(System.Guid,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.GetGrantedObjectIdsAsync(System.Guid,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.HasAccessByName(System.Guid,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.HasAccessByNameAsync(System.Guid,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.HasAccessByNameAsync(System.Guid,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.HasAccessById(System.Guid,System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.HasAccessByIdAsync(System.Guid,System.Guid,System.String)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.HasAccessByIdAsync(System.Guid,System.Guid,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.GetUsers">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.GetUsersAsync">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.GetUsersAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:Oculus.SecurityWS.Security.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.SessionInfo">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.SessionInfo.SessionId">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.SessionInfo.Username">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.SessionInfo.UserId">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.UserInfo">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.UserInfo.Name">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.UserInfo.Id">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.UserInfo.LastLogon">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.UserInfo.PassCreated">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.LoginFailReasonCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.LoginFailReasonCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.LoginFailReasonCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.LoginAndChangePasswordFailReasonCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.LoginAndChangePasswordFailReasonCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.LoginAndChangePasswordFailReasonCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.LoginCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.LoginCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.LoginCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.LoginAndChangePasswordCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.LoginAndChangePasswordCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.LoginAndChangePasswordCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.LogoutCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.GetSessionInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.GetSessionInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.GetSessionInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.GetGrantedObjectNamesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.GetGrantedObjectNamesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.GetGrantedObjectNamesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.GetGrantedObjectIdsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.GetGrantedObjectIdsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.GetGrantedObjectIdsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.HasAccessByNameCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.HasAccessByNameCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.HasAccessByNameCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.HasAccessByIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.HasAccessByIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.HasAccessByIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.GetUsersCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:Oculus.SecurityWS.GetUsersCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:Oculus.SecurityWS.GetUsersCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Oculus.Web.Services.Base">
            <summary>
            Base class for oculus web services
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Base.PopulateSession(System.Guid)">
            <summary>
            Populates the current principle with an oculus principal, this unfortunately results in two calls
            to the remote server for every single call.
            </summary>
            <param name="sessionId">The session id to use</param>
        </member>
        <member name="T:Oculus.Web.Services.Configuration">
            <summary>
            Web service base class for interacting with configuration
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Configuration.GetConfiguration">
            <summary>
            Retrieves the current configuration
            </summary>
            <returns>The configuration XML as a string</returns>
        </member>
        <member name="M:Oculus.Web.Services.Configuration.GetConfigurationHash">
            <summary>
            Retrieves the current configuration hash value, which can be used to determine
            changes in configuration
            </summary>
            <returns>The configuration hash value</returns>
        </member>
        <member name="M:Oculus.Web.Services.Configuration.AdminSaveConfiguration(System.Guid,System.String)">
            <summary>
            Deploys the currently saved configuration
            </summary>
            <param name="sessionId">The session id</param>
            <param name="config">The config to save</param>
        </member>
        <member name="M:Oculus.Web.Services.Configuration.AdminDeployConfiguration(System.Guid)">
            <summary>
            Deploys the most recently saved admin configuration
            </summary>
            <param name="sessionId">The session id</param>
        </member>
        <member name="M:Oculus.Web.Services.Configuration.GetProfileContexts(System.String,System.String)">
            <summary>
            Retrieves the current configuration
            </summary>
            <returns>The configuration XML as a string</returns>
        </member>
        <member name="T:Oculus.Web.Services.Audit">
            <summary>
            Web service base class for interacting with configuration
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Audit.GetScanIndexDetail(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Gets scan index detail information
            </summary>
            <param name="machine">The machine, can be null</param>
            <param name="user">The user, can be null</param>
            <param name="fromDate">The from date, can be null</param>
            <param name="toDate">The to date, can be null</param>
            <returns>The result data in xml form</returns>
        </member>
        <member name="M:Oculus.Web.Services.Audit.GetAssemblyVersion">
            <summary>
            Returns the major, minor, build and revision numbers of the assembly
            </summary>
            <returns>Returns the major, minor, build and revision numbers of the assembly</returns>
        </member>
        <member name="T:Oculus.Web.Services.Enquiry8">
            <summary>
            Web service class for maintaining backwards compatibility with the 
            Oculus 8 enquiry web service. The focus of this service is compatibility,
            not elegance.
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.SearchByLimit(System.Guid,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Runs a search with the specified search limit
            </summary>
            <param name="p_uiSessionID">The session id</param>
            <param name="p_sProfileID">The profile context id</param>
            <param name="p_sIndex">Qualifier indexes, comma separated</param>
            <param name="p_sComparison">Comparisons, comma separated</param>
            <param name="p_sValue">Qualifier values, comma separated</param>
            <param name="p_sSort">The sort to use</param>
            <param name="p_iDocLimit">The max number of documents to retrieve</param>
            <returns>The search result</returns>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.Search(System.Guid,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Runs a search-by-limit with the default search limit
            </summary>
            <param name="p_uiSessionID">The session id</param>
            <param name="p_sProfileID">The profile context id</param>
            <param name="p_sIndex">Qualifier indexes, comma separated</param>
            <param name="p_sComparison">Comparisons, comma separated</param>
            <param name="p_sValue">Qualifier values, comma separated</param>
            <param name="p_sSort">The sort to use</param>
            <returns>The search result</returns>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.Validate(System.String,System.String,System.Boolean)">
            <summary>
            Log in with the specified username and password. Throws an
            error if the login fails.
            </summary>
            <param name="p_sUserName">The username</param>
            <param name="p_sPassword">The password</param>
            <returns>The session id</returns>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.ReIndexDocument(System.Guid,Oculus.Web.Services.Enquiry8.UniqueIdentifier,System.String,System.String)">
            <summary>
            Reindex the document with the specified values
            </summary>
            <param name="p_uiSessionID">The session id</param>
            <param name="p_oDocumentID">The document id info</param>
            <param name="p_sIndexName">The new indexes, comma separated</param>
            <param name="p_sIndexValue">The new values, comma separated</param>
            <returns></returns>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.GetFile(System.Guid,Oculus.Web.Services.Enquiry8.UniqueIdentifier)">
            <summary>
            Returns the bytes for the requested fragment
            </summary>
            <param name="p_uiSessionID">The session id</param>
            <param name="p_oFragmentID">The fragment id</param>
            <returns>The fragment data</returns>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.GetDocument(System.Guid,Oculus.Web.Services.Enquiry8.UniqueIdentifier)">
            <summary>
            Retrieves the viewer-specific xml source for the requested document
            </summary>
            <param name="p_uiSessionID">The session id</param>
            <param name="p_oDocumentID">The document id</param>
            <returns>The session id</returns>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.GetAnnotations(System.Guid,Oculus.Web.Services.Enquiry8.UniqueIdentifier)">
            <summary>
            Gets the annotations for the specified document in v8 format
            </summary>
            <param name="p_uiSessionID">The session id</param>
            <param name="p_oID">The document id</param>
            <returns>The annotations</returns>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.SaveAnnotations(System.Guid,Oculus.Web.Services.Enquiry8.UniqueIdentifier,System.String)">
            <summary>
            Updates the annotations for the specified document
            </summary>
            <param name="p_uiSessionID">The session id</param>
            <param name="p_oID">The document id</param>
            <param name="p_sAnnotations">The annotations to use</param>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.DeleteDocument(System.Guid,Oculus.Web.Services.Enquiry8.UniqueIdentifier,System.String)">
            <summary>
            Deletes the specified document
            </summary>
            <param name="p_uiSessionID">The session id</param>
            <param name="p_oID">The document id</param>
            <param name="p_sProfileID">The profile id (ignored)</param>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.DeleteFragment(System.Guid,Oculus.Web.Services.Enquiry8.UniqueIdentifier)">
            <summary>
            Deletes the specified fragment
            </summary>
            <param name="p_uiSessionID">The session id</param>
            <param name="p_oID">The fragment id</param>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.PrintIndexConfig">
            <summary>
            Always returns empty configuration
            </summary>
            <returns>The empty config</returns>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.Config(System.Guid)">
            <summary>
            Generates config in v8 enquiry format
            </summary>
            <param name="p_uiSessionID">The sesison id</param>
            <returns>The config</returns>
        </member>
        <member name="M:Oculus.Web.Services.Enquiry8.AddDocument(System.Guid,System.Guid,System.String,System.Byte[],Oculus.Web.Services.Enquiry8.NameValuePair[])">
            <summary>
            Adds a new document and returns the new document moniker
            </summary>
            <param name="p_uiSessionID">The session id</param>
            <param name="p_uiProfileContext">The profile context for the document</param>
            <param name="p_sName">The name to use</param>
            <param name="p_aFragmentData">Array of bytes, representing the SINGLE document fragment</param>
            <param name="p_aIndexes">Array of indexes for the document</param>
            <returns>The document moniker</returns>
        </member>
        <member name="T:Oculus.Web.Services.Enquiry8.UniqueIdentifier">
            <summary>
            Helper for parsing unique id parameters
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Enquiry8.UniqueIdentifier.PluginId">
            <summary>Get/set the plugin id</summary>
        </member>
        <member name="P:Oculus.Web.Services.Enquiry8.UniqueIdentifier.SubId">
            <summary>Get/set the sub id (document or fragment id)</summary>
        </member>
        <member name="P:Oculus.Web.Services.Enquiry8.UniqueIdentifier.ProfileId">
            <summary>Get/set the profile id (this is a context id)</summary>
        </member>
        <member name="T:Oculus.Web.Services.Enquiry8.NameValuePair">
            <summary>
             Helper for document add
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Enquiry8.NameValuePair.Name">
            <summary>Get/set the name</summary>
        </member>
        <member name="P:Oculus.Web.Services.Enquiry8.NameValuePair.Value">
            <summary>Get/set value</summary>
        </member>
        <member name="T:Oculus.Web.Services.Launch">
            <summary>
            Web service base class for launching documents and working with queues
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Launch.LaunchDocument(System.Guid,System.String)">
            <summary>
            Launch a document
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentXml">The document xml, including a process</param>
            <returns>The document unique id</returns>
        </member>
        <member name="M:Oculus.Web.Services.Launch.LaunchDocumentWithProcess(System.Guid,System.String,System.String)">
            <summary>
            Launch a document
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentXml">The document xml, without a process</param>
            <param name="processXml">The process xml</param>
            <returns>The document unique id</returns>
        </member>
        <member name="M:Oculus.Web.Services.Launch.LaunchDocumentWithProcessId(System.Guid,System.String,System.Guid)">
            <summary>
            Launch a document
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentXml">The document xml, without a process</param>
            <param name="processId">The process id</param>
            <returns>The document unique id</returns>
        </member>
        <member name="M:Oculus.Web.Services.Launch.ProcessFragment(System.Guid,System.Guid,System.String,System.Byte[])">
            <summary>
            Add a fragment to the system
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentUniqueId">The document id from a LaunchDocument operation</param>
            <param name="fragmentXml">The fragment xml</param>
            <param name="fragmentData">The fragment data</param>
        </member>
        <member name="M:Oculus.Web.Services.Launch.CompleteLaunch(System.Guid,System.Guid)">
            <summary>
            Completes the launch for a document
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentUniqueId">The document id from a LaunchDocument operation</param>
        </member>
        <member name="M:Oculus.Web.Services.Launch.CancelLaunch(System.Guid,System.Guid)">
            <summary>
            Cancels the launch for a document
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentUniqueId">The document id from a LaunchDocument operation</param>
        </member>
        <member name="M:Oculus.Web.Services.Launch.UploadDocuments(System.String,System.String,System.String,System.String,System.String[],System.String[],System.String)">
            <summary>
            Launch a document
            </summary>
            <param name="sessionId">The session id</param>
            <param name="profileID">The ID of the document profile</param>
            <param name="profileContextID">The ID of the document profile version/context</param>
            <param name="processID">The ID of the acquisition process used by the specified profileContextID</param>
            <param name="documentFiles">An array of base64 (javascript DataURL) string</param>
            <param name="documentFileNames">An array of filenames for the files supplied in the documentFiles parameter</param>
            <param name="documentFileNameIndexes">Comma delimited string of Index names mapped to the filenames supplied in the documentFileNames parameter</param>
            <returns>The document unique id</returns>
        </member>
        <member name="T:Oculus.Web.Services.Queue">
            <summary>
            Web service base class for working with queues
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Queue.GetQueueTotalCount(System.String)">
            <summary>
            Gets the number of items in the queue
            </summary>
            <param name="queueName">The queue to retrieve</param>
            <returns>The number of items in the queue</returns>
        </member>
        <member name="M:Oculus.Web.Services.Queue.RequestDocument(System.Guid,System.String,System.Guid@,System.String@)">
            <summary>
            Requests a document from a queue
            </summary>
            <param name="sessionId">The session id</param>
            <param name="queueName">The queue to access</param>
            <param name="transactionId">The unique transaction id to use</param>
            <param name="documentXml">The xml for the document</param>
        </member>
        <member name="M:Oculus.Web.Services.Queue.ProcessDocument(System.Guid,System.Guid,System.String)">
            <summary>
            Use the updated document xml for the queue item
            </summary>
            <param name="sessionId">The session id</param>
            <param name="transactionId">The unique transaction id</param>
            <param name="documentXml">The new xml for the document</param>
        </member>
        <member name="M:Oculus.Web.Services.Queue.ProcessWebDocument(System.String,System.String,System.String)">
            <summary>
            Use the updated document xml for the queue item
            </summary>
            <param name="sessionId">The session id</param>
            <param name="uniqueId">The unique transaction id</param>
            <param name="documentXml">The new xml for the document</param>
        </member>
        <member name="M:Oculus.Web.Services.Queue.CompleteDocument(System.Guid,System.Guid)">
            <summary>
            Indicates the queued document has been completed
            </summary>
            <param name="sessionId">The session id</param>
            <param name="transactionId">The unique transaction id</param>
        </member>
        <member name="M:Oculus.Web.Services.Queue.CompleteWebDocument(System.String,System.String)">
            <summary>
            Indicates the queued document has been completed
            </summary>
            <param name="sessionId">The session id</param>
            <param name="uniqueId">The unique transaction id</param>
        </member>
        <member name="M:Oculus.Web.Services.Queue.CancelRequest(System.Guid,System.Guid)">
            <summary>
            Indicates the document should be deallocated and returned to the queue
            </summary>
            <param name="sessionId">The session id</param>
            <param name="transactionId">The unique transaction id</param>
        </member>
        <member name="M:Oculus.Web.Services.Queue.DeleteDocument(System.Guid,System.Guid)">
            <summary>
            Deletes the document associated with the transaction id
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentUniqueId">The document unique ID</param>
        </member>
        <member name="M:Oculus.Web.Services.Queue.DeleteFragment(System.Guid,System.Guid)">
            <summary>
            Removes the particular fragment from the system. User MUST have DELETE permission
            on the relevant profile.
            </summary>
            <param name="sessionId">The session id</param>
            <param name="fragmentUniqueId">The fragment ID</param>
        </member>
        <member name="M:Oculus.Web.Services.Queue.GetDocument(System.Guid,System.Guid)">
            <summary>
            Retrieve the xml for the specified document.
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentUniqueId">the unique document id</param>
            <returns>the document xml</returns>
        </member>
        <member name="M:Oculus.Web.Services.Queue.GetFragment(System.Guid,System.Guid,System.String@,System.Guid@)">
            <summary>
            Retrieve the xml for the specified fragment.
            </summary>
            <param name="sessionId">The session id</param>
            <param name="fragmentUniqueId">the fragment id</param>
            <param name="fragmentXml">The xml for the fragment</param>
            <param name="documentUniqueId">The unique id for the owner document of the fragment</param>
            <returns>the fragment xml</returns>
        </member>
        <member name="M:Oculus.Web.Services.Queue.GetFragments(System.Guid,System.Guid,System.String[]@,System.Guid[]@)">
            <summary>
            Retrieves the document xml for all fragments for the specified document. The return
            parameters are collections with id and xml at the same index of each collection.
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentUniqueId">The document unique id</param>
            <param name="fragmentXmls">The set of fragment xmls</param>
            <param name="fragmentIds">The set of fragment ids</param>
        </member>
        <member name="M:Oculus.Web.Services.Queue.GetFragmentData(System.Guid,System.Guid)">
            <summary>
            Get the bytes for the fragment
            </summary>
            <param name="sessionId">The session id</param>
            <param name="fragmentUniqueId">The id of the fragment to retrieve</param>
            <returns>The fragment data</returns>
        </member>
        <member name="M:Oculus.Web.Services.Queue.RequestDocumentFull(System.Guid,System.String,System.Guid@,System.String@,Oculus.Web.Services.Types.Document@,Oculus.Web.Services.Types.ProfileIndex[]@)">
            <summary>
            Requests a document from a queue, but simultaneously returns a storage document, also
            runs initial add-in logic
            </summary>
            <param name="sessionId">The session id</param>
            <param name="queueName">The queue to access</param>
            <param name="outTransactionId">The unique transaction id to use</param>
            <param name="outDocumentXml">The xml for the document</param>
            <param name="outStorageDocument">The resulting storage document</param>
            <param name="outProfileIndexes">If there is an Add-In for this machine, this will contain the profile indexes to use</param>
        </member>
        <member name="M:Oculus.Web.Services.Queue.ValidateDocument(System.Guid,Oculus.Web.Services.Types.Index[],Oculus.Web.Services.Types.ProfileIndex[],System.String,Oculus.Applications.Indexing.IndexingError[]@,Oculus.Web.Services.Types.Index[]@,Oculus.Web.Services.Types.ProfileIndex[]@,System.String@)">
            <summary>
            Validates a document against the indexing plug-in
            </summary>
            <param name="sessionId">The session id</param>
            <param name="inputIndexes">The set of input indexes</param>
            <param name="profileIndexes">The profile context indexes</param>
            <param name="documentXml">The xml for the document being indexed</param>
            <param name="outErrors">Any errors produced by the plug-in</param>
            <param name="outIndexes">The set of indexes as generated by the plug-in</param>
            <param name="outProfileIndexes">The output profile context indexes</param>
            <param name="outDocumentXml">The output document xml</param>
        </member>
        <member name="M:Oculus.Web.Services.Queue.ProcessIndexingEvent(System.Guid,Oculus.Web.Services.Types.IndexEventArgs,Oculus.Web.Services.Types.IndexEventArgs@,Oculus.Web.Services.Types.IndexEventResponse@)">
            <summary>
            Process indexing events as they occur on the client
            </summary>
            <param name="sessionId">The session id</param>
            <param name="args">The event information</param>
            <param name="outArgs">The event data, which will include any changes</param>
            <param name="outResponse">The response data</param>
        </member>
        <member name="M:Oculus.Web.Services.Queue.GetAvailableQueues(System.String)">
            <summary>
            Retrieves the queues available to the user's group(s)
            </summary>
            <param name="sessionId">The session id</param>
            <returns>The queue names as a string delimited by the | character</returns>
        </member>
        <member name="M:Oculus.Web.Services.Queue.GetNextWebDocumentFromQueue(System.String,System.String)">
            <summary>
            Retrieves the next document for the specified queue
            </summary>
            <param name="sessionId">The session id</param>
            <param name="queueName">The name of the queue</param>
            <returns>The index document object</returns>
        </member>
        <member name="T:Oculus.Web.Services.Retrieve">
            <summary>
            Web service base class for retrieving documents, fragments, and data
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.LoadDocument(System.Guid,System.String)">
            <summary>
            Loads the document data and returns it as a remote storage document
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentMoniker">The document moniker</param>
            <returns>A document object</returns>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.GetProfileIDForDocument(System.Guid,System.String)">
            <summary>
            Get the profile id for the specified document
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentMoniker">The moniker to use</param>
            <returns>The profile id</returns>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.ChangeDocumentDescription(System.Guid,System.String,System.String)">
            <summary>
            Changes the document description
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentMoniker">The moniker to use</param>
            <param name="newDescription">The new description</param>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.ChangeDocumentName(System.Guid,System.String,System.String)">
            <summary>
            Changes the document name
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentMoniker">The moniker to use</param>
            <param name="newName">The new name for the document</param>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.ChangeDocumentMetadata(System.Guid,System.String,System.String)">
            <summary>
            Changes the document metadata
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentMoniker">The moniker to use</param>
            <param name="metadataXml">The new metadata, use null to delete</param>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.ChangeDocumentProfile(System.Guid,System.String,System.Guid,Oculus.Web.Services.Types.Index[])">
            <summary>
            Changes the document profile
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentMoniker">The moniker to use</param>
            <param name="newProfileId">The new profile</param>
            <param name="newIndexes">The new indexes</param>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.ReindexDocument(System.Guid,System.String,Oculus.Web.Services.Types.Index[])">
            <summary>
            Reindexes the document
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentMoniker">The moniker to use</param>
            <param name="newIndexes">The new set of indexes</param>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.DeleteDocument(System.Guid,System.String)">
            <summary>
            Deletes the document
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentMoniker">The moniker to use</param>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.GetConsolidatedDocumentBytes(System.Guid,System.String,System.String)">
            <summary>
            Gets the bytes for a consolidated write
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentMoniker">The moniker to use</param>
            <param name="mimeType">The target mime type</param>
            <returns>The bytes</returns>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.LoadFragment(System.Guid,System.String)">
            <summary>
            Loads the fragment data and returns is as a remote fragment
            </summary>
            <param name="sessionId">The session id</param>
            <param name="fragmentMoniker">The fragment moniker</param>
            <returns>The remote fragment object</returns>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.GetFragmentByteLength(System.Guid,System.String)">
            <summary>
            Get the byte length for the specified fragment
            </summary>
            <param name="sessionId">The session id</param>
            <param name="fragmentMoniker">The moniker to use</param>
            <returns>The byte length</returns>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.DeleteFragment(System.Guid,System.String)">
            <summary>
            Deletes the fragment
            </summary>
            <param name="sessionId">The session id</param>
            <param name="fragmentMoniker">The moniker to use</param>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.SetFragmentDataLocation(System.Guid,System.String,System.String)">
            <summary>
            Changes the fragment data location
            </summary>
            <param name="sessionId">The session id</param>
            <param name="fragmentMoniker">The moniker to use></param>
            <param name="newLocation">The new location</param>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.DeleteLocalFragmentData(System.Guid,System.String)">
            <summary>
            Delete the local fragment data. The fragment record remains, but no
            file data exists on disk
            </summary>
            <param name="sessionId">The session id</param>
            <param name="fragmentMoniker">The moniker to use</param>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.GetFragmentBytes(System.Guid,System.String)">
            <summary>
            Gets the byte data for the fragment
            </summary>
            <param name="sessionId">The session id</param>
            <param name="fragmentMoniker">The moniker to use</param>
            <returns>The byte data</returns>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.GetConvertedFragmentBytes(System.Guid,System.String,Oculus.Web.Services.Types.ConversionType,System.Int32@,System.Int32@)">
            <summary>
            Gets the byte data for the fragment
            </summary>
            <param name="sessionId">The session id</param>
            <param name="fragmentMoniker">The moniker to use</param>
            <param name="conversionType">The conversion to run</param>
            <param name="height">The height of the image, or 0 if n/a</param>
            <param name="width">The height of the image, or 0 if n/a</param>
            <returns>The byte data</returns>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.PreprocessDocumentForReindex(System.Guid,System.String,Oculus.Web.Services.Types.Index[]@,Oculus.Web.Services.Types.ProfileIndex[]@)">
            <summary>
            Performs a preprocess of the document against the add-in. Returned indexes and profile indexes
            should be used when reindexing.
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentMoniker">The moniker for the document</param>
            <param name="outIndexValues">The set out index values, will be null if no add-in</param>
            <param name="outProfileIndexes">The set of profile indexes</param>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.ProcessReindexingEvent(System.Guid,System.String,Oculus.Web.Services.Types.IndexEventArgs,Oculus.Web.Services.Types.IndexEventArgs@,Oculus.Web.Services.Types.IndexEventResponse@)">
            <summary>
            Process indexing events as they occur on the client
            </summary>
            <param name="sessionId">The session id</param>
            <param name="documentMoniker">The document moniker</param>
            <param name="args">The event information</param>
            <param name="outArgs">The event data, which will include any changes</param>
            <param name="outResponse">The response data</param>
        </member>
        <member name="M:Oculus.Web.Services.Retrieve.ValidateReindexDocument(System.Guid,Oculus.Web.Services.Types.Index[],System.String,Oculus.Web.Services.Types.ProfileIndex[],Oculus.Applications.Indexing.IndexingError[]@,Oculus.Web.Services.Types.Index[]@,Oculus.Web.Services.Types.ProfileIndex[]@)">
            <summary>
            Validates a document against the indexing plug-in
            </summary>
            <param name="sessionId">The session id</param>
            <param name="inputIndexes">The set of input indexes</param>
            <param name="profileIndexes">The profile context indexes</param>
            <param name="documentMoniker">The moniker for the document being indexed</param>
            <param name="outErrors">Any errors produced by the plug-in</param>
            <param name="outIndexes">The set of indexes as generated by the plug-in</param>
            <param name="outProfileIndexes">The output profile context indexes</param>
        </member>
        <member name="T:Oculus.Web.Services.Search">
            <summary>
            Web service base class for searching
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Search.NewSearch(System.Guid,Oculus.Searching.SearchCriteria)">
            <summary>
            Performs a search
            </summary>
            <param name="sessionId">The session id</param>
            <param name="criteria">The criteria to use</param>
            <returns>The search result</returns>
        </member>
        <member name="M:Oculus.Web.Services.Search.WebSearch(System.String,System.String,System.String)">
            <summary>
            Performs a search
            </summary>
            <param name="sessionId">The session id</param>
            <param name="profileContextId">The session id</param>
            <param name="criteria">The criteria to use</param>
            <returns>The search result</returns>
        </member>
        <member name="M:Oculus.Web.Services.Search.NewSearchWithAddIn(System.Guid,Oculus.Searching.SearchCriteria)">
            <summary>
            Performs a search using the configured plug-ins for filtering search criteria and results
            </summary>
            <param name="sessionId">The session id</param>
            <param name="criteria">The criteria to use</param>
            <returns>The search result as an xml string</returns>
        </member>
        <member name="M:Oculus.Web.Services.Search.GetSearchInfo(System.Guid)">
            <summary>
            Retrieves information relating to searching on this server. This will automatically filter
            out profiles which don't have a plug-in
            </summary>
            <param name="sessionId">The session id</param>
            <returns>The details for the search</returns>
        </member>
        <member name="T:Oculus.Web.Services.Security">
            <summary>
            Web service base class for interacting with the security system
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Security.LoginFailReason(System.String,System.String)">
            <summary>
            Logs in to security
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
            <returns>The session id</returns>
            <exception cref="T:System.ArgumentException">If the login is incorrect</exception>
        </member>
        <member name="M:Oculus.Web.Services.Security.LoginAndChangePasswordFailReason(System.String,System.String,System.String)">
            <summary>
            Logs in to security
            </summary>
            <param name="username">The username</param>
            <param name="oldpassword">The old password to be changed</param>
            <param name="newpassword">The new password</param>
            <returns>The session id</returns>
            <exception cref="T:System.ArgumentException">If the login is incorrect</exception>
        </member>
        <member name="M:Oculus.Web.Services.Security.Login(System.String,System.String)">
            <summary>
            Logs in to security
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
            <returns>The session id</returns>
            <exception cref="T:System.ArgumentException">If the login is incorrect</exception>
        </member>
        <member name="M:Oculus.Web.Services.Security.LoginAndChangePassword(System.String,System.String,System.String)">
            <summary>
            Logs in to security
            </summary>
            <param name="username">The username</param>
            <param name="oldpassword">The old password to be changed</param>
            <param name="newpassword">The new password</param>
            <returns>The session id</returns>
            <exception cref="T:System.ArgumentException">If the login is incorrect</exception>
        </member>
        <member name="M:Oculus.Web.Services.Security.Logout(System.Guid)">
            <summary>
            Logs out the session for the specified id
            </summary>
            <param name="sessionId">The id of the session to log out</param>
        </member>
        <member name="M:Oculus.Web.Services.Security.GetSessionInfo(System.Guid)">
            <summary>
            Retrieves full session information for the specified session id
            </summary>
            <param name="sessionId">The session id to retrieve</param>
            <returns>The session information, or null if the session is invalid</returns>
        </member>
        <member name="M:Oculus.Web.Services.Security.GetGrantedObjectNames(System.Guid,System.String,System.String)">
            <summary>
            Fetches a list of objects to which the user has access of the specified type against the specified right
            </summary>
            <param name="sessionId">The session id</param>
            <param name="typeName">The object type name</param>
            <param name="rightName">The right name</param>
            <returns>The list of object names</returns>
        </member>
        <member name="M:Oculus.Web.Services.Security.GetGrantedObjectIds(System.Guid,System.String,System.String)">
            <summary>
            Fetches a list of objects to which the user has access of the specified type against the specified right
            </summary>
            <param name="sessionId">The session id</param>
            <param name="typeName">The object type name</param>
            <param name="rightName">The right name</param>
            <returns>The list of object names</returns>
        </member>
        <member name="M:Oculus.Web.Services.Security.HasAccessByName(System.Guid,System.String,System.String,System.String)">
            <summary>
            Gets whether or not the user has access to the specified object
            </summary>
            <param name="sessionId">The session id</param>
            <param name="objectName">The name of the object</param>
            <param name="typeName">The type of the object</param>
            <param name="rightName">The right to verify</param>
            <returns>True if the user has access, false otherwise</returns>
        </member>
        <member name="M:Oculus.Web.Services.Security.HasAccessById(System.Guid,System.Guid,System.String)">
            <summary>
            Gets whether or not the user has access to the specified object
            </summary>
            <param name="sessionId">The session id</param>
            <param name="targetId">The id of the object</param>
            <param name="rightName">The right to verify</param>
            <returns>True if the user has access, false otherwise</returns>
        </member>
        <member name="M:Oculus.Web.Services.Security.GetUsers">
            <summary>
            Retrieves a list of all users currently in the system
            </summary>
            <returns>The list of usernames</returns>
        </member>
        <member name="M:Oculus.Web.Services.Security.FetchGroupBrandImage(System.Guid)">
            <summary>
            Gets whether or not the user has access to the specified object
            </summary>
            <param name="sessionId">The session id</param>
            <returns>True if the user has access, false otherwise</returns>
        </member>
        <member name="M:Oculus.Web.Services.Security.FetchClientBrandImage">
            <summary>
            Gets whether or not the user has access to the specified object
            </summary>
            <returns>True if the user has access, false otherwise</returns>
        </member>
        <member name="T:Oculus.Web.Services.Types.IndexEventResponse">
            <summary>
            Contains web-service friendly information for indexing events. Placeholder, for now.
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.IndexEventResponse.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Oculus.Web.Services.Types.IndexEventArgs">
            <summary>
            Contains web-service friendly information for indexing events
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.IndexEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.IndexEventArgs.ProfileIndexes">
            <summary>
            Get/set the profile indexes for the event
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.IndexEventArgs.IndexEvent">
            <summary>
            Get/set the index event
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.IndexEventArgs.Index">
            <summary>
            Get/set the index which generated the event
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.IndexEventArgs.IndexValues">
            <summary>
            Get/set the current index values for the document
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.IndexEventArgs.DocumentXml">
            <summary>
            Get/set the document xml
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.IndexEventArgs.ToStandardEventArgs">
            <summary>
            Convert the object to the standard event args object
            </summary>
            <returns>The event args</returns>
        </member>
        <member name="M:Oculus.Web.Services.Types.IndexEventArgs.FromStandardEventArgs(Oculus.Applications.IndexEventArgs,System.String)">
            <summary>
            Converts the stanard args into web service args
            </summary>
            <param name="evtArgs">The event args</param>
            <param name="documentXml">The document xml</param>
            <returns>The args</returns>
        </member>
        <member name="T:Oculus.Web.Services.Types.SearchInfo">
            <summary>
            Contains basic search information, this is used to reduce the number of calls
            through to the server
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.SearchInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.SearchInfo.ProfileContextId">
            <summary>
            Get/set the profile conetxt id
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.SearchInfo.HasEdit">
            <summary>
            Get/set whether or not the user has edit permissions
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.SearchInfo.HasDelete">
            <summary>
            Get/set whether or not the user has delete permissions
            </summary>
        </member>
        <member name="T:Oculus.Web.Services.Types.ProfileIndexListItem">
            <summary>
            Contains index information
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.ProfileIndexListItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.ProfileIndexListItem.#ctor(System.String,System.String)">
            <summary>
            Initialization constructor
            </summary>
            <param name="description">The description</param>
            <param name="value">The value</param>
        </member>
        <member name="P:Oculus.Web.Services.Types.ProfileIndexListItem.Description">
            <summary>
            Get/set the description
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.ProfileIndexListItem.Value">
            <summary>
            Get/set the value
            </summary>
        </member>
        <member name="T:Oculus.Web.Services.Types.ProfileIndex">
            <summary>
            Contains index information
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.ProfileIndex.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.ProfileIndex.#ctor(Oculus.Configuration.Components.Index)">
            <summary>
            Initialization constructor
            </summary>
            <param name="index">The index to copy</param>
        </member>
        <member name="P:Oculus.Web.Services.Types.ProfileIndex.Type">
            <summary>
            the type of the index
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.ProfileIndex.Description">
            <summary>
            Description 
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.ProfileIndex.Length">
            <summary>
            Get/set the length of the index. Must be greater than zero.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is less than zero</exception>
        </member>
        <member name="P:Oculus.Web.Services.Types.ProfileIndex.Custom">
            <summary>
            The custom attribute on the index
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.ProfileIndex.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.ProfileIndex.IndexBehaviour">
            <summary>
            Get the behaviour for this index
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.ProfileIndex.IndexAttribute">
            <summary>
            Get the attribute for this index
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.ProfileIndex.ListItems">
            <summary>
            Gets the list items for this index.
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.ProfileIndex.FromIndexList(Oculus.Configuration.Components.Collections.IndexList)">
            <summary>
            Converts the index list to a profile index array
            </summary>
            <param name="indexList">The list</param>
            <returns>The array</returns>
        </member>
        <member name="M:Oculus.Web.Services.Types.ProfileIndex.ToIndexList(Oculus.Web.Services.Types.ProfileIndex[])">
            <summary>
            Converts the profile index array to an index list
            </summary>
            <param name="profileIndexes">Profile indexes</param>
            <returns>The list</returns>
        </member>
        <member name="T:Oculus.Web.Services.Types.Document">
            <summary>
            Contains document information
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.Document.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.Document.#ctor(Oculus.Storage.StorageDocument)">
            <summary>
            Initialization constructor
            </summary>
            <param name="document">The document from which we're getting our data</param>
        </member>
        <member name="P:Oculus.Web.Services.Types.Document.Name">
            <summary>
            Get/set the document name
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.Document.Description">
            <summary>
            Get/set the document description
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.Document.Metadata">
            <summary>
            Get/set the metadata for the document
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.Document.SystemMoniker">
            <summary>
            Get/set the system moniker
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.Document.Indexes">
            <summary>
            Get/set the indexes for the document
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.Document.Fragments">
            <summary>
            Get/set the fragments for the document
            </summary>
        </member>
        <member name="T:Oculus.Web.Services.Types.ConversionType">
            <summary>
            Available conversions when retrieving fragment data
            </summary>
        </member>
        <member name="F:Oculus.Web.Services.Types.ConversionType.None">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="F:Oculus.Web.Services.Types.ConversionType.ToPng">
            <summary>
            Convert image types to PNG
            </summary>
        </member>
        <member name="T:Oculus.Web.Services.Types.Fragment">
            <summary>
            Contains fragment information
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.Fragment.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.Fragment.#ctor(Oculus.Storage.StorageFragment)">
            <summary>
            Initialization constructor
            </summary>
            <param name="fragment">The fragment from which we're getting our data</param>
        </member>
        <member name="P:Oculus.Web.Services.Types.Fragment.SystemMoniker">
            <summary>
            Get/set the system moniker
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.Fragment.DocumentMoniker">
            <summary>
            Get/set the document moniker
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.Fragment.DataLocationMoniker">
            <summary>
            Get/set the data location moniker
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.Fragment.Filename">
            <summary>
            Get/set the filename
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.Fragment.IsImage">
            <summary>
            Get/set the IsImage
            </summary>
        </member>
        <member name="T:Oculus.Web.Services.Types.Index">
            <summary>
            Contains index information
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.Index.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.Index.#ctor(Oculus.Configuration.Components.IndexValue)">
            <summary>
            Initialization constructor
            </summary>
            <param name="index">The index from which we're getting our data</param>
        </member>
        <member name="P:Oculus.Web.Services.Types.Index.Name">
            <summary>
            Get/set the index name
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.Index.Value">
            <summary>
            Get/set the index value
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.Index.ToIndexValueList(Oculus.Web.Services.Types.Index[])">
            <summary>
            Converts the web service type to the index value type
            </summary>
            <returns>The converted list</returns>
        </member>
        <member name="M:Oculus.Web.Services.Types.Index.FromIndexValueList(Oculus.Configuration.Components.Collections.IndexValueList)">
            <summary>
            Converts the indexes to an array
            </summary>
            <param name="indexes">The indexes</param>
            <returns>The array</returns>
        </member>
        <member name="T:Oculus.Web.Services.Types.SessionInfo">
            <summary>
            Contains basic session information
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.SessionInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Oculus.Web.Services.Types.SessionInfo.#ctor(Oculus.Security.OculusPrincipal)">
            <summary>
            Initialization constructor
            </summary>
            <param name="principal">The principal from which we're getting our data</param>
        </member>
        <member name="P:Oculus.Web.Services.Types.SessionInfo.SessionId">
            <summary>
            Get/set the session id
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.SessionInfo.Username">
            <summary>
            Get/set the username
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.SessionInfo.UserId">
            <summary>
            Get/set the user id
            </summary>
        </member>
        <member name="T:Oculus.Web.Services.Types.UserInfo">
            <summary>
            Web service class for user information
            </summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.UserInfo.Name">
            <summary>Get/set the username</summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.UserInfo.Id">
            <summary>Get/set the id</summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.UserInfo.LastLogon">
            <summary>Get/set the last logon</summary>
        </member>
        <member name="P:Oculus.Web.Services.Types.UserInfo.PassCreated">
            <summary>Get/set the last logon</summary>
        </member>
        <member name="T:Oculus.Web.Utility">
            <summary>
            Utility methods for the web
            </summary>
        </member>
        <member name="M:Oculus.Web.Utility.FindParentControlOfType``1(System.Web.UI.Control)">
            <summary>
            Finds a parent in the control hierarchy of the specified type. Subclasses of
            the specified class will also be considered a match
            </summary>
            <typeparam name="T">The type of object to retrieve</typeparam>
            <param name="control">The control to start from, this control IS included in the search</param>
            <returns>The parent, or null if one could not be found</returns>
        </member>
        <member name="T:Oculus.Web.HttpApplication">
            <summary>
            Represents an Oculus web application
            </summary>
        </member>
        <member name="M:Oculus.Web.HttpApplication.DeleteCookie(System.String)">
            <summary>
            Deletes the cookie by expiring it at the beginning of time
            </summary>
        </member>
        <member name="M:Oculus.Web.HttpApplication.AddRememberMeCookie(Oculus.Security.OculusPrincipal,System.String)">
            <summary>
            Adds the "remember me" cookie for the user
            </summary>
            <param name="principal">The authenticated principal</param>
            <param name="password">The password to use for the cookie</param>
        </member>
        <member name="M:Oculus.Web.HttpApplication.AddSessionCookie(Oculus.Security.OculusPrincipal)">
            <summary>
            Adds the session cookie for the current session
            </summary>
            <param name="principal">The authenticated principal</param>
        </member>
        <member name="M:Oculus.Web.HttpApplication.SetPrincipal(Oculus.Security.OculusPrincipal)">
            <summary>
            Sets the principal against thread, context, etc
            </summary>
            <param name="principal">The principal to use</param>
        </member>
        <member name="M:Oculus.Web.HttpApplication.AuthenticateRequestViaQueryString">
            <summary>
            Authenticates the request against the query string, returns true if the attempt was successful
            </summary>
            <returns>True if the authentication succeeded, false otherwise</returns>
        </member>
        <member name="M:Oculus.Web.HttpApplication.AuthenticateSession(System.String)">
            <summary>
            Authenticates the session based on the id, automatically sets the principal on the thread/context
            </summary>
            <param name="sessionId">The session id to check</param>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:Oculus.Web.HttpApplication.AuthenticateUsingRememberMeCookie">
            <summary>
            Performs an authentication using the remember me cookie
            </summary>
            <returns>True if successful, false otherwise</returns>
        </member>
        <member name="M:Oculus.Web.HttpApplication.ActiveLogin(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
             Does the authentication for the user and storage of principal info against the user's
             cookie.  This includes the user's Token (identifying their session w/security), their
             unique ID, and their username.
            </summary>
            <param name="username">The username to log in with</param>
            <param name="password">The password to log in with</param>
            <param name="autoForward">If true, will auto forward to the requested url</param>
            <param name="storeCredentialsAsCookie">If true, will save an encrypted set of credentials to the users cookie</param>
        </member>
        <member name="M:Oculus.Web.HttpApplication.StandardAuthenticateRequest">
            <summary>
            Performs a requestion authentication (session validation). Will automatically log-in if user 
            has the "remember me" cookie.
            </summary>
        </member>
        <member name="M:Oculus.Web.HttpApplication.StandardBeginSession">
            <summary>
            On the beginning of a session, run this to clear our cookies, log out, etc
            </summary>
        </member>
        <member name="M:Oculus.Web.HttpApplication.ChangePassword(System.String)">
            <summary>
            Changes the password of the currently logged in user to the new password
            </summary>
            <param name="newPassword">The new password</param>
        </member>
    </members>
</doc>
