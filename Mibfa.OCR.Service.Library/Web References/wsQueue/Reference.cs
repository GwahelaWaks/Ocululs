//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Mibfa.OCR.Service.Library.wsQueue {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="QueueSoap", Namespace="https://www.gijima.com/Oculus")]
    public partial class Queue : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAvailableQueuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueueTotalCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNextWebDocumentFromQueueOperationCompleted;
        
        private System.Threading.SendOrPostCallback CompleteWebDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelWebRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessWebDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteWebDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFragmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFragmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFragmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFragmentDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestDocumentFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessIndexingEventOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Queue() {
            this.Url = global::Mibfa.OCR.Service.Library.Properties.Settings.Default.Mibfa_OCR_Service_Library_wsQueue_Queue;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAvailableQueuesCompletedEventHandler GetAvailableQueuesCompleted;
        
        /// <remarks/>
        public event GetQueueTotalCountCompletedEventHandler GetQueueTotalCountCompleted;
        
        /// <remarks/>
        public event RequestDocumentCompletedEventHandler RequestDocumentCompleted;
        
        /// <remarks/>
        public event ProcessDocumentCompletedEventHandler ProcessDocumentCompleted;
        
        /// <remarks/>
        public event CompleteDocumentCompletedEventHandler CompleteDocumentCompleted;
        
        /// <remarks/>
        public event CancelRequestCompletedEventHandler CancelRequestCompleted;
        
        /// <remarks/>
        public event GetNextWebDocumentFromQueueCompletedEventHandler GetNextWebDocumentFromQueueCompleted;
        
        /// <remarks/>
        public event CompleteWebDocumentCompletedEventHandler CompleteWebDocumentCompleted;
        
        /// <remarks/>
        public event CancelWebRequestCompletedEventHandler CancelWebRequestCompleted;
        
        /// <remarks/>
        public event ProcessWebDocumentCompletedEventHandler ProcessWebDocumentCompleted;
        
        /// <remarks/>
        public event DeleteWebDocumentCompletedEventHandler DeleteWebDocumentCompleted;
        
        /// <remarks/>
        public event DeleteDocumentCompletedEventHandler DeleteDocumentCompleted;
        
        /// <remarks/>
        public event DeleteFragmentCompletedEventHandler DeleteFragmentCompleted;
        
        /// <remarks/>
        public event GetDocumentCompletedEventHandler GetDocumentCompleted;
        
        /// <remarks/>
        public event GetFragmentCompletedEventHandler GetFragmentCompleted;
        
        /// <remarks/>
        public event GetFragmentsCompletedEventHandler GetFragmentsCompleted;
        
        /// <remarks/>
        public event GetFragmentDataCompletedEventHandler GetFragmentDataCompleted;
        
        /// <remarks/>
        public event RequestDocumentFullCompletedEventHandler RequestDocumentFullCompleted;
        
        /// <remarks/>
        public event ValidateDocumentCompletedEventHandler ValidateDocumentCompleted;
        
        /// <remarks/>
        public event ProcessIndexingEventCompletedEventHandler ProcessIndexingEventCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/GetAvailableQueues", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvailableQueues(string sessionId) {
            object[] results = this.Invoke("GetAvailableQueues", new object[] {
                        sessionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableQueuesAsync(string sessionId) {
            this.GetAvailableQueuesAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetAvailableQueuesAsync(string sessionId, object userState) {
            if ((this.GetAvailableQueuesOperationCompleted == null)) {
                this.GetAvailableQueuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableQueuesOperationCompleted);
            }
            this.InvokeAsync("GetAvailableQueues", new object[] {
                        sessionId}, this.GetAvailableQueuesOperationCompleted, userState);
        }
        
        private void OnGetAvailableQueuesOperationCompleted(object arg) {
            if ((this.GetAvailableQueuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableQueuesCompleted(this, new GetAvailableQueuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/GetQueueTotalCount", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetQueueTotalCount(string queueName) {
            object[] results = this.Invoke("GetQueueTotalCount", new object[] {
                        queueName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueueTotalCountAsync(string queueName) {
            this.GetQueueTotalCountAsync(queueName, null);
        }
        
        /// <remarks/>
        public void GetQueueTotalCountAsync(string queueName, object userState) {
            if ((this.GetQueueTotalCountOperationCompleted == null)) {
                this.GetQueueTotalCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueueTotalCountOperationCompleted);
            }
            this.InvokeAsync("GetQueueTotalCount", new object[] {
                        queueName}, this.GetQueueTotalCountOperationCompleted, userState);
        }
        
        private void OnGetQueueTotalCountOperationCompleted(object arg) {
            if ((this.GetQueueTotalCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueueTotalCountCompleted(this, new GetQueueTotalCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/RequestDocument", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("transactionId")]
        public System.Guid RequestDocument(System.Guid sessionId, string queueName, out string documentXml) {
            object[] results = this.Invoke("RequestDocument", new object[] {
                        sessionId,
                        queueName});
            documentXml = ((string)(results[1]));
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void RequestDocumentAsync(System.Guid sessionId, string queueName) {
            this.RequestDocumentAsync(sessionId, queueName, null);
        }
        
        /// <remarks/>
        public void RequestDocumentAsync(System.Guid sessionId, string queueName, object userState) {
            if ((this.RequestDocumentOperationCompleted == null)) {
                this.RequestDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestDocumentOperationCompleted);
            }
            this.InvokeAsync("RequestDocument", new object[] {
                        sessionId,
                        queueName}, this.RequestDocumentOperationCompleted, userState);
        }
        
        private void OnRequestDocumentOperationCompleted(object arg) {
            if ((this.RequestDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestDocumentCompleted(this, new RequestDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/ProcessDocument", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ProcessDocument(System.Guid sessionId, System.Guid transactionId, string documentXml) {
            this.Invoke("ProcessDocument", new object[] {
                        sessionId,
                        transactionId,
                        documentXml});
        }
        
        /// <remarks/>
        public void ProcessDocumentAsync(System.Guid sessionId, System.Guid transactionId, string documentXml) {
            this.ProcessDocumentAsync(sessionId, transactionId, documentXml, null);
        }
        
        /// <remarks/>
        public void ProcessDocumentAsync(System.Guid sessionId, System.Guid transactionId, string documentXml, object userState) {
            if ((this.ProcessDocumentOperationCompleted == null)) {
                this.ProcessDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessDocumentOperationCompleted);
            }
            this.InvokeAsync("ProcessDocument", new object[] {
                        sessionId,
                        transactionId,
                        documentXml}, this.ProcessDocumentOperationCompleted, userState);
        }
        
        private void OnProcessDocumentOperationCompleted(object arg) {
            if ((this.ProcessDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/CompleteDocument", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CompleteDocument(System.Guid sessionId, System.Guid transactionId) {
            this.Invoke("CompleteDocument", new object[] {
                        sessionId,
                        transactionId});
        }
        
        /// <remarks/>
        public void CompleteDocumentAsync(System.Guid sessionId, System.Guid transactionId) {
            this.CompleteDocumentAsync(sessionId, transactionId, null);
        }
        
        /// <remarks/>
        public void CompleteDocumentAsync(System.Guid sessionId, System.Guid transactionId, object userState) {
            if ((this.CompleteDocumentOperationCompleted == null)) {
                this.CompleteDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteDocumentOperationCompleted);
            }
            this.InvokeAsync("CompleteDocument", new object[] {
                        sessionId,
                        transactionId}, this.CompleteDocumentOperationCompleted, userState);
        }
        
        private void OnCompleteDocumentOperationCompleted(object arg) {
            if ((this.CompleteDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/CancelRequest", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelRequest(System.Guid sessionId, System.Guid transactionId) {
            this.Invoke("CancelRequest", new object[] {
                        sessionId,
                        transactionId});
        }
        
        /// <remarks/>
        public void CancelRequestAsync(System.Guid sessionId, System.Guid transactionId) {
            this.CancelRequestAsync(sessionId, transactionId, null);
        }
        
        /// <remarks/>
        public void CancelRequestAsync(System.Guid sessionId, System.Guid transactionId, object userState) {
            if ((this.CancelRequestOperationCompleted == null)) {
                this.CancelRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelRequestOperationCompleted);
            }
            this.InvokeAsync("CancelRequest", new object[] {
                        sessionId,
                        transactionId}, this.CancelRequestOperationCompleted, userState);
        }
        
        private void OnCancelRequestOperationCompleted(object arg) {
            if ((this.CancelRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/GetNextWebDocumentFromQueue", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetNextWebDocumentFromQueue(string sessionId, string queueName, string singleUser, string hasDocument) {
            object[] results = this.Invoke("GetNextWebDocumentFromQueue", new object[] {
                        sessionId,
                        queueName,
                        singleUser,
                        hasDocument});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNextWebDocumentFromQueueAsync(string sessionId, string queueName, string singleUser, string hasDocument) {
            this.GetNextWebDocumentFromQueueAsync(sessionId, queueName, singleUser, hasDocument, null);
        }
        
        /// <remarks/>
        public void GetNextWebDocumentFromQueueAsync(string sessionId, string queueName, string singleUser, string hasDocument, object userState) {
            if ((this.GetNextWebDocumentFromQueueOperationCompleted == null)) {
                this.GetNextWebDocumentFromQueueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNextWebDocumentFromQueueOperationCompleted);
            }
            this.InvokeAsync("GetNextWebDocumentFromQueue", new object[] {
                        sessionId,
                        queueName,
                        singleUser,
                        hasDocument}, this.GetNextWebDocumentFromQueueOperationCompleted, userState);
        }
        
        private void OnGetNextWebDocumentFromQueueOperationCompleted(object arg) {
            if ((this.GetNextWebDocumentFromQueueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNextWebDocumentFromQueueCompleted(this, new GetNextWebDocumentFromQueueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/CompleteWebDocument", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CompleteWebDocument(string sessionId, string uniqueId) {
            this.Invoke("CompleteWebDocument", new object[] {
                        sessionId,
                        uniqueId});
        }
        
        /// <remarks/>
        public void CompleteWebDocumentAsync(string sessionId, string uniqueId) {
            this.CompleteWebDocumentAsync(sessionId, uniqueId, null);
        }
        
        /// <remarks/>
        public void CompleteWebDocumentAsync(string sessionId, string uniqueId, object userState) {
            if ((this.CompleteWebDocumentOperationCompleted == null)) {
                this.CompleteWebDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompleteWebDocumentOperationCompleted);
            }
            this.InvokeAsync("CompleteWebDocument", new object[] {
                        sessionId,
                        uniqueId}, this.CompleteWebDocumentOperationCompleted, userState);
        }
        
        private void OnCompleteWebDocumentOperationCompleted(object arg) {
            if ((this.CompleteWebDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompleteWebDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/CancelWebRequest", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelWebRequest(string sessionId, string uniqueId, string singleUser) {
            this.Invoke("CancelWebRequest", new object[] {
                        sessionId,
                        uniqueId,
                        singleUser});
        }
        
        /// <remarks/>
        public void CancelWebRequestAsync(string sessionId, string uniqueId, string singleUser) {
            this.CancelWebRequestAsync(sessionId, uniqueId, singleUser, null);
        }
        
        /// <remarks/>
        public void CancelWebRequestAsync(string sessionId, string uniqueId, string singleUser, object userState) {
            if ((this.CancelWebRequestOperationCompleted == null)) {
                this.CancelWebRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelWebRequestOperationCompleted);
            }
            this.InvokeAsync("CancelWebRequest", new object[] {
                        sessionId,
                        uniqueId,
                        singleUser}, this.CancelWebRequestOperationCompleted, userState);
        }
        
        private void OnCancelWebRequestOperationCompleted(object arg) {
            if ((this.CancelWebRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelWebRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/ProcessWebDocument", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProcessWebDocument(string sessionId, string uniqueId, string documentXml) {
            object[] results = this.Invoke("ProcessWebDocument", new object[] {
                        sessionId,
                        uniqueId,
                        documentXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessWebDocumentAsync(string sessionId, string uniqueId, string documentXml) {
            this.ProcessWebDocumentAsync(sessionId, uniqueId, documentXml, null);
        }
        
        /// <remarks/>
        public void ProcessWebDocumentAsync(string sessionId, string uniqueId, string documentXml, object userState) {
            if ((this.ProcessWebDocumentOperationCompleted == null)) {
                this.ProcessWebDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessWebDocumentOperationCompleted);
            }
            this.InvokeAsync("ProcessWebDocument", new object[] {
                        sessionId,
                        uniqueId,
                        documentXml}, this.ProcessWebDocumentOperationCompleted, userState);
        }
        
        private void OnProcessWebDocumentOperationCompleted(object arg) {
            if ((this.ProcessWebDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessWebDocumentCompleted(this, new ProcessWebDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/DeleteWebDocument", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteWebDocument(string sessionId, string documentUniqueId) {
            this.Invoke("DeleteWebDocument", new object[] {
                        sessionId,
                        documentUniqueId});
        }
        
        /// <remarks/>
        public void DeleteWebDocumentAsync(string sessionId, string documentUniqueId) {
            this.DeleteWebDocumentAsync(sessionId, documentUniqueId, null);
        }
        
        /// <remarks/>
        public void DeleteWebDocumentAsync(string sessionId, string documentUniqueId, object userState) {
            if ((this.DeleteWebDocumentOperationCompleted == null)) {
                this.DeleteWebDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteWebDocumentOperationCompleted);
            }
            this.InvokeAsync("DeleteWebDocument", new object[] {
                        sessionId,
                        documentUniqueId}, this.DeleteWebDocumentOperationCompleted, userState);
        }
        
        private void OnDeleteWebDocumentOperationCompleted(object arg) {
            if ((this.DeleteWebDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteWebDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/DeleteDocument", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDocument(System.Guid sessionId, System.Guid documentUniqueId) {
            this.Invoke("DeleteDocument", new object[] {
                        sessionId,
                        documentUniqueId});
        }
        
        /// <remarks/>
        public void DeleteDocumentAsync(System.Guid sessionId, System.Guid documentUniqueId) {
            this.DeleteDocumentAsync(sessionId, documentUniqueId, null);
        }
        
        /// <remarks/>
        public void DeleteDocumentAsync(System.Guid sessionId, System.Guid documentUniqueId, object userState) {
            if ((this.DeleteDocumentOperationCompleted == null)) {
                this.DeleteDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDocumentOperationCompleted);
            }
            this.InvokeAsync("DeleteDocument", new object[] {
                        sessionId,
                        documentUniqueId}, this.DeleteDocumentOperationCompleted, userState);
        }
        
        private void OnDeleteDocumentOperationCompleted(object arg) {
            if ((this.DeleteDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/DeleteFragment", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFragment(System.Guid sessionId, System.Guid fragmentUniqueId) {
            this.Invoke("DeleteFragment", new object[] {
                        sessionId,
                        fragmentUniqueId});
        }
        
        /// <remarks/>
        public void DeleteFragmentAsync(System.Guid sessionId, System.Guid fragmentUniqueId) {
            this.DeleteFragmentAsync(sessionId, fragmentUniqueId, null);
        }
        
        /// <remarks/>
        public void DeleteFragmentAsync(System.Guid sessionId, System.Guid fragmentUniqueId, object userState) {
            if ((this.DeleteFragmentOperationCompleted == null)) {
                this.DeleteFragmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFragmentOperationCompleted);
            }
            this.InvokeAsync("DeleteFragment", new object[] {
                        sessionId,
                        fragmentUniqueId}, this.DeleteFragmentOperationCompleted, userState);
        }
        
        private void OnDeleteFragmentOperationCompleted(object arg) {
            if ((this.DeleteFragmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFragmentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/GetDocument", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDocument(System.Guid sessionId, System.Guid documentUniqueId) {
            object[] results = this.Invoke("GetDocument", new object[] {
                        sessionId,
                        documentUniqueId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentAsync(System.Guid sessionId, System.Guid documentUniqueId) {
            this.GetDocumentAsync(sessionId, documentUniqueId, null);
        }
        
        /// <remarks/>
        public void GetDocumentAsync(System.Guid sessionId, System.Guid documentUniqueId, object userState) {
            if ((this.GetDocumentOperationCompleted == null)) {
                this.GetDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentOperationCompleted);
            }
            this.InvokeAsync("GetDocument", new object[] {
                        sessionId,
                        documentUniqueId}, this.GetDocumentOperationCompleted, userState);
        }
        
        private void OnGetDocumentOperationCompleted(object arg) {
            if ((this.GetDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentCompleted(this, new GetDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/GetFragment", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("fragmentXml")]
        public string GetFragment(System.Guid sessionId, System.Guid fragmentUniqueId, out System.Guid documentUniqueId) {
            object[] results = this.Invoke("GetFragment", new object[] {
                        sessionId,
                        fragmentUniqueId});
            documentUniqueId = ((System.Guid)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFragmentAsync(System.Guid sessionId, System.Guid fragmentUniqueId) {
            this.GetFragmentAsync(sessionId, fragmentUniqueId, null);
        }
        
        /// <remarks/>
        public void GetFragmentAsync(System.Guid sessionId, System.Guid fragmentUniqueId, object userState) {
            if ((this.GetFragmentOperationCompleted == null)) {
                this.GetFragmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFragmentOperationCompleted);
            }
            this.InvokeAsync("GetFragment", new object[] {
                        sessionId,
                        fragmentUniqueId}, this.GetFragmentOperationCompleted, userState);
        }
        
        private void OnGetFragmentOperationCompleted(object arg) {
            if ((this.GetFragmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFragmentCompleted(this, new GetFragmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/GetFragments", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("fragmentXmls")]
        public string[] GetFragments(System.Guid sessionId, System.Guid documentUniqueId, out System.Guid[] fragmentIds) {
            object[] results = this.Invoke("GetFragments", new object[] {
                        sessionId,
                        documentUniqueId});
            fragmentIds = ((System.Guid[])(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFragmentsAsync(System.Guid sessionId, System.Guid documentUniqueId) {
            this.GetFragmentsAsync(sessionId, documentUniqueId, null);
        }
        
        /// <remarks/>
        public void GetFragmentsAsync(System.Guid sessionId, System.Guid documentUniqueId, object userState) {
            if ((this.GetFragmentsOperationCompleted == null)) {
                this.GetFragmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFragmentsOperationCompleted);
            }
            this.InvokeAsync("GetFragments", new object[] {
                        sessionId,
                        documentUniqueId}, this.GetFragmentsOperationCompleted, userState);
        }
        
        private void OnGetFragmentsOperationCompleted(object arg) {
            if ((this.GetFragmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFragmentsCompleted(this, new GetFragmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/GetFragmentData", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFragmentData(System.Guid sessionId, System.Guid fragmentUniqueId) {
            object[] results = this.Invoke("GetFragmentData", new object[] {
                        sessionId,
                        fragmentUniqueId});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFragmentDataAsync(System.Guid sessionId, System.Guid fragmentUniqueId) {
            this.GetFragmentDataAsync(sessionId, fragmentUniqueId, null);
        }
        
        /// <remarks/>
        public void GetFragmentDataAsync(System.Guid sessionId, System.Guid fragmentUniqueId, object userState) {
            if ((this.GetFragmentDataOperationCompleted == null)) {
                this.GetFragmentDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFragmentDataOperationCompleted);
            }
            this.InvokeAsync("GetFragmentData", new object[] {
                        sessionId,
                        fragmentUniqueId}, this.GetFragmentDataOperationCompleted, userState);
        }
        
        private void OnGetFragmentDataOperationCompleted(object arg) {
            if ((this.GetFragmentDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFragmentDataCompleted(this, new GetFragmentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/RequestDocumentFull", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outTransactionId")]
        public System.Guid RequestDocumentFull(System.Guid sessionId, string queueName, out string outDocumentXml, out Document outStorageDocument, out ProfileIndex[] outProfileIndexes) {
            object[] results = this.Invoke("RequestDocumentFull", new object[] {
                        sessionId,
                        queueName});
            outDocumentXml = ((string)(results[1]));
            outStorageDocument = ((Document)(results[2]));
            outProfileIndexes = ((ProfileIndex[])(results[3]));
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void RequestDocumentFullAsync(System.Guid sessionId, string queueName) {
            this.RequestDocumentFullAsync(sessionId, queueName, null);
        }
        
        /// <remarks/>
        public void RequestDocumentFullAsync(System.Guid sessionId, string queueName, object userState) {
            if ((this.RequestDocumentFullOperationCompleted == null)) {
                this.RequestDocumentFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestDocumentFullOperationCompleted);
            }
            this.InvokeAsync("RequestDocumentFull", new object[] {
                        sessionId,
                        queueName}, this.RequestDocumentFullOperationCompleted, userState);
        }
        
        private void OnRequestDocumentFullOperationCompleted(object arg) {
            if ((this.RequestDocumentFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestDocumentFullCompleted(this, new RequestDocumentFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/ValidateDocument", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute("outErrors")]
        public IndexingError[] ValidateDocument(System.Guid sessionId, Index[] inputIndexes, ProfileIndex[] profileIndexes, string documentXml, out Index[] outIndexes, out ProfileIndex[] outProfileIndexes, out string outDocumentXml) {
            object[] results = this.Invoke("ValidateDocument", new object[] {
                        sessionId,
                        inputIndexes,
                        profileIndexes,
                        documentXml});
            outIndexes = ((Index[])(results[1]));
            outProfileIndexes = ((ProfileIndex[])(results[2]));
            outDocumentXml = ((string)(results[3]));
            return ((IndexingError[])(results[0]));
        }
        
        /// <remarks/>
        public void ValidateDocumentAsync(System.Guid sessionId, Index[] inputIndexes, ProfileIndex[] profileIndexes, string documentXml) {
            this.ValidateDocumentAsync(sessionId, inputIndexes, profileIndexes, documentXml, null);
        }
        
        /// <remarks/>
        public void ValidateDocumentAsync(System.Guid sessionId, Index[] inputIndexes, ProfileIndex[] profileIndexes, string documentXml, object userState) {
            if ((this.ValidateDocumentOperationCompleted == null)) {
                this.ValidateDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateDocumentOperationCompleted);
            }
            this.InvokeAsync("ValidateDocument", new object[] {
                        sessionId,
                        inputIndexes,
                        profileIndexes,
                        documentXml}, this.ValidateDocumentOperationCompleted, userState);
        }
        
        private void OnValidateDocumentOperationCompleted(object arg) {
            if ((this.ValidateDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateDocumentCompleted(this, new ValidateDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/ProcessIndexingEvent", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("outArgs")]
        public IndexEventArgs ProcessIndexingEvent(System.Guid sessionId, IndexEventArgs args, out IndexEventResponse outResponse) {
            object[] results = this.Invoke("ProcessIndexingEvent", new object[] {
                        sessionId,
                        args});
            outResponse = ((IndexEventResponse)(results[1]));
            return ((IndexEventArgs)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessIndexingEventAsync(System.Guid sessionId, IndexEventArgs args) {
            this.ProcessIndexingEventAsync(sessionId, args, null);
        }
        
        /// <remarks/>
        public void ProcessIndexingEventAsync(System.Guid sessionId, IndexEventArgs args, object userState) {
            if ((this.ProcessIndexingEventOperationCompleted == null)) {
                this.ProcessIndexingEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessIndexingEventOperationCompleted);
            }
            this.InvokeAsync("ProcessIndexingEvent", new object[] {
                        sessionId,
                        args}, this.ProcessIndexingEventOperationCompleted, userState);
        }
        
        private void OnProcessIndexingEventOperationCompleted(object arg) {
            if ((this.ProcessIndexingEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessIndexingEventCompleted(this, new ProcessIndexingEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public partial class Document {
        
        private string nameField;
        
        private string descriptionField;
        
        private string metadataField;
        
        private string systemMonikerField;
        
        private Index[] indexesField;
        
        private Fragment[] fragmentsField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Metadata {
            get {
                return this.metadataField;
            }
            set {
                this.metadataField = value;
            }
        }
        
        /// <remarks/>
        public string SystemMoniker {
            get {
                return this.systemMonikerField;
            }
            set {
                this.systemMonikerField = value;
            }
        }
        
        /// <remarks/>
        public Index[] Indexes {
            get {
                return this.indexesField;
            }
            set {
                this.indexesField = value;
            }
        }
        
        /// <remarks/>
        public Fragment[] Fragments {
            get {
                return this.fragmentsField;
            }
            set {
                this.fragmentsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public partial class Index {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public partial class IndexEventResponse {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public partial class IndexEventArgs {
        
        private ProfileIndex[] profileIndexesField;
        
        private IndexEvent indexEventField;
        
        private ProfileIndex indexField;
        
        private Index[] indexValuesField;
        
        private string documentXmlField;
        
        /// <remarks/>
        public ProfileIndex[] ProfileIndexes {
            get {
                return this.profileIndexesField;
            }
            set {
                this.profileIndexesField = value;
            }
        }
        
        /// <remarks/>
        public IndexEvent IndexEvent {
            get {
                return this.indexEventField;
            }
            set {
                this.indexEventField = value;
            }
        }
        
        /// <remarks/>
        public ProfileIndex Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        public Index[] IndexValues {
            get {
                return this.indexValuesField;
            }
            set {
                this.indexValuesField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentXml {
            get {
                return this.documentXmlField;
            }
            set {
                this.documentXmlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public partial class ProfileIndex {
        
        private IndexType typeField;
        
        private string descriptionField;
        
        private int lengthField;
        
        private string customField;
        
        private string nameField;
        
        private IndexBehaviour indexBehaviourField;
        
        private IndexAttribute indexAttributeField;
        
        private ProfileIndexListItem[] listItemsField;
        
        /// <remarks/>
        public IndexType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int Length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        /// <remarks/>
        public string Custom {
            get {
                return this.customField;
            }
            set {
                this.customField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public IndexBehaviour IndexBehaviour {
            get {
                return this.indexBehaviourField;
            }
            set {
                this.indexBehaviourField = value;
            }
        }
        
        /// <remarks/>
        public IndexAttribute IndexAttribute {
            get {
                return this.indexAttributeField;
            }
            set {
                this.indexAttributeField = value;
            }
        }
        
        /// <remarks/>
        public ProfileIndexListItem[] ListItems {
            get {
                return this.listItemsField;
            }
            set {
                this.listItemsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public enum IndexType {
        
        /// <remarks/>
        AlphaNumeric,
        
        /// <remarks/>
        Boolean,
        
        /// <remarks/>
        Currency,
        
        /// <remarks/>
        Date,
        
        /// <remarks/>
        DateTime,
        
        /// <remarks/>
        List,
        
        /// <remarks/>
        Numeric,
        
        /// <remarks/>
        RegularExpression,
        
        /// <remarks/>
        Text,
        
        /// <remarks/>
        Time,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public enum IndexBehaviour {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        WriteOnce,
        
        /// <remarks/>
        ReadOnly,
        
        /// <remarks/>
        Hidden,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public enum IndexAttribute {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        Searchable = 2,
        
        /// <remarks/>
        Mandatory = 4,
        
        /// <remarks/>
        Barcode = 8,
        
        /// <remarks/>
        Dynamic = 16,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public partial class ProfileIndexListItem {
        
        private string descriptionField;
        
        private string valueField;
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public enum IndexEvent {
        
        /// <remarks/>
        ValueChange,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public partial class IndexingError {
        
        private string indexNameField;
        
        private string errorMessageField;
        
        /// <remarks/>
        public string IndexName {
            get {
                return this.indexNameField;
            }
            set {
                this.indexNameField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public partial class Fragment {
        
        private string systemMonikerField;
        
        private string documentMonikerField;
        
        private string dataLocationMonikerField;
        
        private string filenameField;
        
        private bool isImageField;
        
        /// <remarks/>
        public string SystemMoniker {
            get {
                return this.systemMonikerField;
            }
            set {
                this.systemMonikerField = value;
            }
        }
        
        /// <remarks/>
        public string DocumentMoniker {
            get {
                return this.documentMonikerField;
            }
            set {
                this.documentMonikerField = value;
            }
        }
        
        /// <remarks/>
        public string DataLocationMoniker {
            get {
                return this.dataLocationMonikerField;
            }
            set {
                this.dataLocationMonikerField = value;
            }
        }
        
        /// <remarks/>
        public string Filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsImage {
            get {
                return this.isImageField;
            }
            set {
                this.isImageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetAvailableQueuesCompletedEventHandler(object sender, GetAvailableQueuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableQueuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableQueuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetQueueTotalCountCompletedEventHandler(object sender, GetQueueTotalCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueueTotalCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueueTotalCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void RequestDocumentCompletedEventHandler(object sender, RequestDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string documentXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ProcessDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CompleteDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CancelRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetNextWebDocumentFromQueueCompletedEventHandler(object sender, GetNextWebDocumentFromQueueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNextWebDocumentFromQueueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNextWebDocumentFromQueueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CompleteWebDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void CancelWebRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ProcessWebDocumentCompletedEventHandler(object sender, ProcessWebDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessWebDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessWebDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void DeleteWebDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void DeleteDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void DeleteFragmentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetDocumentCompletedEventHandler(object sender, GetDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetFragmentCompletedEventHandler(object sender, GetFragmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFragmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFragmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid documentUniqueId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetFragmentsCompletedEventHandler(object sender, GetFragmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFragmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFragmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid[] fragmentIds {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetFragmentDataCompletedEventHandler(object sender, GetFragmentDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFragmentDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFragmentDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void RequestDocumentFullCompletedEventHandler(object sender, RequestDocumentFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestDocumentFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestDocumentFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string outDocumentXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public Document outStorageDocument {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Document)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public ProfileIndex[] outProfileIndexes {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProfileIndex[])(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ValidateDocumentCompletedEventHandler(object sender, ValidateDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IndexingError[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IndexingError[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Index[] outIndexes {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Index[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ProfileIndex[] outProfileIndexes {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProfileIndex[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string outDocumentXml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ProcessIndexingEventCompletedEventHandler(object sender, ProcessIndexingEventCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessIndexingEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessIndexingEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IndexEventArgs Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IndexEventArgs)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public IndexEventResponse outResponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IndexEventResponse)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591