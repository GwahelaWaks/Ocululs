//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Mibfa.OCR.Service.Library.wsSecurity {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SecuritySoap", Namespace="https://www.gijima.com/Oculus")]
    public partial class Security : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ConvertSIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginFailReasonOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginAndChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginAndChangePasswordFailReasonOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSessionInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGrantedObjectNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGrantedObjectIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasAccessByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback HasAccessByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchClientBrandImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback FetchGroupBrandImageOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Security() {
            this.Url = global::Mibfa.OCR.Service.Library.Properties.Settings.Default.Mibfa_OCR_Service_Library_wsSecurity_Security;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ConvertSIDCompletedEventHandler ConvertSIDCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event LoginFailReasonCompletedEventHandler LoginFailReasonCompleted;
        
        /// <remarks/>
        public event LoginAndChangePasswordCompletedEventHandler LoginAndChangePasswordCompleted;
        
        /// <remarks/>
        public event LoginAndChangePasswordFailReasonCompletedEventHandler LoginAndChangePasswordFailReasonCompleted;
        
        /// <remarks/>
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        /// <remarks/>
        public event GetSessionInfoCompletedEventHandler GetSessionInfoCompleted;
        
        /// <remarks/>
        public event GetGrantedObjectNamesCompletedEventHandler GetGrantedObjectNamesCompleted;
        
        /// <remarks/>
        public event GetGrantedObjectIdsCompletedEventHandler GetGrantedObjectIdsCompleted;
        
        /// <remarks/>
        public event HasAccessByNameCompletedEventHandler HasAccessByNameCompleted;
        
        /// <remarks/>
        public event HasAccessByIdCompletedEventHandler HasAccessByIdCompleted;
        
        /// <remarks/>
        public event GetUsersCompletedEventHandler GetUsersCompleted;
        
        /// <remarks/>
        public event FetchClientBrandImageCompletedEventHandler FetchClientBrandImageCompleted;
        
        /// <remarks/>
        public event FetchGroupBrandImageCompletedEventHandler FetchGroupBrandImageCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/ConvertSID", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid ConvertSID(string sessionID) {
            object[] results = this.Invoke("ConvertSID", new object[] {
                        sessionID});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertSIDAsync(string sessionID) {
            this.ConvertSIDAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void ConvertSIDAsync(string sessionID, object userState) {
            if ((this.ConvertSIDOperationCompleted == null)) {
                this.ConvertSIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertSIDOperationCompleted);
            }
            this.InvokeAsync("ConvertSID", new object[] {
                        sessionID}, this.ConvertSIDOperationCompleted, userState);
        }
        
        private void OnConvertSIDOperationCompleted(object arg) {
            if ((this.ConvertSIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertSIDCompleted(this, new ConvertSIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/Login", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid Login(string username, string password) {
            object[] results = this.Invoke("Login", new object[] {
                        username,
                        password});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string username, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        username,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/LoginFailReason", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoginFailReason(string username, string password) {
            object[] results = this.Invoke("LoginFailReason", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginFailReasonAsync(string username, string password) {
            this.LoginFailReasonAsync(username, password, null);
        }
        
        /// <remarks/>
        public void LoginFailReasonAsync(string username, string password, object userState) {
            if ((this.LoginFailReasonOperationCompleted == null)) {
                this.LoginFailReasonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginFailReasonOperationCompleted);
            }
            this.InvokeAsync("LoginFailReason", new object[] {
                        username,
                        password}, this.LoginFailReasonOperationCompleted, userState);
        }
        
        private void OnLoginFailReasonOperationCompleted(object arg) {
            if ((this.LoginFailReasonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginFailReasonCompleted(this, new LoginFailReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/LoginAndChangePassword", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid LoginAndChangePassword(string username, string oldpassword, string newpassword) {
            object[] results = this.Invoke("LoginAndChangePassword", new object[] {
                        username,
                        oldpassword,
                        newpassword});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAndChangePasswordAsync(string username, string oldpassword, string newpassword) {
            this.LoginAndChangePasswordAsync(username, oldpassword, newpassword, null);
        }
        
        /// <remarks/>
        public void LoginAndChangePasswordAsync(string username, string oldpassword, string newpassword, object userState) {
            if ((this.LoginAndChangePasswordOperationCompleted == null)) {
                this.LoginAndChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginAndChangePasswordOperationCompleted);
            }
            this.InvokeAsync("LoginAndChangePassword", new object[] {
                        username,
                        oldpassword,
                        newpassword}, this.LoginAndChangePasswordOperationCompleted, userState);
        }
        
        private void OnLoginAndChangePasswordOperationCompleted(object arg) {
            if ((this.LoginAndChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginAndChangePasswordCompleted(this, new LoginAndChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/LoginAndChangePasswordFailReason", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LoginAndChangePasswordFailReason(string username, string oldpassword, string newpassword) {
            object[] results = this.Invoke("LoginAndChangePasswordFailReason", new object[] {
                        username,
                        oldpassword,
                        newpassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAndChangePasswordFailReasonAsync(string username, string oldpassword, string newpassword) {
            this.LoginAndChangePasswordFailReasonAsync(username, oldpassword, newpassword, null);
        }
        
        /// <remarks/>
        public void LoginAndChangePasswordFailReasonAsync(string username, string oldpassword, string newpassword, object userState) {
            if ((this.LoginAndChangePasswordFailReasonOperationCompleted == null)) {
                this.LoginAndChangePasswordFailReasonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginAndChangePasswordFailReasonOperationCompleted);
            }
            this.InvokeAsync("LoginAndChangePasswordFailReason", new object[] {
                        username,
                        oldpassword,
                        newpassword}, this.LoginAndChangePasswordFailReasonOperationCompleted, userState);
        }
        
        private void OnLoginAndChangePasswordFailReasonOperationCompleted(object arg) {
            if ((this.LoginAndChangePasswordFailReasonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginAndChangePasswordFailReasonCompleted(this, new LoginAndChangePasswordFailReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/Logout", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Logout(System.Guid sessionId) {
            this.Invoke("Logout", new object[] {
                        sessionId});
        }
        
        /// <remarks/>
        public void LogoutAsync(System.Guid sessionId) {
            this.LogoutAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void LogoutAsync(System.Guid sessionId, object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
            }
            this.InvokeAsync("Logout", new object[] {
                        sessionId}, this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutOperationCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/GetSessionInfo", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SessionInfo GetSessionInfo(string sessionId) {
            object[] results = this.Invoke("GetSessionInfo", new object[] {
                        sessionId});
            return ((SessionInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetSessionInfoAsync(string sessionId) {
            this.GetSessionInfoAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetSessionInfoAsync(string sessionId, object userState) {
            if ((this.GetSessionInfoOperationCompleted == null)) {
                this.GetSessionInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSessionInfoOperationCompleted);
            }
            this.InvokeAsync("GetSessionInfo", new object[] {
                        sessionId}, this.GetSessionInfoOperationCompleted, userState);
        }
        
        private void OnGetSessionInfoOperationCompleted(object arg) {
            if ((this.GetSessionInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSessionInfoCompleted(this, new GetSessionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/GetGrantedObjectNames", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetGrantedObjectNames(System.Guid sessionId, string typeName, string rightName) {
            object[] results = this.Invoke("GetGrantedObjectNames", new object[] {
                        sessionId,
                        typeName,
                        rightName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetGrantedObjectNamesAsync(System.Guid sessionId, string typeName, string rightName) {
            this.GetGrantedObjectNamesAsync(sessionId, typeName, rightName, null);
        }
        
        /// <remarks/>
        public void GetGrantedObjectNamesAsync(System.Guid sessionId, string typeName, string rightName, object userState) {
            if ((this.GetGrantedObjectNamesOperationCompleted == null)) {
                this.GetGrantedObjectNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGrantedObjectNamesOperationCompleted);
            }
            this.InvokeAsync("GetGrantedObjectNames", new object[] {
                        sessionId,
                        typeName,
                        rightName}, this.GetGrantedObjectNamesOperationCompleted, userState);
        }
        
        private void OnGetGrantedObjectNamesOperationCompleted(object arg) {
            if ((this.GetGrantedObjectNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGrantedObjectNamesCompleted(this, new GetGrantedObjectNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/GetGrantedObjectIds", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid[] GetGrantedObjectIds(System.Guid sessionId, string typeName, string rightName) {
            object[] results = this.Invoke("GetGrantedObjectIds", new object[] {
                        sessionId,
                        typeName,
                        rightName});
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public void GetGrantedObjectIdsAsync(System.Guid sessionId, string typeName, string rightName) {
            this.GetGrantedObjectIdsAsync(sessionId, typeName, rightName, null);
        }
        
        /// <remarks/>
        public void GetGrantedObjectIdsAsync(System.Guid sessionId, string typeName, string rightName, object userState) {
            if ((this.GetGrantedObjectIdsOperationCompleted == null)) {
                this.GetGrantedObjectIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGrantedObjectIdsOperationCompleted);
            }
            this.InvokeAsync("GetGrantedObjectIds", new object[] {
                        sessionId,
                        typeName,
                        rightName}, this.GetGrantedObjectIdsOperationCompleted, userState);
        }
        
        private void OnGetGrantedObjectIdsOperationCompleted(object arg) {
            if ((this.GetGrantedObjectIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGrantedObjectIdsCompleted(this, new GetGrantedObjectIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/HasAccessByName", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasAccessByName(System.Guid sessionId, string objectName, string typeName, string rightName) {
            object[] results = this.Invoke("HasAccessByName", new object[] {
                        sessionId,
                        objectName,
                        typeName,
                        rightName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasAccessByNameAsync(System.Guid sessionId, string objectName, string typeName, string rightName) {
            this.HasAccessByNameAsync(sessionId, objectName, typeName, rightName, null);
        }
        
        /// <remarks/>
        public void HasAccessByNameAsync(System.Guid sessionId, string objectName, string typeName, string rightName, object userState) {
            if ((this.HasAccessByNameOperationCompleted == null)) {
                this.HasAccessByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasAccessByNameOperationCompleted);
            }
            this.InvokeAsync("HasAccessByName", new object[] {
                        sessionId,
                        objectName,
                        typeName,
                        rightName}, this.HasAccessByNameOperationCompleted, userState);
        }
        
        private void OnHasAccessByNameOperationCompleted(object arg) {
            if ((this.HasAccessByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasAccessByNameCompleted(this, new HasAccessByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/HasAccessById", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool HasAccessById(System.Guid sessionId, System.Guid targetId, string rightName) {
            object[] results = this.Invoke("HasAccessById", new object[] {
                        sessionId,
                        targetId,
                        rightName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void HasAccessByIdAsync(System.Guid sessionId, System.Guid targetId, string rightName) {
            this.HasAccessByIdAsync(sessionId, targetId, rightName, null);
        }
        
        /// <remarks/>
        public void HasAccessByIdAsync(System.Guid sessionId, System.Guid targetId, string rightName, object userState) {
            if ((this.HasAccessByIdOperationCompleted == null)) {
                this.HasAccessByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnHasAccessByIdOperationCompleted);
            }
            this.InvokeAsync("HasAccessById", new object[] {
                        sessionId,
                        targetId,
                        rightName}, this.HasAccessByIdOperationCompleted, userState);
        }
        
        private void OnHasAccessByIdOperationCompleted(object arg) {
            if ((this.HasAccessByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.HasAccessByIdCompleted(this, new HasAccessByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/GetUsers", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserInfo[] GetUsers() {
            object[] results = this.Invoke("GetUsers", new object[0]);
            return ((UserInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersAsync() {
            this.GetUsersAsync(null);
        }
        
        /// <remarks/>
        public void GetUsersAsync(object userState) {
            if ((this.GetUsersOperationCompleted == null)) {
                this.GetUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersOperationCompleted);
            }
            this.InvokeAsync("GetUsers", new object[0], this.GetUsersOperationCompleted, userState);
        }
        
        private void OnGetUsersOperationCompleted(object arg) {
            if ((this.GetUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/FetchClientBrandImage", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FetchClientBrandImage() {
            object[] results = this.Invoke("FetchClientBrandImage", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FetchClientBrandImageAsync() {
            this.FetchClientBrandImageAsync(null);
        }
        
        /// <remarks/>
        public void FetchClientBrandImageAsync(object userState) {
            if ((this.FetchClientBrandImageOperationCompleted == null)) {
                this.FetchClientBrandImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchClientBrandImageOperationCompleted);
            }
            this.InvokeAsync("FetchClientBrandImage", new object[0], this.FetchClientBrandImageOperationCompleted, userState);
        }
        
        private void OnFetchClientBrandImageOperationCompleted(object arg) {
            if ((this.FetchClientBrandImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchClientBrandImageCompleted(this, new FetchClientBrandImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.gijima.com/Oculus/FetchGroupBrandImage", RequestNamespace="https://www.gijima.com/Oculus", ResponseNamespace="https://www.gijima.com/Oculus", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string FetchGroupBrandImage(string sessionId) {
            object[] results = this.Invoke("FetchGroupBrandImage", new object[] {
                        sessionId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FetchGroupBrandImageAsync(string sessionId) {
            this.FetchGroupBrandImageAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void FetchGroupBrandImageAsync(string sessionId, object userState) {
            if ((this.FetchGroupBrandImageOperationCompleted == null)) {
                this.FetchGroupBrandImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFetchGroupBrandImageOperationCompleted);
            }
            this.InvokeAsync("FetchGroupBrandImage", new object[] {
                        sessionId}, this.FetchGroupBrandImageOperationCompleted, userState);
        }
        
        private void OnFetchGroupBrandImageOperationCompleted(object arg) {
            if ((this.FetchGroupBrandImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FetchGroupBrandImageCompleted(this, new FetchGroupBrandImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public partial class SessionInfo {
        
        private System.Guid sessionIdField;
        
        private string usernameField;
        
        private System.Guid userIdField;
        
        /// <remarks/>
        public System.Guid SessionId {
            get {
                return this.sessionIdField;
            }
            set {
                this.sessionIdField = value;
            }
        }
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid UserId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3761.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://www.gijima.com/Oculus")]
    public partial class UserInfo {
        
        private string nameField;
        
        private System.Guid idField;
        
        private System.DateTime lastLogonField;
        
        private System.DateTime passCreatedField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastLogon {
            get {
                return this.lastLogonField;
            }
            set {
                this.lastLogonField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime PassCreated {
            get {
                return this.passCreatedField;
            }
            set {
                this.passCreatedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void ConvertSIDCompletedEventHandler(object sender, ConvertSIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertSIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertSIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void LoginFailReasonCompletedEventHandler(object sender, LoginFailReasonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginFailReasonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginFailReasonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void LoginAndChangePasswordCompletedEventHandler(object sender, LoginAndChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginAndChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginAndChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void LoginAndChangePasswordFailReasonCompletedEventHandler(object sender, LoginAndChangePasswordFailReasonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginAndChangePasswordFailReasonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginAndChangePasswordFailReasonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void LogoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetSessionInfoCompletedEventHandler(object sender, GetSessionInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSessionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSessionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SessionInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SessionInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetGrantedObjectNamesCompletedEventHandler(object sender, GetGrantedObjectNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGrantedObjectNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGrantedObjectNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetGrantedObjectIdsCompletedEventHandler(object sender, GetGrantedObjectIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGrantedObjectIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGrantedObjectIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void HasAccessByNameCompletedEventHandler(object sender, HasAccessByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasAccessByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasAccessByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void HasAccessByIdCompletedEventHandler(object sender, HasAccessByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HasAccessByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal HasAccessByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void GetUsersCompletedEventHandler(object sender, GetUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void FetchClientBrandImageCompletedEventHandler(object sender, FetchClientBrandImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchClientBrandImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchClientBrandImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    public delegate void FetchGroupBrandImageCompletedEventHandler(object sender, FetchGroupBrandImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FetchGroupBrandImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FetchGroupBrandImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591